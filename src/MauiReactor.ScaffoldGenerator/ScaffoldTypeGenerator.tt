<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

using MauiReactor;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable

namespace <#= Namespace #>
{
    <# if (IsBaseGenericType) { #>
    public partial interface <#= InterfaceName #> : IGeneric<#= BaseTypeName() #>
    <# } else { #>
    public partial interface <#= InterfaceName #> : <#= BaseInterfaceName() #>
    <# } #>
    {
    <# if (SupportItemTemplate) { #>
        IEnumerable? ItemsSource { get; set; }

        Func<object, VisualNode>? ItemTemplate { get; set; }
    <# } #>

    <# foreach (var property in Properties) { #>
        object? <#= property.Name #> { get; set; }
    <# } #>

    <# foreach (var ev in Events) { 
    var genericArgs = ((INamedTypeSymbol)ev.Type).TypeArguments;
    #>
        Action? <#= ev.Name #>Action { get; set; }
        Action<<#= GetActionWithArgsParameters(ev) #>>? <#= ev.Name #>ActionWithArgs { get; set; }
    <# } #>

    }

    <# if (IsBaseGenericType) { #>
    public abstract partial class <#= TypeName #><T> : <#= BaseTypeName() #><T, <#= GenericArgumentBaseFullBaseTypeName #>>, <#= InterfaceName #><#= SupportItemTemplate ? ", ICustomDataTemplateOwner, IAutomationItemContainer" : string.Empty #> where T : <#= FullTypeName #>, new()
    {
        public <#= TypeName #>()
        { 
        
        }

        public <#= TypeName #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else if (IsGenericType) { #>
    public abstract partial class <#= TypeName #><T, TChild> : <#= BaseTypeName() #><T>, <#= InterfaceName #><#= SupportItemTemplate ? ", ICustomDataTemplateOwner" : string.Empty #> where T : <#= FullTypeName #><TChild>, new() where TChild : <#= GenericArgumentBaseFullTypeName #>
    {
        public <#= TypeName #>()
        { 
        
        }

        public <#= TypeName #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else if (IsTypeSealed) { #>
    public sealed partial class <#= TypeName #> : <#= BaseTypeName() #><<#= FullTypeName #>>, <#= InterfaceName #><#= SupportItemTemplate ? ", ICustomDataTemplateOwner, IAutomationItemContainer" : string.Empty #>
    {
        public <#= TypeName #>()
        { 
        
        }

        public <#= TypeName #>(Action<<#= FullTypeName #>?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else if (IsTypeNotAbstractWithEmptyConstructor) { #>
    public partial class <#= TypeName #><T> : <#= BaseTypeName() #><T>, <#= InterfaceName #><#= SupportItemTemplate ? ", ICustomDataTemplateOwner, IAutomationItemContainer" : string.Empty #> where T : <#= FullTypeName #>, new()
    {
        public <#= TypeName #>()
        { 
        
        }

        public <#= TypeName #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else { #>
    public abstract partial class <#= TypeName #><T> : <#= BaseTypeName() #><T>, <#= InterfaceName #> <#= SupportItemTemplate ? ", ICustomDataTemplateOwner, IAutomationItemContainer" : string.Empty #> where T : <#= FullTypeName #>, new()
    {
        protected <#= TypeName #>()
        { 
        
        }

        protected <#= TypeName #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }    
    <# } #>
        <# if (SupportItemTemplate) { #>
        IEnumerable? <#= InterfaceName #>.ItemsSource { get; set; }

        Func<object, VisualNode>? <#= InterfaceName #>.ItemTemplate { get; set; }

        private List<WeakReference<VisualNode>>? _loadedForciblyChildren;

        VisualNode? ICustomDataTemplateOwner.GetVisualNodeForItem(object item)
        {
            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            if (thisAs<#= InterfaceName #>.ItemTemplate == null)
            {
                return null;
            }

            var visualNodeForItem = thisAs<#= InterfaceName #>.ItemTemplate.Invoke(item);

            _loadedForciblyChildren?.Add(new WeakReference<VisualNode>(visualNodeForItem));

            return visualNodeForItem;
        }

        IEnumerable<TChild> IAutomationItemContainer.Descendants<TChild>()
        {
            if (_loadedForciblyChildren == null)
            {
                ForceItemsLoad();
            }

            Validate.EnsureNotNull(_loadedForciblyChildren);

            foreach (var loadedForciblyChild in _loadedForciblyChildren)
            {
                if (loadedForciblyChild.TryGetTarget(out var child))
                {
                    if (child is TChild childT)
                    {
                        yield return childT;
                    }
                    
                    if (child is IVisualNodeWithNativeControl childVisualNodeWithNativeControl)
                    {
                        var childNativeControl = childVisualNodeWithNativeControl.GetNativeControl<Microsoft.Maui.Controls.BindableObject>();

                        if (childNativeControl is TChild childNativeControlAsT)
                        {
                            yield return childNativeControlAsT;
                        }
                    }

                    foreach (var childChildT in ((IAutomationItemContainer)child).Descendants<TChild>())
                    {
                        yield return childChildT;
                    }
                }
            }
        }

        private void ForceItemsLoad()
        {
            Validate.EnsureNotNull(NativeControl);

            var itemsSource = NativeControl.ItemsSource.Cast<object>().ToArray();

            _loadedForciblyChildren = new();

            foreach (var item in itemsSource)
            {
                var itemContent = (Microsoft.Maui.Controls.BindableObject)NativeControl.ItemTemplate.CreateContent();

                itemContent.BindingContext = item;
            }
        }

        private CustomDataTemplate? _customDataTemplate;
        <# } #>

        <# foreach (var property in Properties) { #>
        object? <#= InterfaceName #>.<#= property.Name #> { get; set; }
        <# } #>

        <# foreach (var ev in Events) {
        var genericArgs = ((INamedTypeSymbol)ev.Type).TypeArguments;
        #>
        Action? <#= InterfaceName #>.<#= ev.Name #>Action { get; set; }
        Action<<#= GetActionWithArgsParameters(ev) #>>? <#= InterfaceName #>.<#= ev.Name #>ActionWithArgs { get; set; }
        <# } #>

        <# if (_childrenTypes.Length > 0) { #>
        <# foreach (var childType in _childrenTypes) { #>
        private readonly Dictionary<Microsoft.Maui.Controls.BindableObject, <#= childType.TypeSymbol.GetFullyQualifiedName() #>> _<#= childType.TypeSymbol.Name.ToLocalVariableName() #>ElementItemMap = new();
        <# } #>

        protected override void OnAddChild(VisualNode widget, Microsoft.Maui.Controls.BindableObject childControl)
        {
            Validate.EnsureNotNull(NativeControl);

            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            <# bool firstElementToAdd = true; #>
            <# foreach (var childType in _childrenTypes) { #>
            <#= firstElementToAdd ? string.Empty : "else " #>if (childControl is <#= childType.TypeSymbol.GetFullyQualifiedName() #> <#= childType.TypeSymbol.Name.ToLocalVariableName() #>Item)
            {
                NativeControl.<#= childType.ChildPropertyName #>.Insert(widget.ChildIndex, <#= childType.TypeSymbol.Name.ToLocalVariableName() #>Item);
                _<#= childType.TypeSymbol.Name.ToLocalVariableName() #>ElementItemMap[childControl] = <#= childType.TypeSymbol.Name.ToLocalVariableName() #>Item;
            }
            <# firstElementToAdd = false; #>
            <# } #>

            base.OnAddChild(widget, childControl);
        }

        protected override void OnRemoveChild(VisualNode widget, Microsoft.Maui.Controls.BindableObject childControl)
        {
            Validate.EnsureNotNull(NativeControl);
            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            <# bool firstElementRemove = true; #>
            <# foreach (var childType in _childrenTypes) { #>
            <#= firstElementRemove ? string.Empty : "else " #>if (_<#= childType.TypeSymbol.Name.ToLocalVariableName() #>ElementItemMap.TryGetValue(childControl, out var <#= childType.TypeSymbol.Name.ToLocalVariableName() #>Item))
            {
                NativeControl.<#= childType.ChildPropertyName #>.Remove(<#= childType.TypeSymbol.Name.ToLocalVariableName() #>Item);
            }
            <# firstElementRemove = false; #>
            <# } #>

            base.OnRemoveChild(widget, childControl);
        }
        <# }#>

        protected override void OnUpdate()
        {
            OnBeginUpdate();

            <# if (Properties.Any() || SupportItemTemplate) { #>
            Validate.EnsureNotNull(NativeControl);
            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            <#}#>
            
            <# if (SupportItemTemplate) { #>
            
            _loadedForciblyChildren = null;

            if (thisAs<#= InterfaceName #>.ItemsSource != null &&
                NativeControl.ItemsSource == thisAs<#= InterfaceName #>.ItemsSource)
            {
                Validate.EnsureNotNull(_customDataTemplate);

                _customDataTemplate.Owner = this;

                _customDataTemplate.Update();
            }
            else if (thisAs<#= InterfaceName #>.ItemsSource != null)
            {
                _customDataTemplate = new CustomDataTemplate(this);
                NativeControl.ItemsSource = thisAs<#= InterfaceName #>.ItemsSource;
                NativeControl.ItemTemplate = _customDataTemplate.DataTemplate;
            }
            else
            {
                <# if (IsGenericType) { #>
                NativeControl.ClearValue(global::<#= FullTypeName #><TChild>.ItemsSourceProperty);
                NativeControl.ClearValue(global::<#= FullTypeName #><TChild>.ItemTemplateProperty);
                <# } else { #>
                NativeControl.ClearValue(global::<#= FullTypeName #>.ItemsSourceProperty);
                NativeControl.ClearValue(global::<#= FullTypeName #>.ItemTemplateProperty);
                <# } #>
            }
            <# } #>


            <# if (Properties.Any()) { #>
            <# foreach (var property in Properties) { #>
            <# if (IsGenericType) { #>
            SetPropertyValue(NativeControl, global::<#= FullTypeName #><TChild>.<#= property.Name #>Property, thisAs<#= InterfaceName #>.<#= property.Name #>);
            <# } else { #>
            SetPropertyValue(NativeControl, global::<#= FullTypeName #>.<#= property.Name #>Property, thisAs<#= InterfaceName #>.<#= property.Name #>);
            <# } #>
            <# } #>

            <# } #>

            base.OnUpdate();

            OnEndUpdate();
        }

        <# if (AnimatableProperties.Any()) { #>
        protected override void OnAnimate()
        {
            OnBeginAnimate();

            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;

            <# foreach (var property in AnimatableProperties) { #>
            <# if (IsGenericType) { #>
            AnimateProperty(<#= FullTypeName #><TChild>.<#= property.Name #>Property, thisAs<#= InterfaceName #>.<#= property.Name #>);
            <# } else { #>
            AnimateProperty(global::<#= FullTypeName #>.<#= property.Name #>Property, thisAs<#= InterfaceName #>.<#= property.Name #>);
            <# } #>
            <# } #>

            base.OnAnimate();

            OnEndAnimate();
        }
        <# } #>

        partial void OnBeginUpdate();
        partial void OnEndUpdate();

        partial void OnBeginAnimate();
        partial void OnEndAnimate();

        <# if (Events.Any()) { #>

        partial void OnAttachingNativeEvents();
        partial void OnDetachingNativeEvents();

        protected override void OnAttachNativeEvents()
        {
            Validate.EnsureNotNull(NativeControl);

            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            <# foreach (var ev in Events) { #>
            if (thisAs<#= InterfaceName #>.<#= ev.Name #>Action != null || thisAs<#= InterfaceName #>.<#= ev.Name #>ActionWithArgs != null)
            {
                NativeControl.<#= ev.Name #> += NativeControl_<#= ev.Name #>;
            }
            <# } #>

            OnAttachingNativeEvents();

            base.OnAttachNativeEvents();
        }

        <# foreach (var ev in Events) { 
        var genericArgs = ((INamedTypeSymbol)ev.Type).TypeArguments;
        #>
        <#= GetDelegateParametersDescriptor(ev) #>
        {
            var thisAs<#= InterfaceName #> = (<#= InterfaceName #>)this;
            thisAs<#= InterfaceName #>.<#= ev.Name #>Action?.Invoke();
            <#= GetDelegateInvokeDescriptor(ev) #>
        }
        <# } #>

        protected override void OnDetachNativeEvents()
        {
            if (NativeControl != null)
            {
            <# foreach (var ev in Events) { #>
            NativeControl.<#= ev.Name #> -= NativeControl_<#= ev.Name #>;
            <# } #>
            }

            OnDetachingNativeEvents();

            base.OnDetachNativeEvents();
        }
        <# } #>
        
        <# if (SupportItemTemplate) { #>
        protected override void OnMigrated(VisualNode newNode)
        {
            var new<#= TypeName #> = ((<#= TypeName #><T>)newNode);
            new<#= TypeName #>._customDataTemplate = _customDataTemplate;
            if (new<#= TypeName #>._customDataTemplate != null)
            {
                new<#= TypeName #>._customDataTemplate.Owner = new<#= TypeName #>;
            }            

            base.OnMigrated(newNode);
        }
        <# } #>
    }

    <# if (IsTypeNotAbstractWithEmptyConstructor && !IsTypeSealed) { #>
    public partial class <#= TypeName #> : <#= TypeName #><<#= FullTypeName #>>
    {
        public <#= TypeName #>()
        { 
        
        }

        public <#= TypeName #>(Action<<#= FullTypeName #>?> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    <# } #>

    <# if (GeneratorType.Name != TypeName) { #>
    public partial class <#= GeneratorType.Name #> : <#= TypeName #>
    {
        public <#= GeneratorType.Name #>()
        { 
        
        }

        public <#= GeneratorType.Name #>(Action<<#= FullTypeName #>?> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    <# } #>

    public static partial class <#= TypeName #>Extensions
    {
        <# if (SupportItemTemplate) { #>
        public static T ItemsSource<T, TItem>(this T <#= TypeName.ToLocalVariableName() #>, IEnumerable<TItem> itemsSource) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.ItemsSource = itemsSource;
            return <#= TypeName.ToLocalVariableName() #>;
        }

        public static T ItemsSource<T, TItem>(this T <#= TypeName.ToLocalVariableName() #>, IEnumerable<TItem> itemsSource, Func<TItem, VisualNode> template) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.ItemsSource = itemsSource;
            <#= TypeName.ToLocalVariableName() #>.ItemTemplate = new Func<object, VisualNode>(item => template((TItem)item));
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>


        <# foreach (var property in Properties) { #>
        <# if (property.Type.Equals(TypeofDouble, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxDoubleAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxDoubleAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = v.CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }        
        <# } else if (property.Type.Equals(TypeofFloat, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxFloatAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxFloatAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxFloatAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }        
        <# } else if (property.Type.Equals(TypeofRect, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxRectAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleRectAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxRectAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }        
        <# } else if (property.Type.Equals(TypeofPoint, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxPointAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimplePointAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxPointAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }        
        <# } else if (property.Type.Equals(TypeofPointF, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxPointFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimplePointFAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxPointFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }        
        <# } else if (property.Type.Equals(TypeofThickness, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }                
        <# } else if (property.Type.Equals(TypeofThicknessF, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxThicknessFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessFAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }                
        <# } else if (property.Type.Equals(TypeofCornerRadiusF, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxCornerRadiusFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusFAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxCornerRadiusFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }              
        <# } else if (property.Type.Equals(TypeofCornerRadius, SymbolEqualityComparer.Default)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxCornerRadiusAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } else { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, <#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #> <#= property.Name.CamelCase() #>) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            return <#= TypeName.ToLocalVariableName() #>;
        }       
        <# } #>

        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, Func<<#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #>> <#= property.Name.CamelCase() #>Func) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.Type.GetFullyQualifiedName().ToReservedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>Func);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# if (property.Type.Name == "Thickness") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Thickness(leftRight, topBottom);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Microsoft.Maui.Thickness(leftRight, topBottom)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double uniformSize, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Thickness(uniformSize);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Microsoft.Maui.Thickness(uniformSize)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Thickness(left, top, right, bottom);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessAnimation(new Microsoft.Maui.Thickness(left, top, right, bottom)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>

        <# if (property.Type.Name == "ThicknessF") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, float leftRight, float topBottom, RxThicknessFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new ThicknessF(leftRight, topBottom);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessFAnimation(new ThicknessF(leftRight, topBottom)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, float uniformSize, RxThicknessFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new ThicknessF(uniformSize);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessFAnimation(new ThicknessF(uniformSize)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, float left, float top, float right, float bottom, RxThicknessFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new ThicknessF(left, top, right, bottom);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleThicknessFAnimation(new ThicknessF(left, top, right, bottom)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxThicknessFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>
        
        <# if (property.Type.Name == "CornerRadius") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, float uniformSize, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(uniformSize);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(uniformSize)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxCornerRadiusAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>,float topLeft, float topRight, float bottomRight, float bottomLeft, RxCornerRadiusAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(topLeft, topRight, bottomRight, bottomLeft);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusAnimation(new CornerRadius(topLeft, topRight, bottomRight, bottomLeft)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> ((RxCornerRadiusAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>
        
        <# if (property.Type.Name == "CornerRadiusF") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, float uniformSize, RxCornerRadiusFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadiusF(uniformSize);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusFAnimation(new CornerRadiusF(uniformSize)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxCornerRadiusFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>,float topLeft, float topRight, float bottomRight, float bottomLeft, RxCornerRadiusFAnimation? customAnimation = null) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadiusF(topLeft, topRight, bottomRight, bottomLeft);
            <#= TypeName.ToLocalVariableName() #>.AppendAnimatable(global::<#= FullTypeName #>.<#= property.Name #>Property, customAnimation ?? new RxSimpleCornerRadiusFAnimation(new CornerRadiusF(topLeft, topRight, bottomRight, bottomLeft)), v => <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = ((RxCornerRadiusFAnimation)v).CurrentValue());
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>


        <# if (property.Type.GetFullyQualifiedName() == "Microsoft.Maui.Graphics.Point") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double x, double y) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Graphics.Point(x, y);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>
        

        <# if (property.Type.Name == "CornerRadius") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double uniformRadius) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(uniformRadius);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, double topLeft, double topRight, double bottomLeft, double bottomRight) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new CornerRadius(topLeft, topRight, bottomLeft, bottomRight);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>
        <# if (property.Type.Name == "ImageSource") { 
        var propertyName = property.Name; #>
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLocalVariableName() #>, string file) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromFile(file);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLocalVariableName() #>, string resourceName, Assembly sourceAssembly) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLocalVariableName() #>, Uri imageUri) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLocalVariableName() #>, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = new Microsoft.Maui.Controls.UriImageSource
            {
                Uri = imageUri,
                CachingEnabled = cachingEnabled,
                CacheValidity = cacheValidity
            };
            return <#= TypeName.ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLocalVariableName() #>, Func<System.IO.Stream> imageStream) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= property.Name #> = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>

        <# } #>
        
        <# foreach (var ev in Events) {
        var genericArgs = ((INamedTypeSymbol)ev.Type).TypeArguments;
        #>
        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, Action? <#= ev.Name.ToLocalVariableName() #>Action) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= ev.Name #>Action = <#= ev.Name.ToLocalVariableName() #>Action;
            return <#= TypeName.ToLocalVariableName() #>;
        }

        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLocalVariableName() #>, Action<<#= GetActionWithArgsParameters(ev) #>>? <#= ev.Name.ToLocalVariableName() #>ActionWithArgs) where T : <#= InterfaceName #>
        {
            <#= TypeName.ToLocalVariableName() #>.<#= ev.Name #>ActionWithArgs = <#= ev.Name.ToLocalVariableName() #>ActionWithArgs;
            return <#= TypeName.ToLocalVariableName() #>;
        }
        <# } #>
    }
}
