// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IAbsoluteLayout : ILayout
{
}

public partial class AbsoluteLayout<T> : Layout<T>, IAbsoluteLayout where T : Microsoft.Maui.Controls.AbsoluteLayout, new()
{
    public AbsoluteLayout()
    {
        AbsoluteLayoutStyles.Default?.Invoke(this);
    }

    public AbsoluteLayout(Action<T?> componentRefAction) : base(componentRefAction)
    {
        AbsoluteLayoutStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && AbsoluteLayoutStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class AbsoluteLayout : AbsoluteLayout<Microsoft.Maui.Controls.AbsoluteLayout>
{
    public AbsoluteLayout()
    {
    }

    public AbsoluteLayout(Action<Microsoft.Maui.Controls.AbsoluteLayout?> componentRefAction) : base(componentRefAction)
    {
    }

    public AbsoluteLayout(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class AbsoluteLayoutExtensions
{
/*
    */
}

public static partial class AbsoluteLayoutStyles
{
    public static Action<IAbsoluteLayout>? Default { get; set; }
    public static Dictionary<string, Action<IAbsoluteLayout>> Themes { get; } = [];
}