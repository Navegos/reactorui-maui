// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISearchHandler : IVisualNodeWithNativeControl
{
    EventCommand<EventArgs>? FocusedEvent { get; set; }

    EventCommand<EventArgs>? UnfocusedEvent { get; set; }
}

public partial class SearchHandler<T> : VisualNode<T>, ISearchHandler where T : Microsoft.Maui.Controls.SearchHandler, new()
{
    public SearchHandler()
    {
        SearchHandlerStyles.Default?.Invoke(this);
    }

    public SearchHandler(Action<T?> componentRefAction) : base(componentRefAction)
    {
        SearchHandlerStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? ISearchHandler.FocusedEvent { get; set; }

    EventCommand<EventArgs>? ISearchHandler.UnfocusedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SearchHandlerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingFocusedEvent;
    private EventCommand<EventArgs>? _executingUnfocusedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsISearchHandler = (ISearchHandler)this;
        if (thisAsISearchHandler.FocusedEvent != null)
        {
            NativeControl.Focused += NativeControl_Focused;
        }

        if (thisAsISearchHandler.UnfocusedEvent != null)
        {
            NativeControl.Unfocused += NativeControl_Unfocused;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Focused(object? sender, EventArgs e)
    {
        var thisAsISearchHandler = (ISearchHandler)this;
        if (_executingFocusedEvent == null || _executingFocusedEvent.IsCompleted)
        {
            _executingFocusedEvent = thisAsISearchHandler.FocusedEvent;
            _executingFocusedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Unfocused(object? sender, EventArgs e)
    {
        var thisAsISearchHandler = (ISearchHandler)this;
        if (_executingUnfocusedEvent == null || _executingUnfocusedEvent.IsCompleted)
        {
            _executingUnfocusedEvent = thisAsISearchHandler.UnfocusedEvent;
            _executingUnfocusedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Focused -= NativeControl_Focused;
            NativeControl.Unfocused -= NativeControl_Unfocused;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SearchHandler<T> @searchhandler)
        {
            if (_executingFocusedEvent != null && !_executingFocusedEvent.IsCompleted)
            {
                @searchhandler._executingFocusedEvent = _executingFocusedEvent;
            }

            if (_executingUnfocusedEvent != null && !_executingUnfocusedEvent.IsCompleted)
            {
                @searchhandler._executingUnfocusedEvent = _executingUnfocusedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SearchHandler : SearchHandler<Microsoft.Maui.Controls.SearchHandler>
{
    public SearchHandler()
    {
    }

    public SearchHandler(Action<Microsoft.Maui.Controls.SearchHandler?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class SearchHandlerExtensions
{
    /*
    
    
    
    
    
    
    
    
    
    
    static object? SetCharacterSpacing(object searchHandler, RxAnimation animation)
        => ((ISearchHandler)searchHandler).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    
    
    static object? SetFontSize(object searchHandler, RxAnimation animation)
        => ((ISearchHandler)searchHandler).FontSize = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    */
    public static T Keyboard<T>(this T searchHandler, Microsoft.Maui.Keyboard keyboard)
        where T : ISearchHandler
    {
        //searchHandler.Keyboard = keyboard;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.KeyboardProperty, keyboard);
        return searchHandler;
    }

    public static T Keyboard<T>(this T searchHandler, Func<Microsoft.Maui.Keyboard> keyboardFunc)
        where T : ISearchHandler
    {
        //searchHandler.Keyboard = new PropertyValue<Microsoft.Maui.Keyboard>(keyboardFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.KeyboardProperty, new PropertyValue<Microsoft.Maui.Keyboard>(keyboardFunc));
        return searchHandler;
    }

    public static T HorizontalTextAlignment<T>(this T searchHandler, Microsoft.Maui.TextAlignment horizontalTextAlignment)
        where T : ISearchHandler
    {
        //searchHandler.HorizontalTextAlignment = horizontalTextAlignment;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.HorizontalTextAlignmentProperty, horizontalTextAlignment);
        return searchHandler;
    }

    public static T HorizontalTextAlignment<T>(this T searchHandler, Func<Microsoft.Maui.TextAlignment> horizontalTextAlignmentFunc)
        where T : ISearchHandler
    {
        //searchHandler.HorizontalTextAlignment = new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.HorizontalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc));
        return searchHandler;
    }

    public static T VerticalTextAlignment<T>(this T searchHandler, Microsoft.Maui.TextAlignment verticalTextAlignment)
        where T : ISearchHandler
    {
        //searchHandler.VerticalTextAlignment = verticalTextAlignment;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.VerticalTextAlignmentProperty, verticalTextAlignment);
        return searchHandler;
    }

    public static T VerticalTextAlignment<T>(this T searchHandler, Func<Microsoft.Maui.TextAlignment> verticalTextAlignmentFunc)
        where T : ISearchHandler
    {
        //searchHandler.VerticalTextAlignment = new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.VerticalTextAlignmentProperty, new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc));
        return searchHandler;
    }

    public static T TextColor<T>(this T searchHandler, Microsoft.Maui.Graphics.Color textColor)
        where T : ISearchHandler
    {
        //searchHandler.TextColor = textColor;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.TextColorProperty, textColor);
        return searchHandler;
    }

    public static T TextColor<T>(this T searchHandler, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : ISearchHandler
    {
        //searchHandler.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc));
        return searchHandler;
    }

    public static T CharacterSpacing<T>(this T searchHandler, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : ISearchHandler
    {
        //searchHandler.CharacterSpacing = characterSpacing;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.CharacterSpacingProperty, characterSpacing);
        searchHandler.AppendAnimatable(Microsoft.Maui.Controls.SearchHandler.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return searchHandler;
    }

    public static T CharacterSpacing<T>(this T searchHandler, Func<double> characterSpacingFunc)
        where T : ISearchHandler
    {
        //searchHandler.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc));
        return searchHandler;
    }

    public static T CancelButtonColor<T>(this T searchHandler, Microsoft.Maui.Graphics.Color cancelButtonColor)
        where T : ISearchHandler
    {
        //searchHandler.CancelButtonColor = cancelButtonColor;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.CancelButtonColorProperty, cancelButtonColor);
        return searchHandler;
    }

    public static T CancelButtonColor<T>(this T searchHandler, Func<Microsoft.Maui.Graphics.Color> cancelButtonColorFunc)
        where T : ISearchHandler
    {
        //searchHandler.CancelButtonColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(cancelButtonColorFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.CancelButtonColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(cancelButtonColorFunc));
        return searchHandler;
    }

    public static T FontFamily<T>(this T searchHandler, string fontFamily)
        where T : ISearchHandler
    {
        //searchHandler.FontFamily = fontFamily;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontFamilyProperty, fontFamily);
        return searchHandler;
    }

    public static T FontFamily<T>(this T searchHandler, Func<string> fontFamilyFunc)
        where T : ISearchHandler
    {
        //searchHandler.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc));
        return searchHandler;
    }

    public static T FontSize<T>(this T searchHandler, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : ISearchHandler
    {
        //searchHandler.FontSize = fontSize;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontSizeProperty, fontSize);
        searchHandler.AppendAnimatable(Microsoft.Maui.Controls.SearchHandler.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return searchHandler;
    }

    public static T FontSize<T>(this T searchHandler, Func<double> fontSizeFunc)
        where T : ISearchHandler
    {
        //searchHandler.FontSize = new PropertyValue<double>(fontSizeFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontSizeProperty, new PropertyValue<double>(fontSizeFunc));
        return searchHandler;
    }

    public static T FontAttributes<T>(this T searchHandler, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : ISearchHandler
    {
        //searchHandler.FontAttributes = fontAttributes;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontAttributesProperty, fontAttributes);
        return searchHandler;
    }

    public static T FontAttributes<T>(this T searchHandler, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : ISearchHandler
    {
        //searchHandler.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc));
        return searchHandler;
    }

    public static T FontAutoScalingEnabled<T>(this T searchHandler, bool fontAutoScalingEnabled)
        where T : ISearchHandler
    {
        //searchHandler.FontAutoScalingEnabled = fontAutoScalingEnabled;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return searchHandler;
    }

    public static T FontAutoScalingEnabled<T>(this T searchHandler, Func<bool> fontAutoScalingEnabledFunc)
        where T : ISearchHandler
    {
        //searchHandler.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc));
        return searchHandler;
    }

    public static T Placeholder<T>(this T searchHandler, string placeholder)
        where T : ISearchHandler
    {
        //searchHandler.Placeholder = placeholder;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.PlaceholderProperty, placeholder);
        return searchHandler;
    }

    public static T Placeholder<T>(this T searchHandler, Func<string> placeholderFunc)
        where T : ISearchHandler
    {
        //searchHandler.Placeholder = new PropertyValue<string>(placeholderFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.PlaceholderProperty, new PropertyValue<string>(placeholderFunc));
        return searchHandler;
    }

    public static T PlaceholderColor<T>(this T searchHandler, Microsoft.Maui.Graphics.Color placeholderColor)
        where T : ISearchHandler
    {
        //searchHandler.PlaceholderColor = placeholderColor;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.PlaceholderColorProperty, placeholderColor);
        return searchHandler;
    }

    public static T PlaceholderColor<T>(this T searchHandler, Func<Microsoft.Maui.Graphics.Color> placeholderColorFunc)
        where T : ISearchHandler
    {
        //searchHandler.PlaceholderColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(placeholderColorFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.PlaceholderColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(placeholderColorFunc));
        return searchHandler;
    }

    public static T TextTransform<T>(this T searchHandler, Microsoft.Maui.TextTransform textTransform)
        where T : ISearchHandler
    {
        //searchHandler.TextTransform = textTransform;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.TextTransformProperty, textTransform);
        return searchHandler;
    }

    public static T TextTransform<T>(this T searchHandler, Func<Microsoft.Maui.TextTransform> textTransformFunc)
        where T : ISearchHandler
    {
        //searchHandler.TextTransform = new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.TextTransformProperty, new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc));
        return searchHandler;
    }

    public static T BackgroundColor<T>(this T searchHandler, Microsoft.Maui.Graphics.Color backgroundColor)
        where T : ISearchHandler
    {
        //searchHandler.BackgroundColor = backgroundColor;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.BackgroundColorProperty, backgroundColor);
        return searchHandler;
    }

    public static T BackgroundColor<T>(this T searchHandler, Func<Microsoft.Maui.Graphics.Color> backgroundColorFunc)
        where T : ISearchHandler
    {
        //searchHandler.BackgroundColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(backgroundColorFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.BackgroundColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(backgroundColorFunc));
        return searchHandler;
    }

    public static T AutomationId<T>(this T searchHandler, string automationId)
        where T : ISearchHandler
    {
        //searchHandler.AutomationId = automationId;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.AutomationIdProperty, automationId);
        return searchHandler;
    }

    public static T AutomationId<T>(this T searchHandler, Func<string> automationIdFunc)
        where T : ISearchHandler
    {
        //searchHandler.AutomationId = new PropertyValue<string>(automationIdFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.AutomationIdProperty, new PropertyValue<string>(automationIdFunc));
        return searchHandler;
    }

    public static T ClearIconHelpText<T>(this T searchHandler, string clearIconHelpText)
        where T : ISearchHandler
    {
        //searchHandler.ClearIconHelpText = clearIconHelpText;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconHelpTextProperty, clearIconHelpText);
        return searchHandler;
    }

    public static T ClearIconHelpText<T>(this T searchHandler, Func<string> clearIconHelpTextFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearIconHelpText = new PropertyValue<string>(clearIconHelpTextFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconHelpTextProperty, new PropertyValue<string>(clearIconHelpTextFunc));
        return searchHandler;
    }

    public static T ClearIconName<T>(this T searchHandler, string clearIconName)
        where T : ISearchHandler
    {
        //searchHandler.ClearIconName = clearIconName;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconNameProperty, clearIconName);
        return searchHandler;
    }

    public static T ClearIconName<T>(this T searchHandler, Func<string> clearIconNameFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearIconName = new PropertyValue<string>(clearIconNameFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconNameProperty, new PropertyValue<string>(clearIconNameFunc));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Microsoft.Maui.Controls.ImageSource clearIcon)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = clearIcon;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, clearIcon);
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Func<Microsoft.Maui.Controls.ImageSource> clearIconFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(clearIconFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(clearIconFunc));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, string file)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Func<string> action)
        where T : ISearchHandler
    {
        /*searchHandler.ClearIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, string resourceName, Assembly sourceAssembly)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Uri imageUri)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, newValue);
        return searchHandler;
    }

    public static T ClearIcon<T>(this T searchHandler, Func<Stream> imageStream)
        where T : ISearchHandler
    {
        //searchHandler.ClearIcon = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearIconProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return searchHandler;
    }

    public static T ClearPlaceholderEnabled<T>(this T searchHandler, bool clearPlaceholderEnabled)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderEnabled = clearPlaceholderEnabled;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderEnabledProperty, clearPlaceholderEnabled);
        return searchHandler;
    }

    public static T ClearPlaceholderEnabled<T>(this T searchHandler, Func<bool> clearPlaceholderEnabledFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderEnabled = new PropertyValue<bool>(clearPlaceholderEnabledFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderEnabledProperty, new PropertyValue<bool>(clearPlaceholderEnabledFunc));
        return searchHandler;
    }

    public static T ClearPlaceholderHelpText<T>(this T searchHandler, string clearPlaceholderHelpText)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderHelpText = clearPlaceholderHelpText;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderHelpTextProperty, clearPlaceholderHelpText);
        return searchHandler;
    }

    public static T ClearPlaceholderHelpText<T>(this T searchHandler, Func<string> clearPlaceholderHelpTextFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderHelpText = new PropertyValue<string>(clearPlaceholderHelpTextFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderHelpTextProperty, new PropertyValue<string>(clearPlaceholderHelpTextFunc));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Microsoft.Maui.Controls.ImageSource clearPlaceholderIcon)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = clearPlaceholderIcon;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, clearPlaceholderIcon);
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Func<Microsoft.Maui.Controls.ImageSource> clearPlaceholderIconFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(clearPlaceholderIconFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(clearPlaceholderIconFunc));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, string file)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Func<string> action)
        where T : ISearchHandler
    {
        /*searchHandler.ClearPlaceholderIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, string resourceName, Assembly sourceAssembly)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Uri imageUri)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, newValue);
        return searchHandler;
    }

    public static T ClearPlaceholderIcon<T>(this T searchHandler, Func<Stream> imageStream)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderIcon = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderIconProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return searchHandler;
    }

    public static T ClearPlaceholderName<T>(this T searchHandler, string clearPlaceholderName)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderName = clearPlaceholderName;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderNameProperty, clearPlaceholderName);
        return searchHandler;
    }

    public static T ClearPlaceholderName<T>(this T searchHandler, Func<string> clearPlaceholderNameFunc)
        where T : ISearchHandler
    {
        //searchHandler.ClearPlaceholderName = new PropertyValue<string>(clearPlaceholderNameFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ClearPlaceholderNameProperty, new PropertyValue<string>(clearPlaceholderNameFunc));
        return searchHandler;
    }

    public static T DisplayMemberName<T>(this T searchHandler, string displayMemberName)
        where T : ISearchHandler
    {
        //searchHandler.DisplayMemberName = displayMemberName;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.DisplayMemberNameProperty, displayMemberName);
        return searchHandler;
    }

    public static T DisplayMemberName<T>(this T searchHandler, Func<string> displayMemberNameFunc)
        where T : ISearchHandler
    {
        //searchHandler.DisplayMemberName = new PropertyValue<string>(displayMemberNameFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.DisplayMemberNameProperty, new PropertyValue<string>(displayMemberNameFunc));
        return searchHandler;
    }

    public static T IsSearchEnabled<T>(this T searchHandler, bool isSearchEnabled)
        where T : ISearchHandler
    {
        //searchHandler.IsSearchEnabled = isSearchEnabled;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.IsSearchEnabledProperty, isSearchEnabled);
        return searchHandler;
    }

    public static T IsSearchEnabled<T>(this T searchHandler, Func<bool> isSearchEnabledFunc)
        where T : ISearchHandler
    {
        //searchHandler.IsSearchEnabled = new PropertyValue<bool>(isSearchEnabledFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.IsSearchEnabledProperty, new PropertyValue<bool>(isSearchEnabledFunc));
        return searchHandler;
    }

    public static T QueryIconHelpText<T>(this T searchHandler, string queryIconHelpText)
        where T : ISearchHandler
    {
        //searchHandler.QueryIconHelpText = queryIconHelpText;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconHelpTextProperty, queryIconHelpText);
        return searchHandler;
    }

    public static T QueryIconHelpText<T>(this T searchHandler, Func<string> queryIconHelpTextFunc)
        where T : ISearchHandler
    {
        //searchHandler.QueryIconHelpText = new PropertyValue<string>(queryIconHelpTextFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconHelpTextProperty, new PropertyValue<string>(queryIconHelpTextFunc));
        return searchHandler;
    }

    public static T QueryIconName<T>(this T searchHandler, string queryIconName)
        where T : ISearchHandler
    {
        //searchHandler.QueryIconName = queryIconName;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconNameProperty, queryIconName);
        return searchHandler;
    }

    public static T QueryIconName<T>(this T searchHandler, Func<string> queryIconNameFunc)
        where T : ISearchHandler
    {
        //searchHandler.QueryIconName = new PropertyValue<string>(queryIconNameFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconNameProperty, new PropertyValue<string>(queryIconNameFunc));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Microsoft.Maui.Controls.ImageSource queryIcon)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = queryIcon;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, queryIcon);
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Func<Microsoft.Maui.Controls.ImageSource> queryIconFunc)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(queryIconFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(queryIconFunc));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, string file)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, Microsoft.Maui.Controls.ImageSource.FromFile(file));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Func<string> action)
        where T : ISearchHandler
    {
        /*searchHandler.QueryIcon = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(
            () => Microsoft.Maui.Controls.ImageSource.FromFile(action()));*/
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action())));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, string resourceName, Assembly sourceAssembly)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Uri imageUri)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = new Microsoft.Maui.Controls.UriImageSource
        //{
        //    Uri = imageUri,
        //    CachingEnabled = cachingEnabled,
        //    CacheValidity = cacheValidity
        //};
        var newValue = new Microsoft.Maui.Controls.UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, newValue);
        return searchHandler;
    }

    public static T QueryIcon<T>(this T searchHandler, Func<Stream> imageStream)
        where T : ISearchHandler
    {
        //searchHandler.QueryIcon = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryIconProperty, Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
        return searchHandler;
    }

    public static T Query<T>(this T searchHandler, string query)
        where T : ISearchHandler
    {
        //searchHandler.Query = query;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryProperty, query);
        return searchHandler;
    }

    public static T Query<T>(this T searchHandler, Func<string> queryFunc)
        where T : ISearchHandler
    {
        //searchHandler.Query = new PropertyValue<string>(queryFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.QueryProperty, new PropertyValue<string>(queryFunc));
        return searchHandler;
    }

    public static T SearchBoxVisibility<T>(this T searchHandler, Microsoft.Maui.Controls.SearchBoxVisibility searchBoxVisibility)
        where T : ISearchHandler
    {
        //searchHandler.SearchBoxVisibility = searchBoxVisibility;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.SearchBoxVisibilityProperty, searchBoxVisibility);
        return searchHandler;
    }

    public static T SearchBoxVisibility<T>(this T searchHandler, Func<Microsoft.Maui.Controls.SearchBoxVisibility> searchBoxVisibilityFunc)
        where T : ISearchHandler
    {
        //searchHandler.SearchBoxVisibility = new PropertyValue<Microsoft.Maui.Controls.SearchBoxVisibility>(searchBoxVisibilityFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.SearchBoxVisibilityProperty, new PropertyValue<Microsoft.Maui.Controls.SearchBoxVisibility>(searchBoxVisibilityFunc));
        return searchHandler;
    }

    public static T ShowsResults<T>(this T searchHandler, bool showsResults)
        where T : ISearchHandler
    {
        //searchHandler.ShowsResults = showsResults;
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ShowsResultsProperty, showsResults);
        return searchHandler;
    }

    public static T ShowsResults<T>(this T searchHandler, Func<bool> showsResultsFunc)
        where T : ISearchHandler
    {
        //searchHandler.ShowsResults = new PropertyValue<bool>(showsResultsFunc);
        searchHandler.SetProperty(Microsoft.Maui.Controls.SearchHandler.ShowsResultsProperty, new PropertyValue<bool>(showsResultsFunc));
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Action? focusedAction)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new SyncEventCommand<EventArgs>(execute: focusedAction);
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Action<EventArgs>? focusedAction)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: focusedAction);
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Action<object?, EventArgs>? focusedAction)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: focusedAction);
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Func<Task>? focusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new AsyncEventCommand<EventArgs>(execute: focusedAction, runInBackground);
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Func<EventArgs, Task>? focusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: focusedAction, runInBackground);
        return searchHandler;
    }

    public static T OnFocused<T>(this T searchHandler, Func<object?, EventArgs, Task>? focusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.FocusedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: focusedAction, runInBackground);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Action? unfocusedAction)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new SyncEventCommand<EventArgs>(execute: unfocusedAction);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Action<EventArgs>? unfocusedAction)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: unfocusedAction);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Action<object?, EventArgs>? unfocusedAction)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: unfocusedAction);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Func<Task>? unfocusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new AsyncEventCommand<EventArgs>(execute: unfocusedAction, runInBackground);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Func<EventArgs, Task>? unfocusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: unfocusedAction, runInBackground);
        return searchHandler;
    }

    public static T OnUnfocused<T>(this T searchHandler, Func<object?, EventArgs, Task>? unfocusedAction, bool runInBackground = false)
        where T : ISearchHandler
    {
        searchHandler.UnfocusedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: unfocusedAction, runInBackground);
        return searchHandler;
    }
}

public static partial class SearchHandlerStyles
{
    public static Action<ISearchHandler>? Default { get; set; }
    public static Dictionary<string, Action<ISearchHandler>> Themes { get; } = [];
}