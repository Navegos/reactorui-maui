// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IContentPage : ITemplatedPage
{
    object? HideSoftInputOnTapped { get; set; }
}

public partial class ContentPage<T> : TemplatedPage<T>, IContentPage where T : Microsoft.Maui.Controls.ContentPage, new()
{
    public ContentPage()
    {
        ContentPageStyles.Default?.Invoke(this);
    }

    public ContentPage(Action<T?> componentRefAction) : base(componentRefAction)
    {
        ContentPageStyles.Default?.Invoke(this);
    }

    object? IContentPage.HideSoftInputOnTapped { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIContentPage = (IContentPage)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ContentPage.HideSoftInputOnTappedProperty, thisAsIContentPage.HideSoftInputOnTapped);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ContentPageStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public partial class ContentPage : ContentPage<Microsoft.Maui.Controls.ContentPage>
{
    public ContentPage()
    {
    }

    public ContentPage(Action<Microsoft.Maui.Controls.ContentPage?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class ContentPageExtensions
{
    public static T HideSoftInputOnTapped<T>(this T contentPage, bool hideSoftInputOnTapped)
        where T : IContentPage
    {
        contentPage.HideSoftInputOnTapped = hideSoftInputOnTapped;
        return contentPage;
    }

    public static T HideSoftInputOnTapped<T>(this T contentPage, Func<bool> hideSoftInputOnTappedFunc)
        where T : IContentPage
    {
        contentPage.HideSoftInputOnTapped = new PropertyValue<bool>(hideSoftInputOnTappedFunc);
        return contentPage;
    }
}

public static partial class ContentPageStyles
{
    public static Action<IContentPage>? Default { get; set; }
    public static Dictionary<string, Action<IContentPage>> Themes { get; } = [];
}