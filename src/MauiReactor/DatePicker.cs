// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IDatePicker : IView
{
    object? Format { get; set; }

    object? Date { get; set; }

    object? MinimumDate { get; set; }

    object? MaximumDate { get; set; }

    object? TextColor { get; set; }

    object? CharacterSpacing { get; set; }

    object? FontFamily { get; set; }

    object? FontSize { get; set; }

    object? FontAttributes { get; set; }

    object? FontAutoScalingEnabled { get; set; }

    Action? DateSelectedAction { get; set; }

    Action<object?, DateChangedEventArgs>? DateSelectedActionWithArgs { get; set; }
}

public partial class DatePicker<T> : View<T>, IDatePicker where T : Microsoft.Maui.Controls.DatePicker, new()
{
    public DatePicker()
    {
    }

    public DatePicker(Action<T?> componentRefAction) : base(componentRefAction)
    {
    }

    object? IDatePicker.Format { get; set; }

    object? IDatePicker.Date { get; set; }

    object? IDatePicker.MinimumDate { get; set; }

    object? IDatePicker.MaximumDate { get; set; }

    object? IDatePicker.TextColor { get; set; }

    object? IDatePicker.CharacterSpacing { get; set; }

    object? IDatePicker.FontFamily { get; set; }

    object? IDatePicker.FontSize { get; set; }

    object? IDatePicker.FontAttributes { get; set; }

    object? IDatePicker.FontAutoScalingEnabled { get; set; }

    Action? IDatePicker.DateSelectedAction { get; set; }

    Action<object?, DateChangedEventArgs>? IDatePicker.DateSelectedActionWithArgs { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIDatePicker = (IDatePicker)this;
        thisAsIDatePicker.Format = null;
        thisAsIDatePicker.Date = null;
        thisAsIDatePicker.MinimumDate = null;
        thisAsIDatePicker.MaximumDate = null;
        thisAsIDatePicker.TextColor = null;
        thisAsIDatePicker.CharacterSpacing = null;
        thisAsIDatePicker.FontFamily = null;
        thisAsIDatePicker.FontSize = null;
        thisAsIDatePicker.FontAttributes = null;
        thisAsIDatePicker.FontAutoScalingEnabled = null;
        thisAsIDatePicker.DateSelectedAction = null;
        thisAsIDatePicker.DateSelectedActionWithArgs = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIDatePicker = (IDatePicker)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.FormatProperty, thisAsIDatePicker.Format);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.DateProperty, thisAsIDatePicker.Date);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, thisAsIDatePicker.MinimumDate);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, thisAsIDatePicker.MaximumDate);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.TextColorProperty, thisAsIDatePicker.TextColor);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, thisAsIDatePicker.CharacterSpacing);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, thisAsIDatePicker.FontFamily);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.FontSizeProperty, thisAsIDatePicker.FontSize);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, thisAsIDatePicker.FontAttributes);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, thisAsIDatePicker.FontAutoScalingEnabled);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIDatePicker = (IDatePicker)this;
        AnimateProperty(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, thisAsIDatePicker.CharacterSpacing);
        AnimateProperty(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, thisAsIDatePicker.FontSize);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIDatePicker = (IDatePicker)this;
        if (thisAsIDatePicker.DateSelectedAction != null || thisAsIDatePicker.DateSelectedActionWithArgs != null)
        {
            NativeControl.DateSelected += NativeControl_DateSelected;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_DateSelected(object? sender, DateChangedEventArgs e)
    {
        var thisAsIDatePicker = (IDatePicker)this;
        thisAsIDatePicker.DateSelectedAction?.Invoke();
        thisAsIDatePicker.DateSelectedActionWithArgs?.Invoke(sender, e);
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.DateSelected -= NativeControl_DateSelected;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }
}

public partial class DatePicker : DatePicker<Microsoft.Maui.Controls.DatePicker>
{
    public DatePicker()
    {
    }

    public DatePicker(Action<Microsoft.Maui.Controls.DatePicker?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class DatePickerExtensions
{
    static void SetCharacterSpacing(object datePicker, RxAnimation animation) => ((IDatePicker)datePicker).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetFontSize(object datePicker, RxAnimation animation) => ((IDatePicker)datePicker).FontSize = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Format<T>(this T datePicker, string format)
        where T : IDatePicker
    {
        datePicker.Format = format;
        return datePicker;
    }

    public static T Format<T>(this T datePicker, Func<string> formatFunc)
        where T : IDatePicker
    {
        datePicker.Format = new PropertyValue<string>(formatFunc);
        return datePicker;
    }

    public static T Date<T>(this T datePicker, System.DateTime date)
        where T : IDatePicker
    {
        datePicker.Date = date;
        return datePicker;
    }

    public static T Date<T>(this T datePicker, Func<System.DateTime> dateFunc)
        where T : IDatePicker
    {
        datePicker.Date = new PropertyValue<System.DateTime>(dateFunc);
        return datePicker;
    }

    public static T MinimumDate<T>(this T datePicker, System.DateTime minimumDate)
        where T : IDatePicker
    {
        datePicker.MinimumDate = minimumDate;
        return datePicker;
    }

    public static T MinimumDate<T>(this T datePicker, Func<System.DateTime> minimumDateFunc)
        where T : IDatePicker
    {
        datePicker.MinimumDate = new PropertyValue<System.DateTime>(minimumDateFunc);
        return datePicker;
    }

    public static T MaximumDate<T>(this T datePicker, System.DateTime maximumDate)
        where T : IDatePicker
    {
        datePicker.MaximumDate = maximumDate;
        return datePicker;
    }

    public static T MaximumDate<T>(this T datePicker, Func<System.DateTime> maximumDateFunc)
        where T : IDatePicker
    {
        datePicker.MaximumDate = new PropertyValue<System.DateTime>(maximumDateFunc);
        return datePicker;
    }

    public static T TextColor<T>(this T datePicker, Microsoft.Maui.Graphics.Color textColor)
        where T : IDatePicker
    {
        datePicker.TextColor = textColor;
        return datePicker;
    }

    public static T TextColor<T>(this T datePicker, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : IDatePicker
    {
        datePicker.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        return datePicker;
    }

    public static T CharacterSpacing<T>(this T datePicker, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IDatePicker
    {
        datePicker.CharacterSpacing = characterSpacing;
        datePicker.AppendAnimatable(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing), SetCharacterSpacing);
        return datePicker;
    }

    public static T CharacterSpacing<T>(this T datePicker, Func<double> characterSpacingFunc)
        where T : IDatePicker
    {
        datePicker.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        return datePicker;
    }

    public static T FontFamily<T>(this T datePicker, string fontFamily)
        where T : IDatePicker
    {
        datePicker.FontFamily = fontFamily;
        return datePicker;
    }

    public static T FontFamily<T>(this T datePicker, Func<string> fontFamilyFunc)
        where T : IDatePicker
    {
        datePicker.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        return datePicker;
    }

    public static T FontSize<T>(this T datePicker, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IDatePicker
    {
        datePicker.FontSize = fontSize;
        datePicker.AppendAnimatable(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize), SetFontSize);
        return datePicker;
    }

    public static T FontSize<T>(this T datePicker, Func<double> fontSizeFunc)
        where T : IDatePicker
    {
        datePicker.FontSize = new PropertyValue<double>(fontSizeFunc);
        return datePicker;
    }

    public static T FontAttributes<T>(this T datePicker, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IDatePicker
    {
        datePicker.FontAttributes = fontAttributes;
        return datePicker;
    }

    public static T FontAttributes<T>(this T datePicker, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : IDatePicker
    {
        datePicker.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        return datePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T datePicker, bool fontAutoScalingEnabled)
        where T : IDatePicker
    {
        datePicker.FontAutoScalingEnabled = fontAutoScalingEnabled;
        return datePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T datePicker, Func<bool> fontAutoScalingEnabledFunc)
        where T : IDatePicker
    {
        datePicker.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Action? dateSelectedAction)
        where T : IDatePicker
    {
        datePicker.DateSelectedAction = dateSelectedAction;
        return datePicker;
    }

    public static T OnDateSelected<T>(this T datePicker, Action<object?, DateChangedEventArgs>? dateSelectedActionWithArgs)
        where T : IDatePicker
    {
        datePicker.DateSelectedActionWithArgs = dateSelectedActionWithArgs;
        return datePicker;
    }
}