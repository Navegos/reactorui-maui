// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IBaseMenuItem : IElement
{
}

public abstract partial class BaseMenuItem<T> : Element<T>, IBaseMenuItem where T : Microsoft.Maui.Controls.BaseMenuItem, new()
{
    protected BaseMenuItem()
    {
        BaseMenuItemStyles.Default?.Invoke(this);
    }

    protected BaseMenuItem(Action<T?> componentRefAction) : base(componentRefAction)
    {
        BaseMenuItemStyles.Default?.Invoke(this);
    }

    internal override void Reset()
    {
        base.Reset();
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && BaseMenuItemStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public static partial class BaseMenuItemExtensions
{
}

public static partial class BaseMenuItemStyles
{
    public static Action<IBaseMenuItem>? Default { get; set; }
    public static Dictionary<string, Action<IBaseMenuItem>> Themes { get; } = [];
}