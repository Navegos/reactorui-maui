// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IButton : IView
{
    object? ContentLayout { get; set; }

    object? Text { get; set; }

    object? TextColor { get; set; }

    object? CharacterSpacing { get; set; }

    object? FontFamily { get; set; }

    object? FontSize { get; set; }

    object? TextTransform { get; set; }

    object? FontAttributes { get; set; }

    object? FontAutoScalingEnabled { get; set; }

    object? BorderWidth { get; set; }

    object? BorderColor { get; set; }

    object? CornerRadius { get; set; }

    object? ImageSource { get; set; }

    object? Padding { get; set; }

    object? LineBreakMode { get; set; }

    Action? ClickedAction { get; set; }

    Action<object?, EventArgs>? ClickedActionWithArgs { get; set; }

    Action? PressedAction { get; set; }

    Action<object?, EventArgs>? PressedActionWithArgs { get; set; }

    Action? ReleasedAction { get; set; }

    Action<object?, EventArgs>? ReleasedActionWithArgs { get; set; }
}

public partial class Button<T> : View<T>, IButton where T : Microsoft.Maui.Controls.Button, new()
{
    public Button()
    {
        ButtonStyles.Default?.Invoke(this);
    }

    public Button(Action<T?> componentRefAction) : base(componentRefAction)
    {
        ButtonStyles.Default?.Invoke(this);
    }

    object? IButton.ContentLayout { get; set; }

    object? IButton.Text { get; set; }

    object? IButton.TextColor { get; set; }

    object? IButton.CharacterSpacing { get; set; }

    object? IButton.FontFamily { get; set; }

    object? IButton.FontSize { get; set; }

    object? IButton.TextTransform { get; set; }

    object? IButton.FontAttributes { get; set; }

    object? IButton.FontAutoScalingEnabled { get; set; }

    object? IButton.BorderWidth { get; set; }

    object? IButton.BorderColor { get; set; }

    object? IButton.CornerRadius { get; set; }

    object? IButton.ImageSource { get; set; }

    object? IButton.Padding { get; set; }

    object? IButton.LineBreakMode { get; set; }

    Action? IButton.ClickedAction { get; set; }

    Action<object?, EventArgs>? IButton.ClickedActionWithArgs { get; set; }

    Action? IButton.PressedAction { get; set; }

    Action<object?, EventArgs>? IButton.PressedActionWithArgs { get; set; }

    Action? IButton.ReleasedAction { get; set; }

    Action<object?, EventArgs>? IButton.ReleasedActionWithArgs { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIButton = (IButton)this;
        thisAsIButton.ContentLayout = null;
        thisAsIButton.Text = null;
        thisAsIButton.TextColor = null;
        thisAsIButton.CharacterSpacing = null;
        thisAsIButton.FontFamily = null;
        thisAsIButton.FontSize = null;
        thisAsIButton.TextTransform = null;
        thisAsIButton.FontAttributes = null;
        thisAsIButton.FontAutoScalingEnabled = null;
        thisAsIButton.BorderWidth = null;
        thisAsIButton.BorderColor = null;
        thisAsIButton.CornerRadius = null;
        thisAsIButton.ImageSource = null;
        thisAsIButton.Padding = null;
        thisAsIButton.LineBreakMode = null;
        thisAsIButton.ClickedAction = null;
        thisAsIButton.ClickedActionWithArgs = null;
        thisAsIButton.PressedAction = null;
        thisAsIButton.PressedActionWithArgs = null;
        thisAsIButton.ReleasedAction = null;
        thisAsIButton.ReleasedActionWithArgs = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIButton = (IButton)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.ContentLayoutProperty, thisAsIButton.ContentLayout);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.TextProperty, thisAsIButton.Text);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.TextColorProperty, thisAsIButton.TextColor);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.CharacterSpacingProperty, thisAsIButton.CharacterSpacing);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.FontFamilyProperty, thisAsIButton.FontFamily);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.FontSizeProperty, thisAsIButton.FontSize);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.TextTransformProperty, thisAsIButton.TextTransform);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.FontAttributesProperty, thisAsIButton.FontAttributes);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.FontAutoScalingEnabledProperty, thisAsIButton.FontAutoScalingEnabled);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.BorderWidthProperty, thisAsIButton.BorderWidth);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.BorderColorProperty, thisAsIButton.BorderColor);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.CornerRadiusProperty, thisAsIButton.CornerRadius);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.ImageSourceProperty, thisAsIButton.ImageSource);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.PaddingProperty, thisAsIButton.Padding);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Button.LineBreakModeProperty, thisAsIButton.LineBreakMode);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIButton = (IButton)this;
        AnimateProperty(Microsoft.Maui.Controls.Button.CharacterSpacingProperty, thisAsIButton.CharacterSpacing);
        AnimateProperty(Microsoft.Maui.Controls.Button.FontSizeProperty, thisAsIButton.FontSize);
        AnimateProperty(Microsoft.Maui.Controls.Button.BorderWidthProperty, thisAsIButton.BorderWidth);
        AnimateProperty(Microsoft.Maui.Controls.Button.PaddingProperty, thisAsIButton.Padding);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ButtonStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIButton = (IButton)this;
        if (thisAsIButton.ClickedAction != null || thisAsIButton.ClickedActionWithArgs != null)
        {
            NativeControl.Clicked += NativeControl_Clicked;
        }

        if (thisAsIButton.PressedAction != null || thisAsIButton.PressedActionWithArgs != null)
        {
            NativeControl.Pressed += NativeControl_Pressed;
        }

        if (thisAsIButton.ReleasedAction != null || thisAsIButton.ReleasedActionWithArgs != null)
        {
            NativeControl.Released += NativeControl_Released;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Clicked(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        thisAsIButton.ClickedAction?.Invoke();
        thisAsIButton.ClickedActionWithArgs?.Invoke(sender, e);
    }

    private void NativeControl_Pressed(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        thisAsIButton.PressedAction?.Invoke();
        thisAsIButton.PressedActionWithArgs?.Invoke(sender, e);
    }

    private void NativeControl_Released(object? sender, EventArgs e)
    {
        var thisAsIButton = (IButton)this;
        thisAsIButton.ReleasedAction?.Invoke();
        thisAsIButton.ReleasedActionWithArgs?.Invoke(sender, e);
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Clicked -= NativeControl_Clicked;
            NativeControl.Pressed -= NativeControl_Pressed;
            NativeControl.Released -= NativeControl_Released;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }
}

public partial class Button : Button<Microsoft.Maui.Controls.Button>
{
    public Button()
    {
    }

    public Button(Action<Microsoft.Maui.Controls.Button?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class ButtonExtensions
{
    static void SetCharacterSpacing(object button, RxAnimation animation) => ((IButton)button).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetFontSize(object button, RxAnimation animation) => ((IButton)button).FontSize = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetBorderWidth(object button, RxAnimation animation) => ((IButton)button).BorderWidth = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetPadding(object button, RxAnimation animation) => ((IButton)button).Padding = ((RxThicknessAnimation)animation).CurrentValue();
    public static T ContentLayout<T>(this T button, Microsoft.Maui.Controls.Button.ButtonContentLayout contentLayout)
        where T : IButton
    {
        button.ContentLayout = contentLayout;
        return button;
    }

    public static T ContentLayout<T>(this T button, Func<Microsoft.Maui.Controls.Button.ButtonContentLayout> contentLayoutFunc)
        where T : IButton
    {
        button.ContentLayout = new PropertyValue<Microsoft.Maui.Controls.Button.ButtonContentLayout>(contentLayoutFunc);
        return button;
    }

    public static T Text<T>(this T button, string text)
        where T : IButton
    {
        button.Text = text;
        return button;
    }

    public static T Text<T>(this T button, Func<string> textFunc)
        where T : IButton
    {
        button.Text = new PropertyValue<string>(textFunc);
        return button;
    }

    public static T TextColor<T>(this T button, Microsoft.Maui.Graphics.Color textColor)
        where T : IButton
    {
        button.TextColor = textColor;
        return button;
    }

    public static T TextColor<T>(this T button, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : IButton
    {
        button.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        return button;
    }

    public static T CharacterSpacing<T>(this T button, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        button.CharacterSpacing = characterSpacing;
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing), SetCharacterSpacing);
        return button;
    }

    public static T CharacterSpacing<T>(this T button, Func<double> characterSpacingFunc)
        where T : IButton
    {
        button.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        return button;
    }

    public static T FontFamily<T>(this T button, string fontFamily)
        where T : IButton
    {
        button.FontFamily = fontFamily;
        return button;
    }

    public static T FontFamily<T>(this T button, Func<string> fontFamilyFunc)
        where T : IButton
    {
        button.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        return button;
    }

    public static T FontSize<T>(this T button, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        button.FontSize = fontSize;
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize), SetFontSize);
        return button;
    }

    public static T FontSize<T>(this T button, Func<double> fontSizeFunc)
        where T : IButton
    {
        button.FontSize = new PropertyValue<double>(fontSizeFunc);
        return button;
    }

    public static T TextTransform<T>(this T button, Microsoft.Maui.TextTransform textTransform)
        where T : IButton
    {
        button.TextTransform = textTransform;
        return button;
    }

    public static T TextTransform<T>(this T button, Func<Microsoft.Maui.TextTransform> textTransformFunc)
        where T : IButton
    {
        button.TextTransform = new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc);
        return button;
    }

    public static T FontAttributes<T>(this T button, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IButton
    {
        button.FontAttributes = fontAttributes;
        return button;
    }

    public static T FontAttributes<T>(this T button, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : IButton
    {
        button.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        return button;
    }

    public static T FontAutoScalingEnabled<T>(this T button, bool fontAutoScalingEnabled)
        where T : IButton
    {
        button.FontAutoScalingEnabled = fontAutoScalingEnabled;
        return button;
    }

    public static T FontAutoScalingEnabled<T>(this T button, Func<bool> fontAutoScalingEnabledFunc)
        where T : IButton
    {
        button.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        return button;
    }

    public static T BorderWidth<T>(this T button, double borderWidth, RxDoubleAnimation? customAnimation = null)
        where T : IButton
    {
        button.BorderWidth = borderWidth;
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.BorderWidthProperty, customAnimation ?? new RxDoubleAnimation(borderWidth), SetBorderWidth);
        return button;
    }

    public static T BorderWidth<T>(this T button, Func<double> borderWidthFunc)
        where T : IButton
    {
        button.BorderWidth = new PropertyValue<double>(borderWidthFunc);
        return button;
    }

    public static T BorderColor<T>(this T button, Microsoft.Maui.Graphics.Color borderColor)
        where T : IButton
    {
        button.BorderColor = borderColor;
        return button;
    }

    public static T BorderColor<T>(this T button, Func<Microsoft.Maui.Graphics.Color> borderColorFunc)
        where T : IButton
    {
        button.BorderColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(borderColorFunc);
        return button;
    }

    public static T CornerRadius<T>(this T button, int cornerRadius)
        where T : IButton
    {
        button.CornerRadius = cornerRadius;
        return button;
    }

    public static T CornerRadius<T>(this T button, Func<int> cornerRadiusFunc)
        where T : IButton
    {
        button.CornerRadius = new PropertyValue<int>(cornerRadiusFunc);
        return button;
    }

    public static T ImageSource<T>(this T button, Microsoft.Maui.Controls.ImageSource imageSource)
        where T : IButton
    {
        button.ImageSource = imageSource;
        return button;
    }

    public static T ImageSource<T>(this T button, Func<Microsoft.Maui.Controls.ImageSource> imageSourceFunc)
        where T : IButton
    {
        button.ImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(imageSourceFunc);
        return button;
    }

    public static T ImageSource<T>(this T button, string file)
        where T : IButton
    {
        button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        return button;
    }

    public static T ImageSource<T>(this T button, Func<string> action)
        where T : IButton
    {
        button.ImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action()));
        return button;
    }

    public static T ImageSource<T>(this T button, string resourceName, Assembly sourceAssembly)
        where T : IButton
    {
        button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        return button;
    }

    public static T ImageSource<T>(this T button, Uri imageUri)
        where T : IButton
    {
        button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        return button;
    }

    public static T ImageSource<T>(this T button, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IButton
    {
        button.ImageSource = new UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        return button;
    }

    public static T ImageSource<T>(this T button, Func<Stream> imageStream)
        where T : IButton
    {
        button.ImageSource = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        return button;
    }

    public static T Padding<T>(this T button, Microsoft.Maui.Thickness padding, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        button.Padding = padding;
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(padding), SetPadding);
        return button;
    }

    public static T Padding<T>(this T button, Func<Microsoft.Maui.Thickness> paddingFunc)
        where T : IButton
    {
        button.Padding = new PropertyValue<Microsoft.Maui.Thickness>(paddingFunc);
        return button;
    }

    public static T Padding<T>(this T button, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        button.Padding = new Thickness(leftRight, topBottom);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(leftRight, topBottom)), SetPadding);
        return button;
    }

    public static T Padding<T>(this T button, double uniformSize, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        button.Padding = new Thickness(uniformSize);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(uniformSize)), SetPadding);
        return button;
    }

    public static T Padding<T>(this T button, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null)
        where T : IButton
    {
        button.Padding = new Thickness(left, top, right, bottom);
        button.AppendAnimatable(Microsoft.Maui.Controls.Button.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(left, top, right, bottom)), SetPadding);
        return button;
    }

    public static T LineBreakMode<T>(this T button, Microsoft.Maui.LineBreakMode lineBreakMode)
        where T : IButton
    {
        button.LineBreakMode = lineBreakMode;
        return button;
    }

    public static T LineBreakMode<T>(this T button, Func<Microsoft.Maui.LineBreakMode> lineBreakModeFunc)
        where T : IButton
    {
        button.LineBreakMode = new PropertyValue<Microsoft.Maui.LineBreakMode>(lineBreakModeFunc);
        return button;
    }

    public static T OnClicked<T>(this T button, Action? clickedAction)
        where T : IButton
    {
        button.ClickedAction = clickedAction;
        return button;
    }

    public static T OnClicked<T>(this T button, Action<object?, EventArgs>? clickedActionWithArgs)
        where T : IButton
    {
        button.ClickedActionWithArgs = clickedActionWithArgs;
        return button;
    }

    public static T OnPressed<T>(this T button, Action? pressedAction)
        where T : IButton
    {
        button.PressedAction = pressedAction;
        return button;
    }

    public static T OnPressed<T>(this T button, Action<object?, EventArgs>? pressedActionWithArgs)
        where T : IButton
    {
        button.PressedActionWithArgs = pressedActionWithArgs;
        return button;
    }

    public static T OnReleased<T>(this T button, Action? releasedAction)
        where T : IButton
    {
        button.ReleasedAction = releasedAction;
        return button;
    }

    public static T OnReleased<T>(this T button, Action<object?, EventArgs>? releasedActionWithArgs)
        where T : IButton
    {
        button.ReleasedActionWithArgs = releasedActionWithArgs;
        return button;
    }
}

public static partial class ButtonStyles
{
    public static Action<IButton>? Default { get; set; }
    public static Dictionary<string, Action<IButton>> Themes { get; } = [];
}