// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IEntry : IInputView
{
    object? ReturnType { get; set; }

    object? IsPassword { get; set; }

    object? HorizontalTextAlignment { get; set; }

    object? VerticalTextAlignment { get; set; }

    object? ClearButtonVisibility { get; set; }

    Action? CompletedAction { get; set; }

    Action<object?, EventArgs>? CompletedActionWithArgs { get; set; }
}

public partial class Entry<T> : InputView<T>, IEntry where T : Microsoft.Maui.Controls.Entry, new()
{
    public Entry()
    {
        EntryStyles.Default?.Invoke(this);
    }

    public Entry(Action<T?> componentRefAction) : base(componentRefAction)
    {
        EntryStyles.Default?.Invoke(this);
    }

    object? IEntry.ReturnType { get; set; }

    object? IEntry.IsPassword { get; set; }

    object? IEntry.HorizontalTextAlignment { get; set; }

    object? IEntry.VerticalTextAlignment { get; set; }

    object? IEntry.ClearButtonVisibility { get; set; }

    Action? IEntry.CompletedAction { get; set; }

    Action<object?, EventArgs>? IEntry.CompletedActionWithArgs { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIEntry = (IEntry)this;
        thisAsIEntry.ReturnType = null;
        thisAsIEntry.IsPassword = null;
        thisAsIEntry.HorizontalTextAlignment = null;
        thisAsIEntry.VerticalTextAlignment = null;
        thisAsIEntry.ClearButtonVisibility = null;
        thisAsIEntry.CompletedAction = null;
        thisAsIEntry.CompletedActionWithArgs = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIEntry = (IEntry)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Entry.ReturnTypeProperty, thisAsIEntry.ReturnType);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Entry.IsPasswordProperty, thisAsIEntry.IsPassword);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Entry.HorizontalTextAlignmentProperty, thisAsIEntry.HorizontalTextAlignment);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Entry.VerticalTextAlignmentProperty, thisAsIEntry.VerticalTextAlignment);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Entry.ClearButtonVisibilityProperty, thisAsIEntry.ClearButtonVisibility);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (Theme != null && EntryStyles.Themes.TryGetValue(Theme, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIEntry = (IEntry)this;
        if (thisAsIEntry.CompletedAction != null || thisAsIEntry.CompletedActionWithArgs != null)
        {
            NativeControl.Completed += NativeControl_Completed;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_Completed(object? sender, EventArgs e)
    {
        var thisAsIEntry = (IEntry)this;
        thisAsIEntry.CompletedAction?.Invoke();
        thisAsIEntry.CompletedActionWithArgs?.Invoke(sender, e);
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.Completed -= NativeControl_Completed;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }
}

public partial class Entry : Entry<Microsoft.Maui.Controls.Entry>
{
    public Entry()
    {
    }

    public Entry(Action<Microsoft.Maui.Controls.Entry?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class EntryExtensions
{
    public static T ReturnType<T>(this T entry, Microsoft.Maui.ReturnType returnType)
        where T : IEntry
    {
        entry.ReturnType = returnType;
        return entry;
    }

    public static T ReturnType<T>(this T entry, Func<Microsoft.Maui.ReturnType> returnTypeFunc)
        where T : IEntry
    {
        entry.ReturnType = new PropertyValue<Microsoft.Maui.ReturnType>(returnTypeFunc);
        return entry;
    }

    public static T IsPassword<T>(this T entry, bool isPassword)
        where T : IEntry
    {
        entry.IsPassword = isPassword;
        return entry;
    }

    public static T IsPassword<T>(this T entry, Func<bool> isPasswordFunc)
        where T : IEntry
    {
        entry.IsPassword = new PropertyValue<bool>(isPasswordFunc);
        return entry;
    }

    public static T HorizontalTextAlignment<T>(this T entry, Microsoft.Maui.TextAlignment horizontalTextAlignment)
        where T : IEntry
    {
        entry.HorizontalTextAlignment = horizontalTextAlignment;
        return entry;
    }

    public static T HorizontalTextAlignment<T>(this T entry, Func<Microsoft.Maui.TextAlignment> horizontalTextAlignmentFunc)
        where T : IEntry
    {
        entry.HorizontalTextAlignment = new PropertyValue<Microsoft.Maui.TextAlignment>(horizontalTextAlignmentFunc);
        return entry;
    }

    public static T VerticalTextAlignment<T>(this T entry, Microsoft.Maui.TextAlignment verticalTextAlignment)
        where T : IEntry
    {
        entry.VerticalTextAlignment = verticalTextAlignment;
        return entry;
    }

    public static T VerticalTextAlignment<T>(this T entry, Func<Microsoft.Maui.TextAlignment> verticalTextAlignmentFunc)
        where T : IEntry
    {
        entry.VerticalTextAlignment = new PropertyValue<Microsoft.Maui.TextAlignment>(verticalTextAlignmentFunc);
        return entry;
    }

    public static T ClearButtonVisibility<T>(this T entry, Microsoft.Maui.ClearButtonVisibility clearButtonVisibility)
        where T : IEntry
    {
        entry.ClearButtonVisibility = clearButtonVisibility;
        return entry;
    }

    public static T ClearButtonVisibility<T>(this T entry, Func<Microsoft.Maui.ClearButtonVisibility> clearButtonVisibilityFunc)
        where T : IEntry
    {
        entry.ClearButtonVisibility = new PropertyValue<Microsoft.Maui.ClearButtonVisibility>(clearButtonVisibilityFunc);
        return entry;
    }

    public static T OnCompleted<T>(this T entry, Action? completedAction)
        where T : IEntry
    {
        entry.CompletedAction = completedAction;
        return entry;
    }

    public static T OnCompleted<T>(this T entry, Action<object?, EventArgs>? completedActionWithArgs)
        where T : IEntry
    {
        entry.CompletedActionWithArgs = completedActionWithArgs;
        return entry;
    }
}

public static partial class EntryStyles
{
    public static Action<IEntry>? Default { get; set; }
    public static Dictionary<string, Action<IEntry>> Themes { get; } = [];
}