// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IFlexLayout : ILayout
{
    object? Direction { get; set; }

    object? JustifyContent { get; set; }

    object? AlignContent { get; set; }

    object? AlignItems { get; set; }

    object? Position { get; set; }

    object? Wrap { get; set; }
}

public partial class FlexLayout<T> : Layout<T>, IFlexLayout where T : Microsoft.Maui.Controls.FlexLayout, new()
{
    public FlexLayout()
    {
        FlexLayoutStyles.Default?.Invoke(this);
    }

    public FlexLayout(Action<T?> componentRefAction) : base(componentRefAction)
    {
        FlexLayoutStyles.Default?.Invoke(this);
    }

    object? IFlexLayout.Direction { get; set; }

    object? IFlexLayout.JustifyContent { get; set; }

    object? IFlexLayout.AlignContent { get; set; }

    object? IFlexLayout.AlignItems { get; set; }

    object? IFlexLayout.Position { get; set; }

    object? IFlexLayout.Wrap { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIFlexLayout = (IFlexLayout)this;
        thisAsIFlexLayout.Direction = null;
        thisAsIFlexLayout.JustifyContent = null;
        thisAsIFlexLayout.AlignContent = null;
        thisAsIFlexLayout.AlignItems = null;
        thisAsIFlexLayout.Position = null;
        thisAsIFlexLayout.Wrap = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIFlexLayout = (IFlexLayout)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.DirectionProperty, thisAsIFlexLayout.Direction);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.JustifyContentProperty, thisAsIFlexLayout.JustifyContent);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.AlignContentProperty, thisAsIFlexLayout.AlignContent);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.AlignItemsProperty, thisAsIFlexLayout.AlignItems);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.PositionProperty, thisAsIFlexLayout.Position);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.FlexLayout.WrapProperty, thisAsIFlexLayout.Wrap);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && FlexLayoutStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public partial class FlexLayout : FlexLayout<Microsoft.Maui.Controls.FlexLayout>
{
    public FlexLayout()
    {
    }

    public FlexLayout(Action<Microsoft.Maui.Controls.FlexLayout?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class FlexLayoutExtensions
{
    public static T Direction<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexDirection direction)
        where T : IFlexLayout
    {
        flexLayout.Direction = direction;
        return flexLayout;
    }

    public static T Direction<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexDirection> directionFunc)
        where T : IFlexLayout
    {
        flexLayout.Direction = new PropertyValue<Microsoft.Maui.Layouts.FlexDirection>(directionFunc);
        return flexLayout;
    }

    public static T JustifyContent<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexJustify justifyContent)
        where T : IFlexLayout
    {
        flexLayout.JustifyContent = justifyContent;
        return flexLayout;
    }

    public static T JustifyContent<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexJustify> justifyContentFunc)
        where T : IFlexLayout
    {
        flexLayout.JustifyContent = new PropertyValue<Microsoft.Maui.Layouts.FlexJustify>(justifyContentFunc);
        return flexLayout;
    }

    public static T AlignContent<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexAlignContent alignContent)
        where T : IFlexLayout
    {
        flexLayout.AlignContent = alignContent;
        return flexLayout;
    }

    public static T AlignContent<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexAlignContent> alignContentFunc)
        where T : IFlexLayout
    {
        flexLayout.AlignContent = new PropertyValue<Microsoft.Maui.Layouts.FlexAlignContent>(alignContentFunc);
        return flexLayout;
    }

    public static T AlignItems<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexAlignItems alignItems)
        where T : IFlexLayout
    {
        flexLayout.AlignItems = alignItems;
        return flexLayout;
    }

    public static T AlignItems<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexAlignItems> alignItemsFunc)
        where T : IFlexLayout
    {
        flexLayout.AlignItems = new PropertyValue<Microsoft.Maui.Layouts.FlexAlignItems>(alignItemsFunc);
        return flexLayout;
    }

    public static T Position<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexPosition position)
        where T : IFlexLayout
    {
        flexLayout.Position = position;
        return flexLayout;
    }

    public static T Position<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexPosition> positionFunc)
        where T : IFlexLayout
    {
        flexLayout.Position = new PropertyValue<Microsoft.Maui.Layouts.FlexPosition>(positionFunc);
        return flexLayout;
    }

    public static T Wrap<T>(this T flexLayout, Microsoft.Maui.Layouts.FlexWrap wrap)
        where T : IFlexLayout
    {
        flexLayout.Wrap = wrap;
        return flexLayout;
    }

    public static T Wrap<T>(this T flexLayout, Func<Microsoft.Maui.Layouts.FlexWrap> wrapFunc)
        where T : IFlexLayout
    {
        flexLayout.Wrap = new PropertyValue<Microsoft.Maui.Layouts.FlexWrap>(wrapFunc);
        return flexLayout;
    }
}

public static partial class FlexLayoutStyles
{
    public static Action<IFlexLayout>? Default { get; set; }
    public static Dictionary<string, Action<IFlexLayout>> Themes { get; } = [];
}