// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IStackBase : ILayout
{
    object? Spacing { get; set; }
}

public abstract partial class StackBase<T> : Layout<T>, IStackBase where T : Microsoft.Maui.Controls.StackBase, new()
{
    protected StackBase()
    {
        StackBaseStyles.Default?.Invoke(this);
    }

    protected StackBase(Action<T?> componentRefAction) : base(componentRefAction)
    {
        StackBaseStyles.Default?.Invoke(this);
    }

    object? IStackBase.Spacing { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIStackBase = (IStackBase)this;
        thisAsIStackBase.Spacing = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIStackBase = (IStackBase)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.StackBase.SpacingProperty, thisAsIStackBase.Spacing);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIStackBase = (IStackBase)this;
        AnimateProperty(Microsoft.Maui.Controls.StackBase.SpacingProperty, thisAsIStackBase.Spacing);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && StackBaseStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public static partial class StackBaseExtensions
{
    static void SetSpacing(object stackBase, RxAnimation animation) => ((IStackBase)stackBase).Spacing = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Spacing<T>(this T stackBase, double spacing, RxDoubleAnimation? customAnimation = null)
        where T : IStackBase
    {
        stackBase.Spacing = spacing;
        stackBase.AppendAnimatable(Microsoft.Maui.Controls.StackBase.SpacingProperty, customAnimation ?? new RxDoubleAnimation(spacing), SetSpacing);
        return stackBase;
    }

    public static T Spacing<T>(this T stackBase, Func<double> spacingFunc)
        where T : IStackBase
    {
        stackBase.Spacing = new PropertyValue<double>(spacingFunc);
        return stackBase;
    }
}

public static partial class StackBaseStyles
{
    public static Action<IStackBase>? Default { get; set; }
    public static Dictionary<string, Action<IStackBase>> Themes { get; } = [];
}