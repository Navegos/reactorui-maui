// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IActivityIndicator : IView
{
    object? IsRunning { get; set; }

    object? Color { get; set; }
}

public partial class ActivityIndicator<T> : View<T>, IActivityIndicator where T : Microsoft.Maui.Controls.ActivityIndicator, new()
{
    public ActivityIndicator()
    {
        ActivityIndicatorStyles.Default?.Invoke(this);
    }

    public ActivityIndicator(Action<T?> componentRefAction) : base(componentRefAction)
    {
        ActivityIndicatorStyles.Default?.Invoke(this);
    }

    object? IActivityIndicator.IsRunning { get; set; }

    object? IActivityIndicator.Color { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIActivityIndicator = (IActivityIndicator)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ActivityIndicator.IsRunningProperty, thisAsIActivityIndicator.IsRunning);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ActivityIndicator.ColorProperty, thisAsIActivityIndicator.Color);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ActivityIndicatorStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public partial class ActivityIndicator : ActivityIndicator<Microsoft.Maui.Controls.ActivityIndicator>
{
    public ActivityIndicator()
    {
    }

    public ActivityIndicator(Action<Microsoft.Maui.Controls.ActivityIndicator?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class ActivityIndicatorExtensions
{
    public static T IsRunning<T>(this T activityIndicator, bool isRunning)
        where T : IActivityIndicator
    {
        activityIndicator.IsRunning = isRunning;
        return activityIndicator;
    }

    public static T IsRunning<T>(this T activityIndicator, Func<bool> isRunningFunc)
        where T : IActivityIndicator
    {
        activityIndicator.IsRunning = new PropertyValue<bool>(isRunningFunc);
        return activityIndicator;
    }

    public static T Color<T>(this T activityIndicator, Microsoft.Maui.Graphics.Color color)
        where T : IActivityIndicator
    {
        activityIndicator.Color = color;
        return activityIndicator;
    }

    public static T Color<T>(this T activityIndicator, Func<Microsoft.Maui.Graphics.Color> colorFunc)
        where T : IActivityIndicator
    {
        activityIndicator.Color = new PropertyValue<Microsoft.Maui.Graphics.Color>(colorFunc);
        return activityIndicator;
    }
}

public static partial class ActivityIndicatorStyles
{
    public static Action<IActivityIndicator>? Default { get; set; }
    public static Dictionary<string, Action<IActivityIndicator>> Themes { get; } = [];
}