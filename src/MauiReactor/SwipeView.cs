// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ISwipeView : IContentView
{
    object? Threshold { get; set; }

    EventCommand<SwipeStartedEventArgs>? SwipeStartedEvent { get; set; }

    EventCommand<SwipeChangingEventArgs>? SwipeChangingEvent { get; set; }

    EventCommand<SwipeEndedEventArgs>? SwipeEndedEvent { get; set; }
}

public partial class SwipeView<T> : ContentView<T>, ISwipeView where T : Microsoft.Maui.Controls.SwipeView, new()
{
    public SwipeView()
    {
        SwipeViewStyles.Default?.Invoke(this);
    }

    public SwipeView(Action<T?> componentRefAction) : base(componentRefAction)
    {
        SwipeViewStyles.Default?.Invoke(this);
    }

    object? ISwipeView.Threshold { get; set; }

    EventCommand<SwipeStartedEventArgs>? ISwipeView.SwipeStartedEvent { get; set; }

    EventCommand<SwipeChangingEventArgs>? ISwipeView.SwipeChangingEvent { get; set; }

    EventCommand<SwipeEndedEventArgs>? ISwipeView.SwipeEndedEvent { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsISwipeView = (ISwipeView)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.SwipeView.ThresholdProperty, thisAsISwipeView.Threshold);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && SwipeViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<SwipeStartedEventArgs>? _executingSwipeStartedEvent;
    private EventCommand<SwipeChangingEventArgs>? _executingSwipeChangingEvent;
    private EventCommand<SwipeEndedEventArgs>? _executingSwipeEndedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsISwipeView = (ISwipeView)this;
        if (thisAsISwipeView.SwipeStartedEvent != null)
        {
            NativeControl.SwipeStarted += NativeControl_SwipeStarted;
        }

        if (thisAsISwipeView.SwipeChangingEvent != null)
        {
            NativeControl.SwipeChanging += NativeControl_SwipeChanging;
        }

        if (thisAsISwipeView.SwipeEndedEvent != null)
        {
            NativeControl.SwipeEnded += NativeControl_SwipeEnded;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_SwipeStarted(object? sender, SwipeStartedEventArgs e)
    {
        var thisAsISwipeView = (ISwipeView)this;
        if (_executingSwipeStartedEvent == null || _executingSwipeStartedEvent.IsCompleted)
        {
            _executingSwipeStartedEvent = thisAsISwipeView.SwipeStartedEvent;
            _executingSwipeStartedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_SwipeChanging(object? sender, SwipeChangingEventArgs e)
    {
        var thisAsISwipeView = (ISwipeView)this;
        if (_executingSwipeChangingEvent == null || _executingSwipeChangingEvent.IsCompleted)
        {
            _executingSwipeChangingEvent = thisAsISwipeView.SwipeChangingEvent;
            _executingSwipeChangingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_SwipeEnded(object? sender, SwipeEndedEventArgs e)
    {
        var thisAsISwipeView = (ISwipeView)this;
        if (_executingSwipeEndedEvent == null || _executingSwipeEndedEvent.IsCompleted)
        {
            _executingSwipeEndedEvent = thisAsISwipeView.SwipeEndedEvent;
            _executingSwipeEndedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.SwipeStarted -= NativeControl_SwipeStarted;
            NativeControl.SwipeChanging -= NativeControl_SwipeChanging;
            NativeControl.SwipeEnded -= NativeControl_SwipeEnded;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is SwipeView<T> @swipeview)
        {
            if (_executingSwipeStartedEvent != null && !_executingSwipeStartedEvent.IsCompleted)
            {
                @swipeview._executingSwipeStartedEvent = _executingSwipeStartedEvent;
            }

            if (_executingSwipeChangingEvent != null && !_executingSwipeChangingEvent.IsCompleted)
            {
                @swipeview._executingSwipeChangingEvent = _executingSwipeChangingEvent;
            }

            if (_executingSwipeEndedEvent != null && !_executingSwipeEndedEvent.IsCompleted)
            {
                @swipeview._executingSwipeEndedEvent = _executingSwipeEndedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class SwipeView : SwipeView<Microsoft.Maui.Controls.SwipeView>
{
    public SwipeView()
    {
    }

    public SwipeView(Action<Microsoft.Maui.Controls.SwipeView?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class SwipeViewExtensions
{
    static object? SetThreshold(object swipeView, RxAnimation animation) => ((ISwipeView)swipeView).Threshold = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Threshold<T>(this T swipeView, double threshold, RxDoubleAnimation? customAnimation = null)
        where T : ISwipeView
    {
        swipeView.Threshold = threshold;
        swipeView.AppendAnimatable(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, customAnimation ?? new RxDoubleAnimation(threshold), SetThreshold);
        return swipeView;
    }

    public static T Threshold<T>(this T swipeView, Func<double> thresholdFunc)
        where T : ISwipeView
    {
        swipeView.Threshold = new PropertyValue<double>(thresholdFunc);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Action? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new SyncEventCommand<SwipeStartedEventArgs>(execute: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Action<SwipeStartedEventArgs>? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new SyncEventCommand<SwipeStartedEventArgs>(executeWithArgs: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Action<object?, SwipeStartedEventArgs>? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new SyncEventCommand<SwipeStartedEventArgs>(executeWithFullArgs: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Func<Task>? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new AsyncEventCommand<SwipeStartedEventArgs>(execute: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Func<SwipeStartedEventArgs, Task>? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new AsyncEventCommand<SwipeStartedEventArgs>(executeWithArgs: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeStarted<T>(this T swipeView, Func<object?, SwipeStartedEventArgs, Task>? swipeStartedAction)
        where T : ISwipeView
    {
        swipeView.SwipeStartedEvent = new AsyncEventCommand<SwipeStartedEventArgs>(executeWithFullArgs: swipeStartedAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Action? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new SyncEventCommand<SwipeChangingEventArgs>(execute: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Action<SwipeChangingEventArgs>? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new SyncEventCommand<SwipeChangingEventArgs>(executeWithArgs: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Action<object?, SwipeChangingEventArgs>? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new SyncEventCommand<SwipeChangingEventArgs>(executeWithFullArgs: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Func<Task>? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new AsyncEventCommand<SwipeChangingEventArgs>(execute: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Func<SwipeChangingEventArgs, Task>? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new AsyncEventCommand<SwipeChangingEventArgs>(executeWithArgs: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeChanging<T>(this T swipeView, Func<object?, SwipeChangingEventArgs, Task>? swipeChangingAction)
        where T : ISwipeView
    {
        swipeView.SwipeChangingEvent = new AsyncEventCommand<SwipeChangingEventArgs>(executeWithFullArgs: swipeChangingAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Action? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new SyncEventCommand<SwipeEndedEventArgs>(execute: swipeEndedAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Action<SwipeEndedEventArgs>? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new SyncEventCommand<SwipeEndedEventArgs>(executeWithArgs: swipeEndedAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Action<object?, SwipeEndedEventArgs>? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new SyncEventCommand<SwipeEndedEventArgs>(executeWithFullArgs: swipeEndedAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Func<Task>? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new AsyncEventCommand<SwipeEndedEventArgs>(execute: swipeEndedAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Func<SwipeEndedEventArgs, Task>? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new AsyncEventCommand<SwipeEndedEventArgs>(executeWithArgs: swipeEndedAction);
        return swipeView;
    }

    public static T OnSwipeEnded<T>(this T swipeView, Func<object?, SwipeEndedEventArgs, Task>? swipeEndedAction)
        where T : ISwipeView
    {
        swipeView.SwipeEndedEvent = new AsyncEventCommand<SwipeEndedEventArgs>(executeWithFullArgs: swipeEndedAction);
        return swipeView;
    }
}

public static partial class SwipeViewStyles
{
    public static Action<ISwipeView>? Default { get; set; }
    public static Dictionary<string, Action<ISwipeView>> Themes { get; } = [];
}