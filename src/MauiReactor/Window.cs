// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IWindow : INavigableElement
{
    EventCommand<EventArgs>? SizeChangedEvent { get; set; }

    EventCommand<ModalPoppedEventArgs>? ModalPoppedEvent { get; set; }

    EventCommand<ModalPoppingEventArgs>? ModalPoppingEvent { get; set; }

    EventCommand<ModalPushedEventArgs>? ModalPushedEvent { get; set; }

    EventCommand<ModalPushingEventArgs>? ModalPushingEvent { get; set; }

    EventCommand<EventArgs>? PopCanceledEvent { get; set; }

    EventCommand<EventArgs>? CreatedEvent { get; set; }

    EventCommand<EventArgs>? ResumedEvent { get; set; }

    EventCommand<EventArgs>? ActivatedEvent { get; set; }

    EventCommand<EventArgs>? DeactivatedEvent { get; set; }

    EventCommand<EventArgs>? StoppedEvent { get; set; }

    EventCommand<EventArgs>? DestroyingEvent { get; set; }

    EventCommand<BackgroundingEventArgs>? BackgroundingEvent { get; set; }

    EventCommand<DisplayDensityChangedEventArgs>? DisplayDensityChangedEvent { get; set; }
}

public partial class Window<T> : NavigableElement<T>, IWindow where T : Microsoft.Maui.Controls.Window, new()
{
    public Window()
    {
        WindowStyles.Default?.Invoke(this);
    }

    public Window(Action<T?> componentRefAction) : base(componentRefAction)
    {
        WindowStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IWindow.SizeChangedEvent { get; set; }

    EventCommand<ModalPoppedEventArgs>? IWindow.ModalPoppedEvent { get; set; }

    EventCommand<ModalPoppingEventArgs>? IWindow.ModalPoppingEvent { get; set; }

    EventCommand<ModalPushedEventArgs>? IWindow.ModalPushedEvent { get; set; }

    EventCommand<ModalPushingEventArgs>? IWindow.ModalPushingEvent { get; set; }

    EventCommand<EventArgs>? IWindow.PopCanceledEvent { get; set; }

    EventCommand<EventArgs>? IWindow.CreatedEvent { get; set; }

    EventCommand<EventArgs>? IWindow.ResumedEvent { get; set; }

    EventCommand<EventArgs>? IWindow.ActivatedEvent { get; set; }

    EventCommand<EventArgs>? IWindow.DeactivatedEvent { get; set; }

    EventCommand<EventArgs>? IWindow.StoppedEvent { get; set; }

    EventCommand<EventArgs>? IWindow.DestroyingEvent { get; set; }

    EventCommand<BackgroundingEventArgs>? IWindow.BackgroundingEvent { get; set; }

    EventCommand<DisplayDensityChangedEventArgs>? IWindow.DisplayDensityChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && WindowStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingSizeChangedEvent;
    private EventCommand<ModalPoppedEventArgs>? _executingModalPoppedEvent;
    private EventCommand<ModalPoppingEventArgs>? _executingModalPoppingEvent;
    private EventCommand<ModalPushedEventArgs>? _executingModalPushedEvent;
    private EventCommand<ModalPushingEventArgs>? _executingModalPushingEvent;
    private EventCommand<EventArgs>? _executingPopCanceledEvent;
    private EventCommand<EventArgs>? _executingCreatedEvent;
    private EventCommand<EventArgs>? _executingResumedEvent;
    private EventCommand<EventArgs>? _executingActivatedEvent;
    private EventCommand<EventArgs>? _executingDeactivatedEvent;
    private EventCommand<EventArgs>? _executingStoppedEvent;
    private EventCommand<EventArgs>? _executingDestroyingEvent;
    private EventCommand<BackgroundingEventArgs>? _executingBackgroundingEvent;
    private EventCommand<DisplayDensityChangedEventArgs>? _executingDisplayDensityChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIWindow = (IWindow)this;
        if (thisAsIWindow.SizeChangedEvent != null)
        {
            NativeControl.SizeChanged += NativeControl_SizeChanged;
        }

        if (thisAsIWindow.ModalPoppedEvent != null)
        {
            NativeControl.ModalPopped += NativeControl_ModalPopped;
        }

        if (thisAsIWindow.ModalPoppingEvent != null)
        {
            NativeControl.ModalPopping += NativeControl_ModalPopping;
        }

        if (thisAsIWindow.ModalPushedEvent != null)
        {
            NativeControl.ModalPushed += NativeControl_ModalPushed;
        }

        if (thisAsIWindow.ModalPushingEvent != null)
        {
            NativeControl.ModalPushing += NativeControl_ModalPushing;
        }

        if (thisAsIWindow.PopCanceledEvent != null)
        {
            NativeControl.PopCanceled += NativeControl_PopCanceled;
        }

        if (thisAsIWindow.CreatedEvent != null)
        {
            NativeControl.Created += NativeControl_Created;
        }

        if (thisAsIWindow.ResumedEvent != null)
        {
            NativeControl.Resumed += NativeControl_Resumed;
        }

        if (thisAsIWindow.ActivatedEvent != null)
        {
            NativeControl.Activated += NativeControl_Activated;
        }

        if (thisAsIWindow.DeactivatedEvent != null)
        {
            NativeControl.Deactivated += NativeControl_Deactivated;
        }

        if (thisAsIWindow.StoppedEvent != null)
        {
            NativeControl.Stopped += NativeControl_Stopped;
        }

        if (thisAsIWindow.DestroyingEvent != null)
        {
            NativeControl.Destroying += NativeControl_Destroying;
        }

        if (thisAsIWindow.BackgroundingEvent != null)
        {
            NativeControl.Backgrounding += NativeControl_Backgrounding;
        }

        if (thisAsIWindow.DisplayDensityChangedEvent != null)
        {
            NativeControl.DisplayDensityChanged += NativeControl_DisplayDensityChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_SizeChanged(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingSizeChangedEvent == null || _executingSizeChangedEvent.IsCompleted)
        {
            _executingSizeChangedEvent = thisAsIWindow.SizeChangedEvent;
            _executingSizeChangedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ModalPopped(object? sender, ModalPoppedEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingModalPoppedEvent == null || _executingModalPoppedEvent.IsCompleted)
        {
            _executingModalPoppedEvent = thisAsIWindow.ModalPoppedEvent;
            _executingModalPoppedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ModalPopping(object? sender, ModalPoppingEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingModalPoppingEvent == null || _executingModalPoppingEvent.IsCompleted)
        {
            _executingModalPoppingEvent = thisAsIWindow.ModalPoppingEvent;
            _executingModalPoppingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ModalPushed(object? sender, ModalPushedEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingModalPushedEvent == null || _executingModalPushedEvent.IsCompleted)
        {
            _executingModalPushedEvent = thisAsIWindow.ModalPushedEvent;
            _executingModalPushedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_ModalPushing(object? sender, ModalPushingEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingModalPushingEvent == null || _executingModalPushingEvent.IsCompleted)
        {
            _executingModalPushingEvent = thisAsIWindow.ModalPushingEvent;
            _executingModalPushingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_PopCanceled(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingPopCanceledEvent == null || _executingPopCanceledEvent.IsCompleted)
        {
            _executingPopCanceledEvent = thisAsIWindow.PopCanceledEvent;
            _executingPopCanceledEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Created(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingCreatedEvent == null || _executingCreatedEvent.IsCompleted)
        {
            _executingCreatedEvent = thisAsIWindow.CreatedEvent;
            _executingCreatedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Resumed(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingResumedEvent == null || _executingResumedEvent.IsCompleted)
        {
            _executingResumedEvent = thisAsIWindow.ResumedEvent;
            _executingResumedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Activated(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingActivatedEvent == null || _executingActivatedEvent.IsCompleted)
        {
            _executingActivatedEvent = thisAsIWindow.ActivatedEvent;
            _executingActivatedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Deactivated(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingDeactivatedEvent == null || _executingDeactivatedEvent.IsCompleted)
        {
            _executingDeactivatedEvent = thisAsIWindow.DeactivatedEvent;
            _executingDeactivatedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Stopped(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingStoppedEvent == null || _executingStoppedEvent.IsCompleted)
        {
            _executingStoppedEvent = thisAsIWindow.StoppedEvent;
            _executingStoppedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Destroying(object? sender, EventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingDestroyingEvent == null || _executingDestroyingEvent.IsCompleted)
        {
            _executingDestroyingEvent = thisAsIWindow.DestroyingEvent;
            _executingDestroyingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Backgrounding(object? sender, BackgroundingEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingBackgroundingEvent == null || _executingBackgroundingEvent.IsCompleted)
        {
            _executingBackgroundingEvent = thisAsIWindow.BackgroundingEvent;
            _executingBackgroundingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_DisplayDensityChanged(object? sender, DisplayDensityChangedEventArgs e)
    {
        var thisAsIWindow = (IWindow)this;
        if (_executingDisplayDensityChangedEvent == null || _executingDisplayDensityChangedEvent.IsCompleted)
        {
            _executingDisplayDensityChangedEvent = thisAsIWindow.DisplayDensityChangedEvent;
            _executingDisplayDensityChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.SizeChanged -= NativeControl_SizeChanged;
            NativeControl.ModalPopped -= NativeControl_ModalPopped;
            NativeControl.ModalPopping -= NativeControl_ModalPopping;
            NativeControl.ModalPushed -= NativeControl_ModalPushed;
            NativeControl.ModalPushing -= NativeControl_ModalPushing;
            NativeControl.PopCanceled -= NativeControl_PopCanceled;
            NativeControl.Created -= NativeControl_Created;
            NativeControl.Resumed -= NativeControl_Resumed;
            NativeControl.Activated -= NativeControl_Activated;
            NativeControl.Deactivated -= NativeControl_Deactivated;
            NativeControl.Stopped -= NativeControl_Stopped;
            NativeControl.Destroying -= NativeControl_Destroying;
            NativeControl.Backgrounding -= NativeControl_Backgrounding;
            NativeControl.DisplayDensityChanged -= NativeControl_DisplayDensityChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Window<T> @window)
        {
            if (_executingSizeChangedEvent != null && !_executingSizeChangedEvent.IsCompleted)
            {
                @window._executingSizeChangedEvent = _executingSizeChangedEvent;
            }

            if (_executingModalPoppedEvent != null && !_executingModalPoppedEvent.IsCompleted)
            {
                @window._executingModalPoppedEvent = _executingModalPoppedEvent;
            }

            if (_executingModalPoppingEvent != null && !_executingModalPoppingEvent.IsCompleted)
            {
                @window._executingModalPoppingEvent = _executingModalPoppingEvent;
            }

            if (_executingModalPushedEvent != null && !_executingModalPushedEvent.IsCompleted)
            {
                @window._executingModalPushedEvent = _executingModalPushedEvent;
            }

            if (_executingModalPushingEvent != null && !_executingModalPushingEvent.IsCompleted)
            {
                @window._executingModalPushingEvent = _executingModalPushingEvent;
            }

            if (_executingPopCanceledEvent != null && !_executingPopCanceledEvent.IsCompleted)
            {
                @window._executingPopCanceledEvent = _executingPopCanceledEvent;
            }

            if (_executingCreatedEvent != null && !_executingCreatedEvent.IsCompleted)
            {
                @window._executingCreatedEvent = _executingCreatedEvent;
            }

            if (_executingResumedEvent != null && !_executingResumedEvent.IsCompleted)
            {
                @window._executingResumedEvent = _executingResumedEvent;
            }

            if (_executingActivatedEvent != null && !_executingActivatedEvent.IsCompleted)
            {
                @window._executingActivatedEvent = _executingActivatedEvent;
            }

            if (_executingDeactivatedEvent != null && !_executingDeactivatedEvent.IsCompleted)
            {
                @window._executingDeactivatedEvent = _executingDeactivatedEvent;
            }

            if (_executingStoppedEvent != null && !_executingStoppedEvent.IsCompleted)
            {
                @window._executingStoppedEvent = _executingStoppedEvent;
            }

            if (_executingDestroyingEvent != null && !_executingDestroyingEvent.IsCompleted)
            {
                @window._executingDestroyingEvent = _executingDestroyingEvent;
            }

            if (_executingBackgroundingEvent != null && !_executingBackgroundingEvent.IsCompleted)
            {
                @window._executingBackgroundingEvent = _executingBackgroundingEvent;
            }

            if (_executingDisplayDensityChangedEvent != null && !_executingDisplayDensityChangedEvent.IsCompleted)
            {
                @window._executingDisplayDensityChangedEvent = _executingDisplayDensityChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Window : Window<Microsoft.Maui.Controls.Window>
{
    public Window()
    {
    }

    public Window(Action<Microsoft.Maui.Controls.Window?> componentRefAction) : base(componentRefAction)
    {
    }

    public Window(params IEnumerable<VisualNode?>? children)
    {
        if (children != null)
        {
            this.AddChildren(children);
        }
    }
}

public static partial class WindowExtensions
{
    /*
    
    
    
    
    
    
    static object? SetX(object window, RxAnimation animation)
        => ((IWindow)window).X = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetY(object window, RxAnimation animation)
        => ((IWindow)window).Y = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetWidth(object window, RxAnimation animation)
        => ((IWindow)window).Width = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetHeight(object window, RxAnimation animation)
        => ((IWindow)window).Height = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetMaximumWidth(object window, RxAnimation animation)
        => ((IWindow)window).MaximumWidth = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetMaximumHeight(object window, RxAnimation animation)
        => ((IWindow)window).MaximumHeight = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetMinimumWidth(object window, RxAnimation animation)
        => ((IWindow)window).MinimumWidth = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetMinimumHeight(object window, RxAnimation animation)
        => ((IWindow)window).MinimumHeight = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    */
    public static T Title<T>(this T window, string title)
        where T : IWindow
    {
        //window.Title = title;
        window.SetProperty(Microsoft.Maui.Controls.Window.TitleProperty, title);
        return window;
    }

    public static T Title<T>(this T window, Func<string> titleFunc)
        where T : IWindow
    {
        //window.Title = new PropertyValue<string>(titleFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.TitleProperty, new PropertyValue<string>(titleFunc));
        return window;
    }

    public static T FlowDirection<T>(this T window, Microsoft.Maui.FlowDirection flowDirection)
        where T : IWindow
    {
        //window.FlowDirection = flowDirection;
        window.SetProperty(Microsoft.Maui.Controls.Window.FlowDirectionProperty, flowDirection);
        return window;
    }

    public static T FlowDirection<T>(this T window, Func<Microsoft.Maui.FlowDirection> flowDirectionFunc)
        where T : IWindow
    {
        //window.FlowDirection = new PropertyValue<Microsoft.Maui.FlowDirection>(flowDirectionFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.FlowDirectionProperty, new PropertyValue<Microsoft.Maui.FlowDirection>(flowDirectionFunc));
        return window;
    }

    public static T X<T>(this T window, double x, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.X = x;
        window.SetProperty(Microsoft.Maui.Controls.Window.XProperty, x);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.XProperty, customAnimation ?? new RxDoubleAnimation(x));
        return window;
    }

    public static T X<T>(this T window, Func<double> xFunc)
        where T : IWindow
    {
        //window.X = new PropertyValue<double>(xFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.XProperty, new PropertyValue<double>(xFunc));
        return window;
    }

    public static T Y<T>(this T window, double y, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.Y = y;
        window.SetProperty(Microsoft.Maui.Controls.Window.YProperty, y);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.YProperty, customAnimation ?? new RxDoubleAnimation(y));
        return window;
    }

    public static T Y<T>(this T window, Func<double> yFunc)
        where T : IWindow
    {
        //window.Y = new PropertyValue<double>(yFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.YProperty, new PropertyValue<double>(yFunc));
        return window;
    }

    public static T Width<T>(this T window, double width, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.Width = width;
        window.SetProperty(Microsoft.Maui.Controls.Window.WidthProperty, width);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.WidthProperty, customAnimation ?? new RxDoubleAnimation(width));
        return window;
    }

    public static T Width<T>(this T window, Func<double> widthFunc)
        where T : IWindow
    {
        //window.Width = new PropertyValue<double>(widthFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.WidthProperty, new PropertyValue<double>(widthFunc));
        return window;
    }

    public static T Height<T>(this T window, double height, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.Height = height;
        window.SetProperty(Microsoft.Maui.Controls.Window.HeightProperty, height);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.HeightProperty, customAnimation ?? new RxDoubleAnimation(height));
        return window;
    }

    public static T Height<T>(this T window, Func<double> heightFunc)
        where T : IWindow
    {
        //window.Height = new PropertyValue<double>(heightFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.HeightProperty, new PropertyValue<double>(heightFunc));
        return window;
    }

    public static T MaximumWidth<T>(this T window, double maximumWidth, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.MaximumWidth = maximumWidth;
        window.SetProperty(Microsoft.Maui.Controls.Window.MaximumWidthProperty, maximumWidth);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.MaximumWidthProperty, customAnimation ?? new RxDoubleAnimation(maximumWidth));
        return window;
    }

    public static T MaximumWidth<T>(this T window, Func<double> maximumWidthFunc)
        where T : IWindow
    {
        //window.MaximumWidth = new PropertyValue<double>(maximumWidthFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.MaximumWidthProperty, new PropertyValue<double>(maximumWidthFunc));
        return window;
    }

    public static T MaximumHeight<T>(this T window, double maximumHeight, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.MaximumHeight = maximumHeight;
        window.SetProperty(Microsoft.Maui.Controls.Window.MaximumHeightProperty, maximumHeight);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.MaximumHeightProperty, customAnimation ?? new RxDoubleAnimation(maximumHeight));
        return window;
    }

    public static T MaximumHeight<T>(this T window, Func<double> maximumHeightFunc)
        where T : IWindow
    {
        //window.MaximumHeight = new PropertyValue<double>(maximumHeightFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.MaximumHeightProperty, new PropertyValue<double>(maximumHeightFunc));
        return window;
    }

    public static T MinimumWidth<T>(this T window, double minimumWidth, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.MinimumWidth = minimumWidth;
        window.SetProperty(Microsoft.Maui.Controls.Window.MinimumWidthProperty, minimumWidth);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.MinimumWidthProperty, customAnimation ?? new RxDoubleAnimation(minimumWidth));
        return window;
    }

    public static T MinimumWidth<T>(this T window, Func<double> minimumWidthFunc)
        where T : IWindow
    {
        //window.MinimumWidth = new PropertyValue<double>(minimumWidthFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.MinimumWidthProperty, new PropertyValue<double>(minimumWidthFunc));
        return window;
    }

    public static T MinimumHeight<T>(this T window, double minimumHeight, RxDoubleAnimation? customAnimation = null)
        where T : IWindow
    {
        //window.MinimumHeight = minimumHeight;
        window.SetProperty(Microsoft.Maui.Controls.Window.MinimumHeightProperty, minimumHeight);
        window.AppendAnimatable(Microsoft.Maui.Controls.Window.MinimumHeightProperty, customAnimation ?? new RxDoubleAnimation(minimumHeight));
        return window;
    }

    public static T MinimumHeight<T>(this T window, Func<double> minimumHeightFunc)
        where T : IWindow
    {
        //window.MinimumHeight = new PropertyValue<double>(minimumHeightFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.MinimumHeightProperty, new PropertyValue<double>(minimumHeightFunc));
        return window;
    }

    public static T TitleBar<T>(this T window, Microsoft.Maui.ITitleBar titleBar)
        where T : IWindow
    {
        //window.TitleBar = titleBar;
        window.SetProperty(Microsoft.Maui.Controls.Window.TitleBarProperty, titleBar);
        return window;
    }

    public static T TitleBar<T>(this T window, Func<Microsoft.Maui.ITitleBar> titleBarFunc)
        where T : IWindow
    {
        //window.TitleBar = new PropertyValue<Microsoft.Maui.ITitleBar>(titleBarFunc);
        window.SetProperty(Microsoft.Maui.Controls.Window.TitleBarProperty, new PropertyValue<Microsoft.Maui.ITitleBar>(titleBarFunc));
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Action? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new SyncEventCommand<EventArgs>(execute: sizeChangedAction);
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Action<EventArgs>? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: sizeChangedAction);
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Action<object?, EventArgs>? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: sizeChangedAction);
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Func<Task>? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new AsyncEventCommand<EventArgs>(execute: sizeChangedAction);
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Func<EventArgs, Task>? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: sizeChangedAction);
        return window;
    }

    public static T OnSizeChanged<T>(this T window, Func<object?, EventArgs, Task>? sizeChangedAction)
        where T : IWindow
    {
        window.SizeChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: sizeChangedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Action? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new SyncEventCommand<ModalPoppedEventArgs>(execute: modalPoppedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Action<ModalPoppedEventArgs>? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new SyncEventCommand<ModalPoppedEventArgs>(executeWithArgs: modalPoppedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Action<object?, ModalPoppedEventArgs>? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new SyncEventCommand<ModalPoppedEventArgs>(executeWithFullArgs: modalPoppedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Func<Task>? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new AsyncEventCommand<ModalPoppedEventArgs>(execute: modalPoppedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Func<ModalPoppedEventArgs, Task>? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new AsyncEventCommand<ModalPoppedEventArgs>(executeWithArgs: modalPoppedAction);
        return window;
    }

    public static T OnModalPopped<T>(this T window, Func<object?, ModalPoppedEventArgs, Task>? modalPoppedAction)
        where T : IWindow
    {
        window.ModalPoppedEvent = new AsyncEventCommand<ModalPoppedEventArgs>(executeWithFullArgs: modalPoppedAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Action? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new SyncEventCommand<ModalPoppingEventArgs>(execute: modalPoppingAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Action<ModalPoppingEventArgs>? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new SyncEventCommand<ModalPoppingEventArgs>(executeWithArgs: modalPoppingAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Action<object?, ModalPoppingEventArgs>? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new SyncEventCommand<ModalPoppingEventArgs>(executeWithFullArgs: modalPoppingAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Func<Task>? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new AsyncEventCommand<ModalPoppingEventArgs>(execute: modalPoppingAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Func<ModalPoppingEventArgs, Task>? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new AsyncEventCommand<ModalPoppingEventArgs>(executeWithArgs: modalPoppingAction);
        return window;
    }

    public static T OnModalPopping<T>(this T window, Func<object?, ModalPoppingEventArgs, Task>? modalPoppingAction)
        where T : IWindow
    {
        window.ModalPoppingEvent = new AsyncEventCommand<ModalPoppingEventArgs>(executeWithFullArgs: modalPoppingAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Action? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new SyncEventCommand<ModalPushedEventArgs>(execute: modalPushedAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Action<ModalPushedEventArgs>? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new SyncEventCommand<ModalPushedEventArgs>(executeWithArgs: modalPushedAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Action<object?, ModalPushedEventArgs>? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new SyncEventCommand<ModalPushedEventArgs>(executeWithFullArgs: modalPushedAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Func<Task>? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new AsyncEventCommand<ModalPushedEventArgs>(execute: modalPushedAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Func<ModalPushedEventArgs, Task>? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new AsyncEventCommand<ModalPushedEventArgs>(executeWithArgs: modalPushedAction);
        return window;
    }

    public static T OnModalPushed<T>(this T window, Func<object?, ModalPushedEventArgs, Task>? modalPushedAction)
        where T : IWindow
    {
        window.ModalPushedEvent = new AsyncEventCommand<ModalPushedEventArgs>(executeWithFullArgs: modalPushedAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Action? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new SyncEventCommand<ModalPushingEventArgs>(execute: modalPushingAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Action<ModalPushingEventArgs>? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new SyncEventCommand<ModalPushingEventArgs>(executeWithArgs: modalPushingAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Action<object?, ModalPushingEventArgs>? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new SyncEventCommand<ModalPushingEventArgs>(executeWithFullArgs: modalPushingAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Func<Task>? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new AsyncEventCommand<ModalPushingEventArgs>(execute: modalPushingAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Func<ModalPushingEventArgs, Task>? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new AsyncEventCommand<ModalPushingEventArgs>(executeWithArgs: modalPushingAction);
        return window;
    }

    public static T OnModalPushing<T>(this T window, Func<object?, ModalPushingEventArgs, Task>? modalPushingAction)
        where T : IWindow
    {
        window.ModalPushingEvent = new AsyncEventCommand<ModalPushingEventArgs>(executeWithFullArgs: modalPushingAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Action? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new SyncEventCommand<EventArgs>(execute: popCanceledAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Action<EventArgs>? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new SyncEventCommand<EventArgs>(executeWithArgs: popCanceledAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Action<object?, EventArgs>? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: popCanceledAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Func<Task>? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new AsyncEventCommand<EventArgs>(execute: popCanceledAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Func<EventArgs, Task>? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: popCanceledAction);
        return window;
    }

    public static T OnPopCanceled<T>(this T window, Func<object?, EventArgs, Task>? popCanceledAction)
        where T : IWindow
    {
        window.PopCanceledEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: popCanceledAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Action? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new SyncEventCommand<EventArgs>(execute: createdAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Action<EventArgs>? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: createdAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Action<object?, EventArgs>? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: createdAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Func<Task>? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new AsyncEventCommand<EventArgs>(execute: createdAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Func<EventArgs, Task>? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: createdAction);
        return window;
    }

    public static T OnCreated<T>(this T window, Func<object?, EventArgs, Task>? createdAction)
        where T : IWindow
    {
        window.CreatedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: createdAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Action? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new SyncEventCommand<EventArgs>(execute: resumedAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Action<EventArgs>? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: resumedAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Action<object?, EventArgs>? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: resumedAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Func<Task>? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new AsyncEventCommand<EventArgs>(execute: resumedAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Func<EventArgs, Task>? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: resumedAction);
        return window;
    }

    public static T OnResumed<T>(this T window, Func<object?, EventArgs, Task>? resumedAction)
        where T : IWindow
    {
        window.ResumedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: resumedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Action? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new SyncEventCommand<EventArgs>(execute: activatedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Action<EventArgs>? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: activatedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Action<object?, EventArgs>? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: activatedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Func<Task>? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new AsyncEventCommand<EventArgs>(execute: activatedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Func<EventArgs, Task>? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: activatedAction);
        return window;
    }

    public static T OnActivated<T>(this T window, Func<object?, EventArgs, Task>? activatedAction)
        where T : IWindow
    {
        window.ActivatedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: activatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Action? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new SyncEventCommand<EventArgs>(execute: deactivatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Action<EventArgs>? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: deactivatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Action<object?, EventArgs>? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: deactivatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Func<Task>? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new AsyncEventCommand<EventArgs>(execute: deactivatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Func<EventArgs, Task>? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: deactivatedAction);
        return window;
    }

    public static T OnDeactivated<T>(this T window, Func<object?, EventArgs, Task>? deactivatedAction)
        where T : IWindow
    {
        window.DeactivatedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: deactivatedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Action? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new SyncEventCommand<EventArgs>(execute: stoppedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Action<EventArgs>? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: stoppedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Action<object?, EventArgs>? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: stoppedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Func<Task>? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new AsyncEventCommand<EventArgs>(execute: stoppedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Func<EventArgs, Task>? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: stoppedAction);
        return window;
    }

    public static T OnStopped<T>(this T window, Func<object?, EventArgs, Task>? stoppedAction)
        where T : IWindow
    {
        window.StoppedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: stoppedAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Action? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new SyncEventCommand<EventArgs>(execute: destroyingAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Action<EventArgs>? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new SyncEventCommand<EventArgs>(executeWithArgs: destroyingAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Action<object?, EventArgs>? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: destroyingAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Func<Task>? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new AsyncEventCommand<EventArgs>(execute: destroyingAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Func<EventArgs, Task>? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: destroyingAction);
        return window;
    }

    public static T OnDestroying<T>(this T window, Func<object?, EventArgs, Task>? destroyingAction)
        where T : IWindow
    {
        window.DestroyingEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: destroyingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Action? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new SyncEventCommand<BackgroundingEventArgs>(execute: backgroundingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Action<BackgroundingEventArgs>? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new SyncEventCommand<BackgroundingEventArgs>(executeWithArgs: backgroundingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Action<object?, BackgroundingEventArgs>? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new SyncEventCommand<BackgroundingEventArgs>(executeWithFullArgs: backgroundingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Func<Task>? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new AsyncEventCommand<BackgroundingEventArgs>(execute: backgroundingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Func<BackgroundingEventArgs, Task>? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new AsyncEventCommand<BackgroundingEventArgs>(executeWithArgs: backgroundingAction);
        return window;
    }

    public static T OnBackgrounding<T>(this T window, Func<object?, BackgroundingEventArgs, Task>? backgroundingAction)
        where T : IWindow
    {
        window.BackgroundingEvent = new AsyncEventCommand<BackgroundingEventArgs>(executeWithFullArgs: backgroundingAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Action? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new SyncEventCommand<DisplayDensityChangedEventArgs>(execute: displayDensityChangedAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Action<DisplayDensityChangedEventArgs>? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new SyncEventCommand<DisplayDensityChangedEventArgs>(executeWithArgs: displayDensityChangedAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Action<object?, DisplayDensityChangedEventArgs>? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new SyncEventCommand<DisplayDensityChangedEventArgs>(executeWithFullArgs: displayDensityChangedAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Func<Task>? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new AsyncEventCommand<DisplayDensityChangedEventArgs>(execute: displayDensityChangedAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Func<DisplayDensityChangedEventArgs, Task>? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new AsyncEventCommand<DisplayDensityChangedEventArgs>(executeWithArgs: displayDensityChangedAction);
        return window;
    }

    public static T OnDisplayDensityChanged<T>(this T window, Func<object?, DisplayDensityChangedEventArgs, Task>? displayDensityChangedAction)
        where T : IWindow
    {
        window.DisplayDensityChangedEvent = new AsyncEventCommand<DisplayDensityChangedEventArgs>(executeWithFullArgs: displayDensityChangedAction);
        return window;
    }
}

public static partial class WindowStyles
{
    public static Action<IWindow>? Default { get; set; }
    public static Dictionary<string, Action<IWindow>> Themes { get; } = [];
}