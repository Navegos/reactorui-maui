// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IEllipseGeometry : Shapes.IGeometry
{
    object? Center { get; set; }

    object? RadiusX { get; set; }

    object? RadiusY { get; set; }
}

public partial class EllipseGeometry<T> : Shapes.Geometry<T>, IEllipseGeometry where T : Microsoft.Maui.Controls.Shapes.EllipseGeometry, new()
{
    public EllipseGeometry()
    {
        EllipseGeometryStyles.Default?.Invoke(this);
    }

    public EllipseGeometry(Action<T?> componentRefAction) : base(componentRefAction)
    {
        EllipseGeometryStyles.Default?.Invoke(this);
    }

    object? IEllipseGeometry.Center { get; set; }

    object? IEllipseGeometry.RadiusX { get; set; }

    object? IEllipseGeometry.RadiusY { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIEllipseGeometry = (IEllipseGeometry)this;
        thisAsIEllipseGeometry.Center = null;
        thisAsIEllipseGeometry.RadiusX = null;
        thisAsIEllipseGeometry.RadiusY = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIEllipseGeometry = (IEllipseGeometry)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.EllipseGeometry.CenterProperty, thisAsIEllipseGeometry.Center);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusXProperty, thisAsIEllipseGeometry.RadiusX);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusYProperty, thisAsIEllipseGeometry.RadiusY);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIEllipseGeometry = (IEllipseGeometry)this;
        AnimateProperty(Microsoft.Maui.Controls.Shapes.EllipseGeometry.CenterProperty, thisAsIEllipseGeometry.Center);
        AnimateProperty(Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusXProperty, thisAsIEllipseGeometry.RadiusX);
        AnimateProperty(Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusYProperty, thisAsIEllipseGeometry.RadiusY);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (Theme != null && EllipseGeometryStyles.Themes.TryGetValue(Theme, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public partial class EllipseGeometry : EllipseGeometry<Microsoft.Maui.Controls.Shapes.EllipseGeometry>
{
    public EllipseGeometry()
    {
    }

    public EllipseGeometry(Action<Microsoft.Maui.Controls.Shapes.EllipseGeometry?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class EllipseGeometryExtensions
{
    static void SetCenter(object ellipseGeometry, RxAnimation animation) => ((IEllipseGeometry)ellipseGeometry).Center = ((RxPointAnimation)animation).CurrentValue();
    static void SetRadiusX(object ellipseGeometry, RxAnimation animation) => ((IEllipseGeometry)ellipseGeometry).RadiusX = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetRadiusY(object ellipseGeometry, RxAnimation animation) => ((IEllipseGeometry)ellipseGeometry).RadiusY = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Center<T>(this T ellipseGeometry, Microsoft.Maui.Graphics.Point center, RxPointAnimation? customAnimation = null)
        where T : IEllipseGeometry
    {
        ellipseGeometry.Center = center;
        ellipseGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.EllipseGeometry.CenterProperty, customAnimation ?? new RxSimplePointAnimation(center), SetCenter);
        return ellipseGeometry;
    }

    public static T Center<T>(this T ellipseGeometry, Func<Microsoft.Maui.Graphics.Point> centerFunc)
        where T : IEllipseGeometry
    {
        ellipseGeometry.Center = new PropertyValue<Microsoft.Maui.Graphics.Point>(centerFunc);
        return ellipseGeometry;
    }

    public static T Center<T>(this T ellipseGeometry, double x, double y)
        where T : IEllipseGeometry
    {
        ellipseGeometry.Center = new Microsoft.Maui.Graphics.Point(x, y);
        return ellipseGeometry;
    }

    public static T RadiusX<T>(this T ellipseGeometry, double radiusX, RxDoubleAnimation? customAnimation = null)
        where T : IEllipseGeometry
    {
        ellipseGeometry.RadiusX = radiusX;
        ellipseGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusXProperty, customAnimation ?? new RxDoubleAnimation(radiusX), SetRadiusX);
        return ellipseGeometry;
    }

    public static T RadiusX<T>(this T ellipseGeometry, Func<double> radiusXFunc)
        where T : IEllipseGeometry
    {
        ellipseGeometry.RadiusX = new PropertyValue<double>(radiusXFunc);
        return ellipseGeometry;
    }

    public static T RadiusY<T>(this T ellipseGeometry, double radiusY, RxDoubleAnimation? customAnimation = null)
        where T : IEllipseGeometry
    {
        ellipseGeometry.RadiusY = radiusY;
        ellipseGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.EllipseGeometry.RadiusYProperty, customAnimation ?? new RxDoubleAnimation(radiusY), SetRadiusY);
        return ellipseGeometry;
    }

    public static T RadiusY<T>(this T ellipseGeometry, Func<double> radiusYFunc)
        where T : IEllipseGeometry
    {
        ellipseGeometry.RadiusY = new PropertyValue<double>(radiusYFunc);
        return ellipseGeometry;
    }
}

public static partial class EllipseGeometryStyles
{
    public static Action<IEllipseGeometry>? Default { get; set; }
    public static Dictionary<string, Action<IEllipseGeometry>> Themes { get; } = [];
}