// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IPathGeometry : Shapes.IGeometry
{
    object? Figures { get; set; }

    object? FillRule { get; set; }
}

public sealed partial class PathGeometry : Shapes.Geometry<Microsoft.Maui.Controls.Shapes.PathGeometry>, IPathGeometry
{
    public PathGeometry()
    {
        PathGeometryStyles.Default?.Invoke(this);
    }

    public PathGeometry(Action<Microsoft.Maui.Controls.Shapes.PathGeometry?> componentRefAction) : base(componentRefAction)
    {
        PathGeometryStyles.Default?.Invoke(this);
    }

    object? IPathGeometry.Figures { get; set; }

    object? IPathGeometry.FillRule { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIPathGeometry = (IPathGeometry)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.PathGeometry.FiguresProperty, thisAsIPathGeometry.Figures);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.PathGeometry.FillRuleProperty, thisAsIPathGeometry.FillRule);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PathGeometryStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class PathGeometryExtensions
{
    public static T Figures<T>(this T pathGeometry, Microsoft.Maui.Controls.Shapes.PathFigureCollection figures)
        where T : IPathGeometry
    {
        pathGeometry.Figures = figures;
        return pathGeometry;
    }

    public static T Figures<T>(this T pathGeometry, Func<Microsoft.Maui.Controls.Shapes.PathFigureCollection> figuresFunc)
        where T : IPathGeometry
    {
        pathGeometry.Figures = new PropertyValue<Microsoft.Maui.Controls.Shapes.PathFigureCollection>(figuresFunc);
        return pathGeometry;
    }

    public static T FillRule<T>(this T pathGeometry, Microsoft.Maui.Controls.Shapes.FillRule fillRule)
        where T : IPathGeometry
    {
        pathGeometry.FillRule = fillRule;
        return pathGeometry;
    }

    public static T FillRule<T>(this T pathGeometry, Func<Microsoft.Maui.Controls.Shapes.FillRule> fillRuleFunc)
        where T : IPathGeometry
    {
        pathGeometry.FillRule = new PropertyValue<Microsoft.Maui.Controls.Shapes.FillRule>(fillRuleFunc);
        return pathGeometry;
    }
}

public static partial class PathGeometryStyles
{
    public static Action<IPathGeometry>? Default { get; set; }
    public static Dictionary<string, Action<IPathGeometry>> Themes { get; } = [];
}