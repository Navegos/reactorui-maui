// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IGeometryGroup : Shapes.IGeometry
{
    EventCommand<EventArgs>? InvalidateGeometryRequestedEvent { get; set; }
}

public partial class GeometryGroup<T> : Shapes.Geometry<T>, IGeometryGroup where T : Microsoft.Maui.Controls.Shapes.GeometryGroup, new()
{
    public GeometryGroup()
    {
        GeometryGroupStyles.Default?.Invoke(this);
    }

    public GeometryGroup(Action<T?> componentRefAction) : base(componentRefAction)
    {
        GeometryGroupStyles.Default?.Invoke(this);
    }

    EventCommand<EventArgs>? IGeometryGroup.InvalidateGeometryRequestedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && GeometryGroupStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingInvalidateGeometryRequestedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIGeometryGroup = (IGeometryGroup)this;
        if (thisAsIGeometryGroup.InvalidateGeometryRequestedEvent != null)
        {
            NativeControl.InvalidateGeometryRequested += NativeControl_InvalidateGeometryRequested;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_InvalidateGeometryRequested(object? sender, EventArgs e)
    {
        var thisAsIGeometryGroup = (IGeometryGroup)this;
        if (_executingInvalidateGeometryRequestedEvent == null || _executingInvalidateGeometryRequestedEvent.IsCompleted)
        {
            _executingInvalidateGeometryRequestedEvent = thisAsIGeometryGroup.InvalidateGeometryRequestedEvent;
            _executingInvalidateGeometryRequestedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.InvalidateGeometryRequested -= NativeControl_InvalidateGeometryRequested;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is GeometryGroup<T> @geometrygroup)
        {
            if (_executingInvalidateGeometryRequestedEvent != null && !_executingInvalidateGeometryRequestedEvent.IsCompleted)
            {
                @geometrygroup._executingInvalidateGeometryRequestedEvent = _executingInvalidateGeometryRequestedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class GeometryGroup : GeometryGroup<Microsoft.Maui.Controls.Shapes.GeometryGroup>
{
    public GeometryGroup()
    {
    }

    public GeometryGroup(Action<Microsoft.Maui.Controls.Shapes.GeometryGroup?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class GeometryGroupExtensions
{
    /*
    
    
    
    
    */
    public static T Children<T>(this T geometryGroup, Microsoft.Maui.Controls.Shapes.GeometryCollection children)
        where T : IGeometryGroup
    {
        //geometryGroup.Children = children;
        geometryGroup.SetProperty(Microsoft.Maui.Controls.Shapes.GeometryGroup.ChildrenProperty, children);
        return geometryGroup;
    }

    public static T Children<T>(this T geometryGroup, Func<Microsoft.Maui.Controls.Shapes.GeometryCollection> childrenFunc)
        where T : IGeometryGroup
    {
        //geometryGroup.Children = new PropertyValue<Microsoft.Maui.Controls.Shapes.GeometryCollection>(childrenFunc);
        geometryGroup.SetProperty(Microsoft.Maui.Controls.Shapes.GeometryGroup.ChildrenProperty, new PropertyValue<Microsoft.Maui.Controls.Shapes.GeometryCollection>(childrenFunc));
        return geometryGroup;
    }

    public static T FillRule<T>(this T geometryGroup, Microsoft.Maui.Controls.Shapes.FillRule fillRule)
        where T : IGeometryGroup
    {
        //geometryGroup.FillRule = fillRule;
        geometryGroup.SetProperty(Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty, fillRule);
        return geometryGroup;
    }

    public static T FillRule<T>(this T geometryGroup, Func<Microsoft.Maui.Controls.Shapes.FillRule> fillRuleFunc)
        where T : IGeometryGroup
    {
        //geometryGroup.FillRule = new PropertyValue<Microsoft.Maui.Controls.Shapes.FillRule>(fillRuleFunc);
        geometryGroup.SetProperty(Microsoft.Maui.Controls.Shapes.GeometryGroup.FillRuleProperty, new PropertyValue<Microsoft.Maui.Controls.Shapes.FillRule>(fillRuleFunc));
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Action? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new SyncEventCommand<EventArgs>(execute: invalidateGeometryRequestedAction);
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Action<EventArgs>? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: invalidateGeometryRequestedAction);
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Action<object?, EventArgs>? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: invalidateGeometryRequestedAction);
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Func<Task>? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new AsyncEventCommand<EventArgs>(execute: invalidateGeometryRequestedAction);
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Func<EventArgs, Task>? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: invalidateGeometryRequestedAction);
        return geometryGroup;
    }

    public static T OnInvalidateGeometryRequested<T>(this T geometryGroup, Func<object?, EventArgs, Task>? invalidateGeometryRequestedAction)
        where T : IGeometryGroup
    {
        geometryGroup.InvalidateGeometryRequestedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: invalidateGeometryRequestedAction);
        return geometryGroup;
    }
}

public static partial class GeometryGroupStyles
{
    public static Action<IGeometryGroup>? Default { get; set; }
    public static Dictionary<string, Action<IGeometryGroup>> Themes { get; } = [];
}