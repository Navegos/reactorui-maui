// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface IRectangle : Shapes.IShape
{
    object? RadiusX { get; set; }

    object? RadiusY { get; set; }
}

public sealed partial class Rectangle : Shapes.Shape<Microsoft.Maui.Controls.Shapes.Rectangle>, IRectangle
{
    public Rectangle()
    {
    }

    public Rectangle(Action<Microsoft.Maui.Controls.Shapes.Rectangle?> componentRefAction) : base(componentRefAction)
    {
    }

    object? IRectangle.RadiusX { get; set; }

    object? IRectangle.RadiusY { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIRectangle = (IRectangle)this;
        thisAsIRectangle.RadiusX = null;
        thisAsIRectangle.RadiusY = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIRectangle = (IRectangle)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, thisAsIRectangle.RadiusX);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, thisAsIRectangle.RadiusY);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIRectangle = (IRectangle)this;
        AnimateProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, thisAsIRectangle.RadiusX);
        AnimateProperty(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, thisAsIRectangle.RadiusY);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
}

public static partial class RectangleExtensions
{
    static void SetRadiusX(object rectangle, RxAnimation animation) => ((IRectangle)rectangle).RadiusX = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetRadiusY(object rectangle, RxAnimation animation) => ((IRectangle)rectangle).RadiusY = ((RxDoubleAnimation)animation).CurrentValue();
    public static T RadiusX<T>(this T rectangle, double radiusX, RxDoubleAnimation? customAnimation = null)
        where T : IRectangle
    {
        rectangle.RadiusX = radiusX;
        rectangle.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusXProperty, customAnimation ?? new RxDoubleAnimation(radiusX), SetRadiusX);
        return rectangle;
    }

    public static T RadiusX<T>(this T rectangle, Func<double> radiusXFunc)
        where T : IRectangle
    {
        rectangle.RadiusX = new PropertyValue<double>(radiusXFunc);
        return rectangle;
    }

    public static T RadiusY<T>(this T rectangle, double radiusY, RxDoubleAnimation? customAnimation = null)
        where T : IRectangle
    {
        rectangle.RadiusY = radiusY;
        rectangle.AppendAnimatable(Microsoft.Maui.Controls.Shapes.Rectangle.RadiusYProperty, customAnimation ?? new RxDoubleAnimation(radiusY), SetRadiusY);
        return rectangle;
    }

    public static T RadiusY<T>(this T rectangle, Func<double> radiusYFunc)
        where T : IRectangle
    {
        rectangle.RadiusY = new PropertyValue<double>(radiusYFunc);
        return rectangle;
    }
}