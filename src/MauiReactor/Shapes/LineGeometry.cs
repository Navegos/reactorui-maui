// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor.Shapes;
public partial interface ILineGeometry : Shapes.IGeometry
{
}

public partial class LineGeometry<T> : Shapes.Geometry<T>, ILineGeometry where T : Microsoft.Maui.Controls.Shapes.LineGeometry, new()
{
    public LineGeometry()
    {
        LineGeometryStyles.Default?.Invoke(this);
    }

    public LineGeometry(Action<T?> componentRefAction) : base(componentRefAction)
    {
        LineGeometryStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && LineGeometryStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class LineGeometry : LineGeometry<Microsoft.Maui.Controls.Shapes.LineGeometry>
{
    public LineGeometry()
    {
    }

    public LineGeometry(Action<Microsoft.Maui.Controls.Shapes.LineGeometry?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class LineGeometryExtensions
{
    /*
    
        
    static object? SetStartPoint(object lineGeometry, RxAnimation animation)
        => ((ILineGeometry)lineGeometry).StartPoint = ((RxPointAnimation)animation).CurrentValue();

    
    
        
    static object? SetEndPoint(object lineGeometry, RxAnimation animation)
        => ((ILineGeometry)lineGeometry).EndPoint = ((RxPointAnimation)animation).CurrentValue();

    
    */
    public static T StartPoint<T>(this T lineGeometry, Microsoft.Maui.Graphics.Point startPoint, RxPointAnimation? customAnimation = null)
        where T : ILineGeometry
    {
        //lineGeometry.StartPoint = startPoint;
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, startPoint);
        lineGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, customAnimation ?? new RxSimplePointAnimation(startPoint));
        return lineGeometry;
    }

    public static T StartPoint<T>(this T lineGeometry, Func<Microsoft.Maui.Graphics.Point> startPointFunc)
        where T : ILineGeometry
    {
        //lineGeometry.StartPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(startPointFunc);
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, new PropertyValue<Microsoft.Maui.Graphics.Point>(startPointFunc));
        return lineGeometry;
    }

    public static T StartPoint<T>(this T lineGeometry, double x, double y)
        where T : ILineGeometry
    {
        //lineGeometry.StartPoint = new Microsoft.Maui.Graphics.Point(x, y);
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.StartPointProperty, new Microsoft.Maui.Graphics.Point(x, y));
        return lineGeometry;
    }

    public static T EndPoint<T>(this T lineGeometry, Microsoft.Maui.Graphics.Point endPoint, RxPointAnimation? customAnimation = null)
        where T : ILineGeometry
    {
        //lineGeometry.EndPoint = endPoint;
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, endPoint);
        lineGeometry.AppendAnimatable(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, customAnimation ?? new RxSimplePointAnimation(endPoint));
        return lineGeometry;
    }

    public static T EndPoint<T>(this T lineGeometry, Func<Microsoft.Maui.Graphics.Point> endPointFunc)
        where T : ILineGeometry
    {
        //lineGeometry.EndPoint = new PropertyValue<Microsoft.Maui.Graphics.Point>(endPointFunc);
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, new PropertyValue<Microsoft.Maui.Graphics.Point>(endPointFunc));
        return lineGeometry;
    }

    public static T EndPoint<T>(this T lineGeometry, double x, double y)
        where T : ILineGeometry
    {
        //lineGeometry.EndPoint = new Microsoft.Maui.Graphics.Point(x, y);
        lineGeometry.SetProperty(Microsoft.Maui.Controls.Shapes.LineGeometry.EndPointProperty, new Microsoft.Maui.Graphics.Point(x, y));
        return lineGeometry;
    }
}

public static partial class LineGeometryStyles
{
    public static Action<ILineGeometry>? Default { get; set; }
    public static Dictionary<string, Action<ILineGeometry>> Themes { get; } = [];
}