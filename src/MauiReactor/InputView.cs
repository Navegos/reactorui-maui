// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IInputView : IView
{
    EventCommand<TextChangedEventArgs>? TextChangedEvent { get; set; }
}

public abstract partial class InputView<T> : View<T>, IInputView where T : Microsoft.Maui.Controls.InputView, new()
{
    protected InputView()
    {
        InputViewStyles.Default?.Invoke(this);
    }

    protected InputView(Action<T?> componentRefAction) : base(componentRefAction)
    {
        InputViewStyles.Default?.Invoke(this);
    }

    EventCommand<TextChangedEventArgs>? IInputView.TextChangedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && InputViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<TextChangedEventArgs>? _executingTextChangedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIInputView = (IInputView)this;
        if (thisAsIInputView.TextChangedEvent != null)
        {
            NativeControl.TextChanged += NativeControl_TextChanged;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_TextChanged(object? sender, TextChangedEventArgs e)
    {
        var thisAsIInputView = (IInputView)this;
        if (_executingTextChangedEvent == null || _executingTextChangedEvent.IsCompleted)
        {
            _executingTextChangedEvent = thisAsIInputView.TextChangedEvent;
            _executingTextChangedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.TextChanged -= NativeControl_TextChanged;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is InputView<T> @inputview)
        {
            if (_executingTextChangedEvent != null && !_executingTextChangedEvent.IsCompleted)
            {
                @inputview._executingTextChangedEvent = _executingTextChangedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class InputViewExtensions
{
    /*
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    static object? SetCharacterSpacing(object inputView, RxAnimation animation)
        => ((IInputView)inputView).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    
    
    
    
    
    
    static object? SetFontSize(object inputView, RxAnimation animation)
        => ((IInputView)inputView).FontSize = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    */
    public static T Text<T>(this T inputView, string text)
        where T : IInputView
    {
        //inputView.Text = text;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextProperty, text);
        return inputView;
    }

    public static T Text<T>(this T inputView, Func<string> textFunc)
        where T : IInputView
    {
        //inputView.Text = new PropertyValue<string>(textFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextProperty, new PropertyValue<string>(textFunc));
        return inputView;
    }

    public static T Keyboard<T>(this T inputView, Microsoft.Maui.Keyboard keyboard)
        where T : IInputView
    {
        //inputView.Keyboard = keyboard;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.KeyboardProperty, keyboard);
        return inputView;
    }

    public static T Keyboard<T>(this T inputView, Func<Microsoft.Maui.Keyboard> keyboardFunc)
        where T : IInputView
    {
        //inputView.Keyboard = new PropertyValue<Microsoft.Maui.Keyboard>(keyboardFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.KeyboardProperty, new PropertyValue<Microsoft.Maui.Keyboard>(keyboardFunc));
        return inputView;
    }

    public static T IsSpellCheckEnabled<T>(this T inputView, bool isSpellCheckEnabled)
        where T : IInputView
    {
        //inputView.IsSpellCheckEnabled = isSpellCheckEnabled;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, isSpellCheckEnabled);
        return inputView;
    }

    public static T IsSpellCheckEnabled<T>(this T inputView, Func<bool> isSpellCheckEnabledFunc)
        where T : IInputView
    {
        //inputView.IsSpellCheckEnabled = new PropertyValue<bool>(isSpellCheckEnabledFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, new PropertyValue<bool>(isSpellCheckEnabledFunc));
        return inputView;
    }

    public static T IsTextPredictionEnabled<T>(this T inputView, bool isTextPredictionEnabled)
        where T : IInputView
    {
        //inputView.IsTextPredictionEnabled = isTextPredictionEnabled;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty, isTextPredictionEnabled);
        return inputView;
    }

    public static T IsTextPredictionEnabled<T>(this T inputView, Func<bool> isTextPredictionEnabledFunc)
        where T : IInputView
    {
        //inputView.IsTextPredictionEnabled = new PropertyValue<bool>(isTextPredictionEnabledFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty, new PropertyValue<bool>(isTextPredictionEnabledFunc));
        return inputView;
    }

    public static T MaxLength<T>(this T inputView, int maxLength)
        where T : IInputView
    {
        //inputView.MaxLength = maxLength;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.MaxLengthProperty, maxLength);
        return inputView;
    }

    public static T MaxLength<T>(this T inputView, Func<int> maxLengthFunc)
        where T : IInputView
    {
        //inputView.MaxLength = new PropertyValue<int>(maxLengthFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.MaxLengthProperty, new PropertyValue<int>(maxLengthFunc));
        return inputView;
    }

    public static T IsReadOnly<T>(this T inputView, bool isReadOnly)
        where T : IInputView
    {
        //inputView.IsReadOnly = isReadOnly;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, isReadOnly);
        return inputView;
    }

    public static T IsReadOnly<T>(this T inputView, Func<bool> isReadOnlyFunc)
        where T : IInputView
    {
        //inputView.IsReadOnly = new PropertyValue<bool>(isReadOnlyFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, new PropertyValue<bool>(isReadOnlyFunc));
        return inputView;
    }

    public static T Placeholder<T>(this T inputView, string placeholder)
        where T : IInputView
    {
        //inputView.Placeholder = placeholder;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.PlaceholderProperty, placeholder);
        return inputView;
    }

    public static T Placeholder<T>(this T inputView, Func<string> placeholderFunc)
        where T : IInputView
    {
        //inputView.Placeholder = new PropertyValue<string>(placeholderFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.PlaceholderProperty, new PropertyValue<string>(placeholderFunc));
        return inputView;
    }

    public static T PlaceholderColor<T>(this T inputView, Microsoft.Maui.Graphics.Color placeholderColor)
        where T : IInputView
    {
        //inputView.PlaceholderColor = placeholderColor;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, placeholderColor);
        return inputView;
    }

    public static T PlaceholderColor<T>(this T inputView, Func<Microsoft.Maui.Graphics.Color> placeholderColorFunc)
        where T : IInputView
    {
        //inputView.PlaceholderColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(placeholderColorFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(placeholderColorFunc));
        return inputView;
    }

    public static T TextColor<T>(this T inputView, Microsoft.Maui.Graphics.Color textColor)
        where T : IInputView
    {
        //inputView.TextColor = textColor;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextColorProperty, textColor);
        return inputView;
    }

    public static T TextColor<T>(this T inputView, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : IInputView
    {
        //inputView.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc));
        return inputView;
    }

    public static T CharacterSpacing<T>(this T inputView, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IInputView
    {
        //inputView.CharacterSpacing = characterSpacing;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, characterSpacing);
        inputView.AppendAnimatable(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return inputView;
    }

    public static T CharacterSpacing<T>(this T inputView, Func<double> characterSpacingFunc)
        where T : IInputView
    {
        //inputView.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc));
        return inputView;
    }

    public static T TextTransform<T>(this T inputView, Microsoft.Maui.TextTransform textTransform)
        where T : IInputView
    {
        //inputView.TextTransform = textTransform;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextTransformProperty, textTransform);
        return inputView;
    }

    public static T TextTransform<T>(this T inputView, Func<Microsoft.Maui.TextTransform> textTransformFunc)
        where T : IInputView
    {
        //inputView.TextTransform = new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.TextTransformProperty, new PropertyValue<Microsoft.Maui.TextTransform>(textTransformFunc));
        return inputView;
    }

    public static T CursorPosition<T>(this T inputView, int cursorPosition)
        where T : IInputView
    {
        //inputView.CursorPosition = cursorPosition;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.CursorPositionProperty, cursorPosition);
        return inputView;
    }

    public static T CursorPosition<T>(this T inputView, Func<int> cursorPositionFunc)
        where T : IInputView
    {
        //inputView.CursorPosition = new PropertyValue<int>(cursorPositionFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.CursorPositionProperty, new PropertyValue<int>(cursorPositionFunc));
        return inputView;
    }

    public static T SelectionLength<T>(this T inputView, int selectionLength)
        where T : IInputView
    {
        //inputView.SelectionLength = selectionLength;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.SelectionLengthProperty, selectionLength);
        return inputView;
    }

    public static T SelectionLength<T>(this T inputView, Func<int> selectionLengthFunc)
        where T : IInputView
    {
        //inputView.SelectionLength = new PropertyValue<int>(selectionLengthFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.SelectionLengthProperty, new PropertyValue<int>(selectionLengthFunc));
        return inputView;
    }

    public static T FontFamily<T>(this T inputView, string fontFamily)
        where T : IInputView
    {
        //inputView.FontFamily = fontFamily;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontFamilyProperty, fontFamily);
        return inputView;
    }

    public static T FontFamily<T>(this T inputView, Func<string> fontFamilyFunc)
        where T : IInputView
    {
        //inputView.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc));
        return inputView;
    }

    public static T FontSize<T>(this T inputView, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : IInputView
    {
        //inputView.FontSize = fontSize;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontSizeProperty, fontSize);
        inputView.AppendAnimatable(Microsoft.Maui.Controls.InputView.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return inputView;
    }

    public static T FontSize<T>(this T inputView, Func<double> fontSizeFunc)
        where T : IInputView
    {
        //inputView.FontSize = new PropertyValue<double>(fontSizeFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontSizeProperty, new PropertyValue<double>(fontSizeFunc));
        return inputView;
    }

    public static T FontAttributes<T>(this T inputView, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : IInputView
    {
        //inputView.FontAttributes = fontAttributes;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontAttributesProperty, fontAttributes);
        return inputView;
    }

    public static T FontAttributes<T>(this T inputView, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : IInputView
    {
        //inputView.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc));
        return inputView;
    }

    public static T FontAutoScalingEnabled<T>(this T inputView, bool fontAutoScalingEnabled)
        where T : IInputView
    {
        //inputView.FontAutoScalingEnabled = fontAutoScalingEnabled;
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return inputView;
    }

    public static T FontAutoScalingEnabled<T>(this T inputView, Func<bool> fontAutoScalingEnabledFunc)
        where T : IInputView
    {
        //inputView.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        inputView.SetProperty(Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc));
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Action? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new SyncEventCommand<TextChangedEventArgs>(execute: textChangedAction);
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Action<TextChangedEventArgs>? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new SyncEventCommand<TextChangedEventArgs>(executeWithArgs: textChangedAction);
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Action<object?, TextChangedEventArgs>? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new SyncEventCommand<TextChangedEventArgs>(executeWithFullArgs: textChangedAction);
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Func<Task>? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new AsyncEventCommand<TextChangedEventArgs>(execute: textChangedAction);
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Func<TextChangedEventArgs, Task>? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new AsyncEventCommand<TextChangedEventArgs>(executeWithArgs: textChangedAction);
        return inputView;
    }

    public static T OnTextChanged<T>(this T inputView, Func<object?, TextChangedEventArgs, Task>? textChangedAction)
        where T : IInputView
    {
        inputView.TextChangedEvent = new AsyncEventCommand<TextChangedEventArgs>(executeWithFullArgs: textChangedAction);
        return inputView;
    }
}

public static partial class InputViewStyles
{
    public static Action<IInputView>? Default { get; set; }
    public static Dictionary<string, Action<IInputView>> Themes { get; } = [];
}