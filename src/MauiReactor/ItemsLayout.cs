// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IItemsLayout : IVisualNodeWithNativeControl
{
}

public abstract partial class ItemsLayout<T> : VisualNode<T>, IItemsLayout where T : Microsoft.Maui.Controls.ItemsLayout, new()
{
    protected ItemsLayout()
    {
        ItemsLayoutStyles.Default?.Invoke(this);
    }

    protected ItemsLayout(Action<T?> componentRefAction) : base(componentRefAction)
    {
        ItemsLayoutStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ItemsLayoutStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class ItemsLayoutExtensions
{
    /*
    
    
    
    
    */
    public static T SnapPointsAlignment<T>(this T itemsLayout, Microsoft.Maui.Controls.SnapPointsAlignment snapPointsAlignment)
        where T : IItemsLayout
    {
        //itemsLayout.SnapPointsAlignment = snapPointsAlignment;
        itemsLayout.SetProperty(Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty, snapPointsAlignment);
        return itemsLayout;
    }

    public static T SnapPointsAlignment<T>(this T itemsLayout, Func<Microsoft.Maui.Controls.SnapPointsAlignment> snapPointsAlignmentFunc)
        where T : IItemsLayout
    {
        //itemsLayout.SnapPointsAlignment = new PropertyValue<Microsoft.Maui.Controls.SnapPointsAlignment>(snapPointsAlignmentFunc);
        itemsLayout.SetProperty(Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty, new PropertyValue<Microsoft.Maui.Controls.SnapPointsAlignment>(snapPointsAlignmentFunc));
        return itemsLayout;
    }

    public static T SnapPointsType<T>(this T itemsLayout, Microsoft.Maui.Controls.SnapPointsType snapPointsType)
        where T : IItemsLayout
    {
        //itemsLayout.SnapPointsType = snapPointsType;
        itemsLayout.SetProperty(Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty, snapPointsType);
        return itemsLayout;
    }

    public static T SnapPointsType<T>(this T itemsLayout, Func<Microsoft.Maui.Controls.SnapPointsType> snapPointsTypeFunc)
        where T : IItemsLayout
    {
        //itemsLayout.SnapPointsType = new PropertyValue<Microsoft.Maui.Controls.SnapPointsType>(snapPointsTypeFunc);
        itemsLayout.SetProperty(Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty, new PropertyValue<Microsoft.Maui.Controls.SnapPointsType>(snapPointsTypeFunc));
        return itemsLayout;
    }
}

public static partial class ItemsLayoutStyles
{
    public static Action<IItemsLayout>? Default { get; set; }
    public static Dictionary<string, Action<IItemsLayout>> Themes { get; } = [];
}