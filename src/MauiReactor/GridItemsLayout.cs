// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IGridItemsLayout : IItemsLayout
{
    object? Span { get; set; }

    object? VerticalItemSpacing { get; set; }

    object? HorizontalItemSpacing { get; set; }
}

public abstract partial class GridItemsLayout<T> : ItemsLayout<T>, IGridItemsLayout where T : Microsoft.Maui.Controls.GridItemsLayout, new()
{
    protected GridItemsLayout()
    {
    }

    protected GridItemsLayout(Action<T?> componentRefAction) : base(componentRefAction)
    {
    }

    object? IGridItemsLayout.Span { get; set; }

    object? IGridItemsLayout.VerticalItemSpacing { get; set; }

    object? IGridItemsLayout.HorizontalItemSpacing { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsIGridItemsLayout = (IGridItemsLayout)this;
        thisAsIGridItemsLayout.Span = null;
        thisAsIGridItemsLayout.VerticalItemSpacing = null;
        thisAsIGridItemsLayout.HorizontalItemSpacing = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIGridItemsLayout = (IGridItemsLayout)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.GridItemsLayout.SpanProperty, thisAsIGridItemsLayout.Span);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, thisAsIGridItemsLayout.VerticalItemSpacing);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, thisAsIGridItemsLayout.HorizontalItemSpacing);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsIGridItemsLayout = (IGridItemsLayout)this;
        AnimateProperty(Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, thisAsIGridItemsLayout.VerticalItemSpacing);
        AnimateProperty(Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, thisAsIGridItemsLayout.HorizontalItemSpacing);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
}

public static partial class GridItemsLayoutExtensions
{
    static void SetVerticalItemSpacing(object gridItemsLayout, RxAnimation animation) => ((IGridItemsLayout)gridItemsLayout).VerticalItemSpacing = ((RxDoubleAnimation)animation).CurrentValue();
    static void SetHorizontalItemSpacing(object gridItemsLayout, RxAnimation animation) => ((IGridItemsLayout)gridItemsLayout).HorizontalItemSpacing = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Span<T>(this T gridItemsLayout, int span)
        where T : IGridItemsLayout
    {
        gridItemsLayout.Span = span;
        return gridItemsLayout;
    }

    public static T Span<T>(this T gridItemsLayout, Func<int> spanFunc)
        where T : IGridItemsLayout
    {
        gridItemsLayout.Span = new PropertyValue<int>(spanFunc);
        return gridItemsLayout;
    }

    public static T VerticalItemSpacing<T>(this T gridItemsLayout, double verticalItemSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGridItemsLayout
    {
        gridItemsLayout.VerticalItemSpacing = verticalItemSpacing;
        gridItemsLayout.AppendAnimatable(Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, customAnimation ?? new RxDoubleAnimation(verticalItemSpacing), SetVerticalItemSpacing);
        return gridItemsLayout;
    }

    public static T VerticalItemSpacing<T>(this T gridItemsLayout, Func<double> verticalItemSpacingFunc)
        where T : IGridItemsLayout
    {
        gridItemsLayout.VerticalItemSpacing = new PropertyValue<double>(verticalItemSpacingFunc);
        return gridItemsLayout;
    }

    public static T HorizontalItemSpacing<T>(this T gridItemsLayout, double horizontalItemSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGridItemsLayout
    {
        gridItemsLayout.HorizontalItemSpacing = horizontalItemSpacing;
        gridItemsLayout.AppendAnimatable(Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, customAnimation ?? new RxDoubleAnimation(horizontalItemSpacing), SetHorizontalItemSpacing);
        return gridItemsLayout;
    }

    public static T HorizontalItemSpacing<T>(this T gridItemsLayout, Func<double> horizontalItemSpacingFunc)
        where T : IGridItemsLayout
    {
        gridItemsLayout.HorizontalItemSpacing = new PropertyValue<double>(horizontalItemSpacingFunc);
        return gridItemsLayout;
    }
}