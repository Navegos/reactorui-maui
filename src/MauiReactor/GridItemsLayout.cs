// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IGridItemsLayout : IItemsLayout
{
}

public abstract partial class GridItemsLayout<T> : ItemsLayout<T>, IGridItemsLayout where T : Microsoft.Maui.Controls.GridItemsLayout, new()
{
    protected GridItemsLayout()
    {
        GridItemsLayoutStyles.Default?.Invoke(this);
    }

    protected GridItemsLayout(Action<T?> componentRefAction) : base(componentRefAction)
    {
        GridItemsLayoutStyles.Default?.Invoke(this);
    }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && GridItemsLayoutStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class GridItemsLayoutExtensions
{
    /*
    
    
    
    
    static object? SetVerticalItemSpacing(object gridItemsLayout, RxAnimation animation)
        => ((IGridItemsLayout)gridItemsLayout).VerticalItemSpacing = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    static object? SetHorizontalItemSpacing(object gridItemsLayout, RxAnimation animation)
        => ((IGridItemsLayout)gridItemsLayout).HorizontalItemSpacing = ((RxDoubleAnimation)animation).CurrentValue();

    
    */
    public static T Span<T>(this T gridItemsLayout, int span)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.Span = span;
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.SpanProperty, span);
        return gridItemsLayout;
    }

    public static T Span<T>(this T gridItemsLayout, Func<int> spanFunc)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.Span = new PropertyValue<int>(spanFunc);
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.SpanProperty, new PropertyValue<int>(spanFunc));
        return gridItemsLayout;
    }

    public static T VerticalItemSpacing<T>(this T gridItemsLayout, double verticalItemSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.VerticalItemSpacing = verticalItemSpacing;
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, verticalItemSpacing);
        gridItemsLayout.AppendAnimatable(Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, customAnimation ?? new RxDoubleAnimation(verticalItemSpacing));
        return gridItemsLayout;
    }

    public static T VerticalItemSpacing<T>(this T gridItemsLayout, Func<double> verticalItemSpacingFunc)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.VerticalItemSpacing = new PropertyValue<double>(verticalItemSpacingFunc);
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.VerticalItemSpacingProperty, new PropertyValue<double>(verticalItemSpacingFunc));
        return gridItemsLayout;
    }

    public static T HorizontalItemSpacing<T>(this T gridItemsLayout, double horizontalItemSpacing, RxDoubleAnimation? customAnimation = null)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.HorizontalItemSpacing = horizontalItemSpacing;
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, horizontalItemSpacing);
        gridItemsLayout.AppendAnimatable(Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, customAnimation ?? new RxDoubleAnimation(horizontalItemSpacing));
        return gridItemsLayout;
    }

    public static T HorizontalItemSpacing<T>(this T gridItemsLayout, Func<double> horizontalItemSpacingFunc)
        where T : IGridItemsLayout
    {
        //gridItemsLayout.HorizontalItemSpacing = new PropertyValue<double>(horizontalItemSpacingFunc);
        gridItemsLayout.SetProperty(Microsoft.Maui.Controls.GridItemsLayout.HorizontalItemSpacingProperty, new PropertyValue<double>(horizontalItemSpacingFunc));
        return gridItemsLayout;
    }
}

public static partial class GridItemsLayoutStyles
{
    public static Action<IGridItemsLayout>? Default { get; set; }
    public static Dictionary<string, Action<IGridItemsLayout>> Themes { get; } = [];
}