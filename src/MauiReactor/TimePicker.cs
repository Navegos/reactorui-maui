// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ITimePicker : IView
{
    EventCommand<TimeChangedEventArgs>? TimeSelectedEvent { get; set; }
}

public partial class TimePicker<T> : View<T>, ITimePicker where T : Microsoft.Maui.Controls.TimePicker, new()
{
    public TimePicker()
    {
        TimePickerStyles.Default?.Invoke(this);
    }

    public TimePicker(Action<T?> componentRefAction) : base(componentRefAction)
    {
        TimePickerStyles.Default?.Invoke(this);
    }

    EventCommand<TimeChangedEventArgs>? ITimePicker.TimeSelectedEvent { get; set; }

    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && TimePickerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<TimeChangedEventArgs>? _executingTimeSelectedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsITimePicker = (ITimePicker)this;
        if (thisAsITimePicker.TimeSelectedEvent != null)
        {
            NativeControl.TimeSelected += NativeControl_TimeSelected;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_TimeSelected(object? sender, TimeChangedEventArgs e)
    {
        var thisAsITimePicker = (ITimePicker)this;
        if (_executingTimeSelectedEvent == null || _executingTimeSelectedEvent.IsCompleted)
        {
            _executingTimeSelectedEvent = thisAsITimePicker.TimeSelectedEvent;
            _executingTimeSelectedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.TimeSelected -= NativeControl_TimeSelected;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is TimePicker<T> @timepicker)
        {
            if (_executingTimeSelectedEvent != null && !_executingTimeSelectedEvent.IsCompleted)
            {
                @timepicker._executingTimeSelectedEvent = _executingTimeSelectedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class TimePicker : TimePicker<Microsoft.Maui.Controls.TimePicker>
{
    public TimePicker()
    {
    }

    public TimePicker(Action<Microsoft.Maui.Controls.TimePicker?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class TimePickerExtensions
{
    /*
    
    
    
    
    
    
    static object? SetCharacterSpacing(object timePicker, RxAnimation animation)
        => ((ITimePicker)timePicker).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    
    
    static object? SetFontSize(object timePicker, RxAnimation animation)
        => ((ITimePicker)timePicker).FontSize = ((RxDoubleAnimation)animation).CurrentValue();

    
    
    
    
    
    */
    public static T Format<T>(this T timePicker, string format)
        where T : ITimePicker
    {
        //timePicker.Format = format;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FormatProperty, format);
        return timePicker;
    }

    public static T Format<T>(this T timePicker, Func<string> formatFunc)
        where T : ITimePicker
    {
        //timePicker.Format = new PropertyValue<string>(formatFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FormatProperty, new PropertyValue<string>(formatFunc));
        return timePicker;
    }

    public static T TextColor<T>(this T timePicker, Microsoft.Maui.Graphics.Color textColor)
        where T : ITimePicker
    {
        //timePicker.TextColor = textColor;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.TextColorProperty, textColor);
        return timePicker;
    }

    public static T TextColor<T>(this T timePicker, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : ITimePicker
    {
        //timePicker.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.TextColorProperty, new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc));
        return timePicker;
    }

    public static T CharacterSpacing<T>(this T timePicker, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : ITimePicker
    {
        //timePicker.CharacterSpacing = characterSpacing;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, characterSpacing);
        timePicker.AppendAnimatable(Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing));
        return timePicker;
    }

    public static T CharacterSpacing<T>(this T timePicker, Func<double> characterSpacingFunc)
        where T : ITimePicker
    {
        //timePicker.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, new PropertyValue<double>(characterSpacingFunc));
        return timePicker;
    }

    public static T Time<T>(this T timePicker, System.TimeSpan time)
        where T : ITimePicker
    {
        //timePicker.Time = time;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.TimeProperty, time);
        return timePicker;
    }

    public static T Time<T>(this T timePicker, Func<System.TimeSpan> timeFunc)
        where T : ITimePicker
    {
        //timePicker.Time = new PropertyValue<System.TimeSpan>(timeFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.TimeProperty, new PropertyValue<System.TimeSpan>(timeFunc));
        return timePicker;
    }

    public static T FontFamily<T>(this T timePicker, string fontFamily)
        where T : ITimePicker
    {
        //timePicker.FontFamily = fontFamily;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontFamilyProperty, fontFamily);
        return timePicker;
    }

    public static T FontFamily<T>(this T timePicker, Func<string> fontFamilyFunc)
        where T : ITimePicker
    {
        //timePicker.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontFamilyProperty, new PropertyValue<string>(fontFamilyFunc));
        return timePicker;
    }

    public static T FontSize<T>(this T timePicker, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : ITimePicker
    {
        //timePicker.FontSize = fontSize;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontSizeProperty, fontSize);
        timePicker.AppendAnimatable(Microsoft.Maui.Controls.TimePicker.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize));
        return timePicker;
    }

    public static T FontSize<T>(this T timePicker, Func<double> fontSizeFunc)
        where T : ITimePicker
    {
        //timePicker.FontSize = new PropertyValue<double>(fontSizeFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontSizeProperty, new PropertyValue<double>(fontSizeFunc));
        return timePicker;
    }

    public static T FontAttributes<T>(this T timePicker, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : ITimePicker
    {
        //timePicker.FontAttributes = fontAttributes;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontAttributesProperty, fontAttributes);
        return timePicker;
    }

    public static T FontAttributes<T>(this T timePicker, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : ITimePicker
    {
        //timePicker.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontAttributesProperty, new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc));
        return timePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T timePicker, bool fontAutoScalingEnabled)
        where T : ITimePicker
    {
        //timePicker.FontAutoScalingEnabled = fontAutoScalingEnabled;
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return timePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T timePicker, Func<bool> fontAutoScalingEnabledFunc)
        where T : ITimePicker
    {
        //timePicker.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        timePicker.SetProperty(Microsoft.Maui.Controls.TimePicker.FontAutoScalingEnabledProperty, new PropertyValue<bool>(fontAutoScalingEnabledFunc));
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Action? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new SyncEventCommand<TimeChangedEventArgs>(execute: timeSelectedAction);
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Action<TimeChangedEventArgs>? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new SyncEventCommand<TimeChangedEventArgs>(executeWithArgs: timeSelectedAction);
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Action<object?, TimeChangedEventArgs>? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new SyncEventCommand<TimeChangedEventArgs>(executeWithFullArgs: timeSelectedAction);
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Func<Task>? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new AsyncEventCommand<TimeChangedEventArgs>(execute: timeSelectedAction);
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Func<TimeChangedEventArgs, Task>? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new AsyncEventCommand<TimeChangedEventArgs>(executeWithArgs: timeSelectedAction);
        return timePicker;
    }

    public static T OnTimeSelected<T>(this T timePicker, Func<object?, TimeChangedEventArgs, Task>? timeSelectedAction)
        where T : ITimePicker
    {
        timePicker.TimeSelectedEvent = new AsyncEventCommand<TimeChangedEventArgs>(executeWithFullArgs: timeSelectedAction);
        return timePicker;
    }
}

public static partial class TimePickerStyles
{
    public static Action<ITimePicker>? Default { get; set; }
    public static Dictionary<string, Action<ITimePicker>> Themes { get; } = [];
}