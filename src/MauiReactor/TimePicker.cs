// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface ITimePicker : IView
{
    object? Format { get; set; }

    object? TextColor { get; set; }

    object? CharacterSpacing { get; set; }

    object? Time { get; set; }

    object? FontFamily { get; set; }

    object? FontSize { get; set; }

    object? FontAttributes { get; set; }

    object? FontAutoScalingEnabled { get; set; }
}

public partial class TimePicker<T> : View<T>, ITimePicker where T : Microsoft.Maui.Controls.TimePicker, new()
{
    public TimePicker()
    {
        TimePickerStyles.Default?.Invoke(this);
    }

    public TimePicker(Action<T?> componentRefAction) : base(componentRefAction)
    {
        TimePickerStyles.Default?.Invoke(this);
    }

    object? ITimePicker.Format { get; set; }

    object? ITimePicker.TextColor { get; set; }

    object? ITimePicker.CharacterSpacing { get; set; }

    object? ITimePicker.Time { get; set; }

    object? ITimePicker.FontFamily { get; set; }

    object? ITimePicker.FontSize { get; set; }

    object? ITimePicker.FontAttributes { get; set; }

    object? ITimePicker.FontAutoScalingEnabled { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsITimePicker = (ITimePicker)this;
        thisAsITimePicker.Format = null;
        thisAsITimePicker.TextColor = null;
        thisAsITimePicker.CharacterSpacing = null;
        thisAsITimePicker.Time = null;
        thisAsITimePicker.FontFamily = null;
        thisAsITimePicker.FontSize = null;
        thisAsITimePicker.FontAttributes = null;
        thisAsITimePicker.FontAutoScalingEnabled = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsITimePicker = (ITimePicker)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.FormatProperty, thisAsITimePicker.Format);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.TextColorProperty, thisAsITimePicker.TextColor);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, thisAsITimePicker.CharacterSpacing);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.TimeProperty, thisAsITimePicker.Time);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.FontFamilyProperty, thisAsITimePicker.FontFamily);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.FontSizeProperty, thisAsITimePicker.FontSize);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.FontAttributesProperty, thisAsITimePicker.FontAttributes);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.TimePicker.FontAutoScalingEnabledProperty, thisAsITimePicker.FontAutoScalingEnabled);
        base.OnUpdate();
        OnEndUpdate();
    }

    protected override void OnAnimate()
    {
        OnBeginAnimate();
        var thisAsITimePicker = (ITimePicker)this;
        AnimateProperty(Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, thisAsITimePicker.CharacterSpacing);
        AnimateProperty(Microsoft.Maui.Controls.TimePicker.FontSizeProperty, thisAsITimePicker.FontSize);
        base.OnAnimate();
        OnEndAnimate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && TimePickerStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public partial class TimePicker : TimePicker<Microsoft.Maui.Controls.TimePicker>
{
    public TimePicker()
    {
    }

    public TimePicker(Action<Microsoft.Maui.Controls.TimePicker?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class TimePickerExtensions
{
    static object? SetCharacterSpacing(object timePicker, RxAnimation animation) => ((ITimePicker)timePicker).CharacterSpacing = ((RxDoubleAnimation)animation).CurrentValue();
    static object? SetFontSize(object timePicker, RxAnimation animation) => ((ITimePicker)timePicker).FontSize = ((RxDoubleAnimation)animation).CurrentValue();
    public static T Format<T>(this T timePicker, string format)
        where T : ITimePicker
    {
        timePicker.Format = format;
        return timePicker;
    }

    public static T Format<T>(this T timePicker, Func<string> formatFunc)
        where T : ITimePicker
    {
        timePicker.Format = new PropertyValue<string>(formatFunc);
        return timePicker;
    }

    public static T TextColor<T>(this T timePicker, Microsoft.Maui.Graphics.Color textColor)
        where T : ITimePicker
    {
        timePicker.TextColor = textColor;
        return timePicker;
    }

    public static T TextColor<T>(this T timePicker, Func<Microsoft.Maui.Graphics.Color> textColorFunc)
        where T : ITimePicker
    {
        timePicker.TextColor = new PropertyValue<Microsoft.Maui.Graphics.Color>(textColorFunc);
        return timePicker;
    }

    public static T CharacterSpacing<T>(this T timePicker, double characterSpacing, RxDoubleAnimation? customAnimation = null)
        where T : ITimePicker
    {
        timePicker.CharacterSpacing = characterSpacing;
        timePicker.AppendAnimatable(Microsoft.Maui.Controls.TimePicker.CharacterSpacingProperty, customAnimation ?? new RxDoubleAnimation(characterSpacing), SetCharacterSpacing);
        return timePicker;
    }

    public static T CharacterSpacing<T>(this T timePicker, Func<double> characterSpacingFunc)
        where T : ITimePicker
    {
        timePicker.CharacterSpacing = new PropertyValue<double>(characterSpacingFunc);
        return timePicker;
    }

    public static T Time<T>(this T timePicker, System.TimeSpan time)
        where T : ITimePicker
    {
        timePicker.Time = time;
        return timePicker;
    }

    public static T Time<T>(this T timePicker, Func<System.TimeSpan> timeFunc)
        where T : ITimePicker
    {
        timePicker.Time = new PropertyValue<System.TimeSpan>(timeFunc);
        return timePicker;
    }

    public static T FontFamily<T>(this T timePicker, string fontFamily)
        where T : ITimePicker
    {
        timePicker.FontFamily = fontFamily;
        return timePicker;
    }

    public static T FontFamily<T>(this T timePicker, Func<string> fontFamilyFunc)
        where T : ITimePicker
    {
        timePicker.FontFamily = new PropertyValue<string>(fontFamilyFunc);
        return timePicker;
    }

    public static T FontSize<T>(this T timePicker, double fontSize, RxDoubleAnimation? customAnimation = null)
        where T : ITimePicker
    {
        timePicker.FontSize = fontSize;
        timePicker.AppendAnimatable(Microsoft.Maui.Controls.TimePicker.FontSizeProperty, customAnimation ?? new RxDoubleAnimation(fontSize), SetFontSize);
        return timePicker;
    }

    public static T FontSize<T>(this T timePicker, Func<double> fontSizeFunc)
        where T : ITimePicker
    {
        timePicker.FontSize = new PropertyValue<double>(fontSizeFunc);
        return timePicker;
    }

    public static T FontAttributes<T>(this T timePicker, Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : ITimePicker
    {
        timePicker.FontAttributes = fontAttributes;
        return timePicker;
    }

    public static T FontAttributes<T>(this T timePicker, Func<Microsoft.Maui.Controls.FontAttributes> fontAttributesFunc)
        where T : ITimePicker
    {
        timePicker.FontAttributes = new PropertyValue<Microsoft.Maui.Controls.FontAttributes>(fontAttributesFunc);
        return timePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T timePicker, bool fontAutoScalingEnabled)
        where T : ITimePicker
    {
        timePicker.FontAutoScalingEnabled = fontAutoScalingEnabled;
        return timePicker;
    }

    public static T FontAutoScalingEnabled<T>(this T timePicker, Func<bool> fontAutoScalingEnabledFunc)
        where T : ITimePicker
    {
        timePicker.FontAutoScalingEnabled = new PropertyValue<bool>(fontAutoScalingEnabledFunc);
        return timePicker;
    }
}

public static partial class TimePickerStyles
{
    public static Action<ITimePicker>? Default { get; set; }
    public static Dictionary<string, Action<ITimePicker>> Themes { get; } = [];
}