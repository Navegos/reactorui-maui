// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IPage : IVisualElement
{
    object? BackgroundImageSource { get; set; }

    object? IsBusy { get; set; }

    object? Padding { get; set; }

    object? Title { get; set; }

    object? IconImageSource { get; set; }

    EventCommand<EventArgs>? LayoutChangedEvent { get; set; }

    EventCommand<EventArgs>? AppearingEvent { get; set; }

    EventCommand<EventArgs>? DisappearingEvent { get; set; }

    EventCommand<NavigatedToEventArgs>? NavigatedToEvent { get; set; }

    EventCommand<NavigatingFromEventArgs>? NavigatingFromEvent { get; set; }

    EventCommand<NavigatedFromEventArgs>? NavigatedFromEvent { get; set; }
}

public partial class Page<T> : VisualElement<T>, IPage where T : Microsoft.Maui.Controls.Page, new()
{
    public Page()
    {
        PageStyles.Default?.Invoke(this);
    }

    public Page(Action<T?> componentRefAction) : base(componentRefAction)
    {
        PageStyles.Default?.Invoke(this);
    }

    object? IPage.BackgroundImageSource { get; set; }

    object? IPage.IsBusy { get; set; }

    object? IPage.Padding { get; set; }

    object? IPage.Title { get; set; }

    object? IPage.IconImageSource { get; set; }

    EventCommand<EventArgs>? IPage.LayoutChangedEvent { get; set; }

    EventCommand<EventArgs>? IPage.AppearingEvent { get; set; }

    EventCommand<EventArgs>? IPage.DisappearingEvent { get; set; }

    EventCommand<NavigatedToEventArgs>? IPage.NavigatedToEvent { get; set; }

    EventCommand<NavigatingFromEventArgs>? IPage.NavigatingFromEvent { get; set; }

    EventCommand<NavigatedFromEventArgs>? IPage.NavigatedFromEvent { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIPage = (IPage)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Page.BackgroundImageSourceProperty, thisAsIPage.BackgroundImageSource);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Page.IsBusyProperty, thisAsIPage.IsBusy);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Page.PaddingProperty, thisAsIPage.Padding);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Page.TitleProperty, thisAsIPage.Title);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.Page.IconImageSourceProperty, thisAsIPage.IconImageSource);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && PageStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<EventArgs>? _executingLayoutChangedEvent;
    private EventCommand<EventArgs>? _executingAppearingEvent;
    private EventCommand<EventArgs>? _executingDisappearingEvent;
    private EventCommand<NavigatedToEventArgs>? _executingNavigatedToEvent;
    private EventCommand<NavigatingFromEventArgs>? _executingNavigatingFromEvent;
    private EventCommand<NavigatedFromEventArgs>? _executingNavigatedFromEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIPage = (IPage)this;
        if (thisAsIPage.LayoutChangedEvent != null)
        {
            NativeControl.LayoutChanged += NativeControl_LayoutChanged;
        }

        if (thisAsIPage.AppearingEvent != null)
        {
            NativeControl.Appearing += NativeControl_Appearing;
        }

        if (thisAsIPage.DisappearingEvent != null)
        {
            NativeControl.Disappearing += NativeControl_Disappearing;
        }

        if (thisAsIPage.NavigatedToEvent != null)
        {
            NativeControl.NavigatedTo += NativeControl_NavigatedTo;
        }

        if (thisAsIPage.NavigatingFromEvent != null)
        {
            NativeControl.NavigatingFrom += NativeControl_NavigatingFrom;
        }

        if (thisAsIPage.NavigatedFromEvent != null)
        {
            NativeControl.NavigatedFrom += NativeControl_NavigatedFrom;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_LayoutChanged(object? sender, EventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingLayoutChangedEvent == null || _executingLayoutChangedEvent.IsCompleted)
        {
            _executingLayoutChangedEvent = thisAsIPage.LayoutChangedEvent;
            _executingLayoutChangedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Appearing(object? sender, EventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingAppearingEvent == null || _executingAppearingEvent.IsCompleted)
        {
            _executingAppearingEvent = thisAsIPage.AppearingEvent;
            _executingAppearingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Disappearing(object? sender, EventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingDisappearingEvent == null || _executingDisappearingEvent.IsCompleted)
        {
            _executingDisappearingEvent = thisAsIPage.DisappearingEvent;
            _executingDisappearingEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_NavigatedTo(object? sender, NavigatedToEventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingNavigatedToEvent == null || _executingNavigatedToEvent.IsCompleted)
        {
            _executingNavigatedToEvent = thisAsIPage.NavigatedToEvent;
            _executingNavigatedToEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_NavigatingFrom(object? sender, NavigatingFromEventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingNavigatingFromEvent == null || _executingNavigatingFromEvent.IsCompleted)
        {
            _executingNavigatingFromEvent = thisAsIPage.NavigatingFromEvent;
            _executingNavigatingFromEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_NavigatedFrom(object? sender, NavigatedFromEventArgs e)
    {
        var thisAsIPage = (IPage)this;
        if (_executingNavigatedFromEvent == null || _executingNavigatedFromEvent.IsCompleted)
        {
            _executingNavigatedFromEvent = thisAsIPage.NavigatedFromEvent;
            _executingNavigatedFromEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.LayoutChanged -= NativeControl_LayoutChanged;
            NativeControl.Appearing -= NativeControl_Appearing;
            NativeControl.Disappearing -= NativeControl_Disappearing;
            NativeControl.NavigatedTo -= NativeControl_NavigatedTo;
            NativeControl.NavigatingFrom -= NativeControl_NavigatingFrom;
            NativeControl.NavigatedFrom -= NativeControl_NavigatedFrom;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is Page<T> @page)
        {
            if (_executingLayoutChangedEvent != null && !_executingLayoutChangedEvent.IsCompleted)
            {
                @page._executingLayoutChangedEvent = _executingLayoutChangedEvent;
            }

            if (_executingAppearingEvent != null && !_executingAppearingEvent.IsCompleted)
            {
                @page._executingAppearingEvent = _executingAppearingEvent;
            }

            if (_executingDisappearingEvent != null && !_executingDisappearingEvent.IsCompleted)
            {
                @page._executingDisappearingEvent = _executingDisappearingEvent;
            }

            if (_executingNavigatedToEvent != null && !_executingNavigatedToEvent.IsCompleted)
            {
                @page._executingNavigatedToEvent = _executingNavigatedToEvent;
            }

            if (_executingNavigatingFromEvent != null && !_executingNavigatingFromEvent.IsCompleted)
            {
                @page._executingNavigatingFromEvent = _executingNavigatingFromEvent;
            }

            if (_executingNavigatedFromEvent != null && !_executingNavigatedFromEvent.IsCompleted)
            {
                @page._executingNavigatedFromEvent = _executingNavigatedFromEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public partial class Page : Page<Microsoft.Maui.Controls.Page>
{
    public Page()
    {
    }

    public Page(Action<Microsoft.Maui.Controls.Page?> componentRefAction) : base(componentRefAction)
    {
    }
}

public static partial class PageExtensions
{
    static object? SetPadding(object page, RxAnimation animation) => ((IPage)page).Padding = ((RxThicknessAnimation)animation).CurrentValue();
    public static T BackgroundImageSource<T>(this T page, Microsoft.Maui.Controls.ImageSource backgroundImageSource)
        where T : IPage
    {
        page.BackgroundImageSource = backgroundImageSource;
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, Func<Microsoft.Maui.Controls.ImageSource> backgroundImageSourceFunc)
        where T : IPage
    {
        page.BackgroundImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(backgroundImageSourceFunc);
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, string file)
        where T : IPage
    {
        page.BackgroundImageSource = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, Func<string> action)
        where T : IPage
    {
        page.BackgroundImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action()));
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, string resourceName, Assembly sourceAssembly)
        where T : IPage
    {
        page.BackgroundImageSource = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, Uri imageUri)
        where T : IPage
    {
        page.BackgroundImageSource = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IPage
    {
        page.BackgroundImageSource = new UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        return page;
    }

    public static T BackgroundImageSource<T>(this T page, Func<Stream> imageStream)
        where T : IPage
    {
        page.BackgroundImageSource = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        return page;
    }

    public static T IsBusy<T>(this T page, bool isBusy)
        where T : IPage
    {
        page.IsBusy = isBusy;
        return page;
    }

    public static T IsBusy<T>(this T page, Func<bool> isBusyFunc)
        where T : IPage
    {
        page.IsBusy = new PropertyValue<bool>(isBusyFunc);
        return page;
    }

    public static T Padding<T>(this T page, Microsoft.Maui.Thickness padding, RxThicknessAnimation? customAnimation = null)
        where T : IPage
    {
        page.Padding = padding;
        page.AppendAnimatable(Microsoft.Maui.Controls.Page.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(padding), SetPadding);
        return page;
    }

    public static T Padding<T>(this T page, Func<Microsoft.Maui.Thickness> paddingFunc)
        where T : IPage
    {
        page.Padding = new PropertyValue<Microsoft.Maui.Thickness>(paddingFunc);
        return page;
    }

    public static T Padding<T>(this T page, double leftRight, double topBottom, RxThicknessAnimation? customAnimation = null)
        where T : IPage
    {
        page.Padding = new Thickness(leftRight, topBottom);
        page.AppendAnimatable(Microsoft.Maui.Controls.Page.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(leftRight, topBottom)), SetPadding);
        return page;
    }

    public static T Padding<T>(this T page, double uniformSize, RxThicknessAnimation? customAnimation = null)
        where T : IPage
    {
        page.Padding = new Thickness(uniformSize);
        page.AppendAnimatable(Microsoft.Maui.Controls.Page.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(uniformSize)), SetPadding);
        return page;
    }

    public static T Padding<T>(this T page, double left, double top, double right, double bottom, RxThicknessAnimation? customAnimation = null)
        where T : IPage
    {
        page.Padding = new Thickness(left, top, right, bottom);
        page.AppendAnimatable(Microsoft.Maui.Controls.Page.PaddingProperty, customAnimation ?? new RxSimpleThicknessAnimation(new Thickness(left, top, right, bottom)), SetPadding);
        return page;
    }

    public static T Title<T>(this T page, string title)
        where T : IPage
    {
        page.Title = title;
        return page;
    }

    public static T Title<T>(this T page, Func<string> titleFunc)
        where T : IPage
    {
        page.Title = new PropertyValue<string>(titleFunc);
        return page;
    }

    public static T IconImageSource<T>(this T page, Microsoft.Maui.Controls.ImageSource iconImageSource)
        where T : IPage
    {
        page.IconImageSource = iconImageSource;
        return page;
    }

    public static T IconImageSource<T>(this T page, Func<Microsoft.Maui.Controls.ImageSource> iconImageSourceFunc)
        where T : IPage
    {
        page.IconImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(iconImageSourceFunc);
        return page;
    }

    public static T IconImageSource<T>(this T page, string file)
        where T : IPage
    {
        page.IconImageSource = Microsoft.Maui.Controls.ImageSource.FromFile(file);
        return page;
    }

    public static T IconImageSource<T>(this T page, Func<string> action)
        where T : IPage
    {
        page.IconImageSource = new PropertyValue<Microsoft.Maui.Controls.ImageSource>(() => Microsoft.Maui.Controls.ImageSource.FromFile(action()));
        return page;
    }

    public static T IconImageSource<T>(this T page, string resourceName, Assembly sourceAssembly)
        where T : IPage
    {
        page.IconImageSource = Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly);
        return page;
    }

    public static T IconImageSource<T>(this T page, Uri imageUri)
        where T : IPage
    {
        page.IconImageSource = Microsoft.Maui.Controls.ImageSource.FromUri(imageUri);
        return page;
    }

    public static T IconImageSource<T>(this T page, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity)
        where T : IPage
    {
        page.IconImageSource = new UriImageSource
        {
            Uri = imageUri,
            CachingEnabled = cachingEnabled,
            CacheValidity = cacheValidity
        };
        return page;
    }

    public static T IconImageSource<T>(this T page, Func<Stream> imageStream)
        where T : IPage
    {
        page.IconImageSource = Microsoft.Maui.Controls.ImageSource.FromStream(imageStream);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Action? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new SyncEventCommand<EventArgs>(execute: layoutChangedAction);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Action<EventArgs>? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: layoutChangedAction);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Action<object?, EventArgs>? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: layoutChangedAction);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Func<Task>? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new AsyncEventCommand<EventArgs>(execute: layoutChangedAction);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Func<EventArgs, Task>? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: layoutChangedAction);
        return page;
    }

    public static T OnLayoutChanged<T>(this T page, Func<object?, EventArgs, Task>? layoutChangedAction)
        where T : IPage
    {
        page.LayoutChangedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: layoutChangedAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Action? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new SyncEventCommand<EventArgs>(execute: appearingAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Action<EventArgs>? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new SyncEventCommand<EventArgs>(executeWithArgs: appearingAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Action<object?, EventArgs>? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: appearingAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Func<Task>? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new AsyncEventCommand<EventArgs>(execute: appearingAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Func<EventArgs, Task>? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: appearingAction);
        return page;
    }

    public static T OnAppearing<T>(this T page, Func<object?, EventArgs, Task>? appearingAction)
        where T : IPage
    {
        page.AppearingEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: appearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Action? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new SyncEventCommand<EventArgs>(execute: disappearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Action<EventArgs>? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new SyncEventCommand<EventArgs>(executeWithArgs: disappearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Action<object?, EventArgs>? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: disappearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Func<Task>? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new AsyncEventCommand<EventArgs>(execute: disappearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Func<EventArgs, Task>? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: disappearingAction);
        return page;
    }

    public static T OnDisappearing<T>(this T page, Func<object?, EventArgs, Task>? disappearingAction)
        where T : IPage
    {
        page.DisappearingEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: disappearingAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Action? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new SyncEventCommand<NavigatedToEventArgs>(execute: navigatedToAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Action<NavigatedToEventArgs>? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new SyncEventCommand<NavigatedToEventArgs>(executeWithArgs: navigatedToAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Action<object?, NavigatedToEventArgs>? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new SyncEventCommand<NavigatedToEventArgs>(executeWithFullArgs: navigatedToAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Func<Task>? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new AsyncEventCommand<NavigatedToEventArgs>(execute: navigatedToAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Func<NavigatedToEventArgs, Task>? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new AsyncEventCommand<NavigatedToEventArgs>(executeWithArgs: navigatedToAction);
        return page;
    }

    public static T OnNavigatedTo<T>(this T page, Func<object?, NavigatedToEventArgs, Task>? navigatedToAction)
        where T : IPage
    {
        page.NavigatedToEvent = new AsyncEventCommand<NavigatedToEventArgs>(executeWithFullArgs: navigatedToAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Action? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new SyncEventCommand<NavigatingFromEventArgs>(execute: navigatingFromAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Action<NavigatingFromEventArgs>? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new SyncEventCommand<NavigatingFromEventArgs>(executeWithArgs: navigatingFromAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Action<object?, NavigatingFromEventArgs>? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new SyncEventCommand<NavigatingFromEventArgs>(executeWithFullArgs: navigatingFromAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Func<Task>? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new AsyncEventCommand<NavigatingFromEventArgs>(execute: navigatingFromAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Func<NavigatingFromEventArgs, Task>? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new AsyncEventCommand<NavigatingFromEventArgs>(executeWithArgs: navigatingFromAction);
        return page;
    }

    public static T OnNavigatingFrom<T>(this T page, Func<object?, NavigatingFromEventArgs, Task>? navigatingFromAction)
        where T : IPage
    {
        page.NavigatingFromEvent = new AsyncEventCommand<NavigatingFromEventArgs>(executeWithFullArgs: navigatingFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Action? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new SyncEventCommand<NavigatedFromEventArgs>(execute: navigatedFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Action<NavigatedFromEventArgs>? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new SyncEventCommand<NavigatedFromEventArgs>(executeWithArgs: navigatedFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Action<object?, NavigatedFromEventArgs>? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new SyncEventCommand<NavigatedFromEventArgs>(executeWithFullArgs: navigatedFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Func<Task>? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new AsyncEventCommand<NavigatedFromEventArgs>(execute: navigatedFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Func<NavigatedFromEventArgs, Task>? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new AsyncEventCommand<NavigatedFromEventArgs>(executeWithArgs: navigatedFromAction);
        return page;
    }

    public static T OnNavigatedFrom<T>(this T page, Func<object?, NavigatedFromEventArgs, Task>? navigatedFromAction)
        where T : IPage
    {
        page.NavigatedFromEvent = new AsyncEventCommand<NavigatedFromEventArgs>(executeWithFullArgs: navigatedFromAction);
        return page;
    }
}

public static partial class PageStyles
{
    public static Action<IPage>? Default { get; set; }
    public static Dictionary<string, Action<IPage>> Themes { get; } = [];
}