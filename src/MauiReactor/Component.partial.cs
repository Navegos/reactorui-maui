// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial class Component
{
    public static ListView ListView() => new ListView();
    public static ListView ListView(params VisualNode? []? children)
    {
        var @listview = new ListView();
        if (children != null)
        {
            @listview.AddChildren(children);
        }

        return @listview;
    }

    public static ListView ListView(Action<Microsoft.Maui.Controls.ListView?> componentRefAction)
    {
        var @listview = new ListView();
        @listview.ComponentRefAction = componentRefAction;
        return @listview;
    }

    public static ListView ListView(Action<Microsoft.Maui.Controls.ListView?> componentRefAction, params VisualNode? []? children)
    {
        var @listview = new ListView();
        @listview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @listview.AddChildren(children);
        }

        return @listview;
    }

    public static TabbedPage TabbedPage() => new TabbedPage();
    public static TabbedPage TabbedPage(params VisualNode? []? children)
    {
        var @tabbedpage = new TabbedPage();
        if (children != null)
        {
            @tabbedpage.AddChildren(children);
        }

        return @tabbedpage;
    }

    public static TabbedPage TabbedPage(Action<Microsoft.Maui.Controls.TabbedPage?> componentRefAction)
    {
        var @tabbedpage = new TabbedPage();
        @tabbedpage.ComponentRefAction = componentRefAction;
        return @tabbedpage;
    }

    public static TabbedPage TabbedPage(Action<Microsoft.Maui.Controls.TabbedPage?> componentRefAction, params VisualNode? []? children)
    {
        var @tabbedpage = new TabbedPage();
        @tabbedpage.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @tabbedpage.AddChildren(children);
        }

        return @tabbedpage;
    }

    public static Page Page() => new Page();
    public static Page Page(params VisualNode? []? children)
    {
        var @page = new Page();
        if (children != null)
        {
            @page.AddChildren(children);
        }

        return @page;
    }

    public static Page Page(Action<Microsoft.Maui.Controls.Page?> componentRefAction)
    {
        var @page = new Page();
        @page.ComponentRefAction = componentRefAction;
        return @page;
    }

    public static Page Page(Action<Microsoft.Maui.Controls.Page?> componentRefAction, params VisualNode? []? children)
    {
        var @page = new Page();
        @page.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @page.AddChildren(children);
        }

        return @page;
    }

    public static TemplatedPage TemplatedPage() => new TemplatedPage();
    public static TemplatedPage TemplatedPage(params VisualNode? []? children)
    {
        var @templatedpage = new TemplatedPage();
        if (children != null)
        {
            @templatedpage.AddChildren(children);
        }

        return @templatedpage;
    }

    public static TemplatedPage TemplatedPage(Action<Microsoft.Maui.Controls.TemplatedPage?> componentRefAction)
    {
        var @templatedpage = new TemplatedPage();
        @templatedpage.ComponentRefAction = componentRefAction;
        return @templatedpage;
    }

    public static TemplatedPage TemplatedPage(Action<Microsoft.Maui.Controls.TemplatedPage?> componentRefAction, params VisualNode? []? children)
    {
        var @templatedpage = new TemplatedPage();
        @templatedpage.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @templatedpage.AddChildren(children);
        }

        return @templatedpage;
    }

    public static ContentPage ContentPage() => new ContentPage();
    public static ContentPage ContentPage(params VisualNode? []? children)
    {
        var @contentpage = new ContentPage();
        if (children != null)
        {
            @contentpage.AddChildren(children);
        }

        return @contentpage;
    }

    public static ContentPage ContentPage(Action<Microsoft.Maui.Controls.ContentPage?> componentRefAction)
    {
        var @contentpage = new ContentPage();
        @contentpage.ComponentRefAction = componentRefAction;
        return @contentpage;
    }

    public static ContentPage ContentPage(Action<Microsoft.Maui.Controls.ContentPage?> componentRefAction, params VisualNode? []? children)
    {
        var @contentpage = new ContentPage();
        @contentpage.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @contentpage.AddChildren(children);
        }

        return @contentpage;
    }

    public static NavigationPage NavigationPage() => new NavigationPage();
    public static NavigationPage NavigationPage(params VisualNode? []? children)
    {
        var @navigationpage = new NavigationPage();
        if (children != null)
        {
            @navigationpage.AddChildren(children);
        }

        return @navigationpage;
    }

    public static NavigationPage NavigationPage(Action<Microsoft.Maui.Controls.NavigationPage?> componentRefAction)
    {
        var @navigationpage = new NavigationPage();
        @navigationpage.ComponentRefAction = componentRefAction;
        return @navigationpage;
    }

    public static NavigationPage NavigationPage(Action<Microsoft.Maui.Controls.NavigationPage?> componentRefAction, params VisualNode? []? children)
    {
        var @navigationpage = new NavigationPage();
        @navigationpage.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @navigationpage.AddChildren(children);
        }

        return @navigationpage;
    }

    public static FlyoutPage FlyoutPage() => new FlyoutPage();
    public static FlyoutPage FlyoutPage(params VisualNode? []? children)
    {
        var @flyoutpage = new FlyoutPage();
        if (children != null)
        {
            @flyoutpage.AddChildren(children);
        }

        return @flyoutpage;
    }

    public static FlyoutPage FlyoutPage(Action<Microsoft.Maui.Controls.FlyoutPage?> componentRefAction)
    {
        var @flyoutpage = new FlyoutPage();
        @flyoutpage.ComponentRefAction = componentRefAction;
        return @flyoutpage;
    }

    public static FlyoutPage FlyoutPage(Action<Microsoft.Maui.Controls.FlyoutPage?> componentRefAction, params VisualNode? []? children)
    {
        var @flyoutpage = new FlyoutPage();
        @flyoutpage.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @flyoutpage.AddChildren(children);
        }

        return @flyoutpage;
    }

    public static Button Button() => new Button();
    public static Button Button(params VisualNode? []? children)
    {
        var @button = new Button();
        if (children != null)
        {
            @button.AddChildren(children);
        }

        return @button;
    }

    public static Button Button(Action<Microsoft.Maui.Controls.Button?> componentRefAction)
    {
        var @button = new Button();
        @button.ComponentRefAction = componentRefAction;
        return @button;
    }

    public static Button Button(Action<Microsoft.Maui.Controls.Button?> componentRefAction, params VisualNode? []? children)
    {
        var @button = new Button();
        @button.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @button.AddChildren(children);
        }

        return @button;
    }

    public static Label Label() => new Label();
    public static Label Label(params VisualNode? []? children)
    {
        var @label = new Label();
        if (children != null)
        {
            @label.AddChildren(children);
        }

        return @label;
    }

    public static Label Label(Action<Microsoft.Maui.Controls.Label?> componentRefAction)
    {
        var @label = new Label();
        @label.ComponentRefAction = componentRefAction;
        return @label;
    }

    public static Label Label(Action<Microsoft.Maui.Controls.Label?> componentRefAction, params VisualNode? []? children)
    {
        var @label = new Label();
        @label.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @label.AddChildren(children);
        }

        return @label;
    }

    public static StackLayout StackLayout() => new StackLayout();
    public static StackLayout StackLayout(params VisualNode? []? children)
    {
        var @stacklayout = new StackLayout();
        if (children != null)
        {
            @stacklayout.AddChildren(children);
        }

        return @stacklayout;
    }

    public static StackLayout StackLayout(Action<Microsoft.Maui.Controls.StackLayout?> componentRefAction)
    {
        var @stacklayout = new StackLayout();
        @stacklayout.ComponentRefAction = componentRefAction;
        return @stacklayout;
    }

    public static StackLayout StackLayout(Action<Microsoft.Maui.Controls.StackLayout?> componentRefAction, params VisualNode? []? children)
    {
        var @stacklayout = new StackLayout();
        @stacklayout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @stacklayout.AddChildren(children);
        }

        return @stacklayout;
    }

    public static VerticalStackLayout VerticalStackLayout() => new VerticalStackLayout();
    public static VerticalStackLayout VerticalStackLayout(params VisualNode? []? children)
    {
        var @verticalstacklayout = new VerticalStackLayout();
        if (children != null)
        {
            @verticalstacklayout.AddChildren(children);
        }

        return @verticalstacklayout;
    }

    public static VerticalStackLayout VerticalStackLayout(Action<Microsoft.Maui.Controls.VerticalStackLayout?> componentRefAction)
    {
        var @verticalstacklayout = new VerticalStackLayout();
        @verticalstacklayout.ComponentRefAction = componentRefAction;
        return @verticalstacklayout;
    }

    public static VerticalStackLayout VerticalStackLayout(Action<Microsoft.Maui.Controls.VerticalStackLayout?> componentRefAction, params VisualNode? []? children)
    {
        var @verticalstacklayout = new VerticalStackLayout();
        @verticalstacklayout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @verticalstacklayout.AddChildren(children);
        }

        return @verticalstacklayout;
    }

    public static HorizontalStackLayout HorizontalStackLayout() => new HorizontalStackLayout();
    public static HorizontalStackLayout HorizontalStackLayout(params VisualNode? []? children)
    {
        var @horizontalstacklayout = new HorizontalStackLayout();
        if (children != null)
        {
            @horizontalstacklayout.AddChildren(children);
        }

        return @horizontalstacklayout;
    }

    public static HorizontalStackLayout HorizontalStackLayout(Action<Microsoft.Maui.Controls.HorizontalStackLayout?> componentRefAction)
    {
        var @horizontalstacklayout = new HorizontalStackLayout();
        @horizontalstacklayout.ComponentRefAction = componentRefAction;
        return @horizontalstacklayout;
    }

    public static HorizontalStackLayout HorizontalStackLayout(Action<Microsoft.Maui.Controls.HorizontalStackLayout?> componentRefAction, params VisualNode? []? children)
    {
        var @horizontalstacklayout = new HorizontalStackLayout();
        @horizontalstacklayout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @horizontalstacklayout.AddChildren(children);
        }

        return @horizontalstacklayout;
    }

    public static Grid Grid() => new Grid();
    public static Grid Grid(params VisualNode? []? children)
    {
        var @grid = new Grid();
        if (children != null)
        {
            @grid.AddChildren(children);
        }

        return @grid;
    }

    public static Grid Grid(Action<Microsoft.Maui.Controls.Grid?> componentRefAction)
    {
        var @grid = new Grid();
        @grid.ComponentRefAction = componentRefAction;
        return @grid;
    }

    public static Grid Grid(Action<Microsoft.Maui.Controls.Grid?> componentRefAction, params VisualNode? []? children)
    {
        var @grid = new Grid();
        @grid.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @grid.AddChildren(children);
        }

        return @grid;
    }

    public static Shell Shell() => new Shell();
    public static Shell Shell(params VisualNode? []? children)
    {
        var @shell = new Shell();
        if (children != null)
        {
            @shell.AddChildren(children);
        }

        return @shell;
    }

    public static Shell Shell(Action<Microsoft.Maui.Controls.Shell?> componentRefAction)
    {
        var @shell = new Shell();
        @shell.ComponentRefAction = componentRefAction;
        return @shell;
    }

    public static Shell Shell(Action<Microsoft.Maui.Controls.Shell?> componentRefAction, params VisualNode? []? children)
    {
        var @shell = new Shell();
        @shell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shell.AddChildren(children);
        }

        return @shell;
    }

    public static BaseShellItem BaseShellItem() => new BaseShellItem();
    public static BaseShellItem BaseShellItem(params VisualNode? []? children)
    {
        var @baseshellitem = new BaseShellItem();
        if (children != null)
        {
            @baseshellitem.AddChildren(children);
        }

        return @baseshellitem;
    }

    public static BaseShellItem BaseShellItem(Action<Microsoft.Maui.Controls.BaseShellItem?> componentRefAction)
    {
        var @baseshellitem = new BaseShellItem();
        @baseshellitem.ComponentRefAction = componentRefAction;
        return @baseshellitem;
    }

    public static BaseShellItem BaseShellItem(Action<Microsoft.Maui.Controls.BaseShellItem?> componentRefAction, params VisualNode? []? children)
    {
        var @baseshellitem = new BaseShellItem();
        @baseshellitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @baseshellitem.AddChildren(children);
        }

        return @baseshellitem;
    }

    public static ShellGroupItem ShellGroupItem() => new ShellGroupItem();
    public static ShellGroupItem ShellGroupItem(params VisualNode? []? children)
    {
        var @shellgroupitem = new ShellGroupItem();
        if (children != null)
        {
            @shellgroupitem.AddChildren(children);
        }

        return @shellgroupitem;
    }

    public static ShellGroupItem ShellGroupItem(Action<Microsoft.Maui.Controls.ShellGroupItem?> componentRefAction)
    {
        var @shellgroupitem = new ShellGroupItem();
        @shellgroupitem.ComponentRefAction = componentRefAction;
        return @shellgroupitem;
    }

    public static ShellGroupItem ShellGroupItem(Action<Microsoft.Maui.Controls.ShellGroupItem?> componentRefAction, params VisualNode? []? children)
    {
        var @shellgroupitem = new ShellGroupItem();
        @shellgroupitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shellgroupitem.AddChildren(children);
        }

        return @shellgroupitem;
    }

    public static ShellItem ShellItem() => new ShellItem();
    public static ShellItem ShellItem(params VisualNode? []? children)
    {
        var @shellitem = new ShellItem();
        if (children != null)
        {
            @shellitem.AddChildren(children);
        }

        return @shellitem;
    }

    public static ShellItem ShellItem(Action<Microsoft.Maui.Controls.ShellItem?> componentRefAction)
    {
        var @shellitem = new ShellItem();
        @shellitem.ComponentRefAction = componentRefAction;
        return @shellitem;
    }

    public static ShellItem ShellItem(Action<Microsoft.Maui.Controls.ShellItem?> componentRefAction, params VisualNode? []? children)
    {
        var @shellitem = new ShellItem();
        @shellitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shellitem.AddChildren(children);
        }

        return @shellitem;
    }

    public static FlyoutItem FlyoutItem() => new FlyoutItem();
    public static FlyoutItem FlyoutItem(params VisualNode? []? children)
    {
        var @flyoutitem = new FlyoutItem();
        if (children != null)
        {
            @flyoutitem.AddChildren(children);
        }

        return @flyoutitem;
    }

    public static FlyoutItem FlyoutItem(Action<Microsoft.Maui.Controls.FlyoutItem?> componentRefAction)
    {
        var @flyoutitem = new FlyoutItem();
        @flyoutitem.ComponentRefAction = componentRefAction;
        return @flyoutitem;
    }

    public static FlyoutItem FlyoutItem(Action<Microsoft.Maui.Controls.FlyoutItem?> componentRefAction, params VisualNode? []? children)
    {
        var @flyoutitem = new FlyoutItem();
        @flyoutitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @flyoutitem.AddChildren(children);
        }

        return @flyoutitem;
    }

    public static ShellContent ShellContent() => new ShellContent();
    public static ShellContent ShellContent(params VisualNode? []? children)
    {
        var @shellcontent = new ShellContent();
        if (children != null)
        {
            @shellcontent.AddChildren(children);
        }

        return @shellcontent;
    }

    public static ShellContent ShellContent(Action<Microsoft.Maui.Controls.ShellContent?> componentRefAction)
    {
        var @shellcontent = new ShellContent();
        @shellcontent.ComponentRefAction = componentRefAction;
        return @shellcontent;
    }

    public static ShellContent ShellContent(Action<Microsoft.Maui.Controls.ShellContent?> componentRefAction, params VisualNode? []? children)
    {
        var @shellcontent = new ShellContent();
        @shellcontent.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shellcontent.AddChildren(children);
        }

        return @shellcontent;
    }

    public static TabBar TabBar() => new TabBar();
    public static TabBar TabBar(params VisualNode? []? children)
    {
        var @tabbar = new TabBar();
        if (children != null)
        {
            @tabbar.AddChildren(children);
        }

        return @tabbar;
    }

    public static TabBar TabBar(Action<Microsoft.Maui.Controls.TabBar?> componentRefAction)
    {
        var @tabbar = new TabBar();
        @tabbar.ComponentRefAction = componentRefAction;
        return @tabbar;
    }

    public static TabBar TabBar(Action<Microsoft.Maui.Controls.TabBar?> componentRefAction, params VisualNode? []? children)
    {
        var @tabbar = new TabBar();
        @tabbar.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @tabbar.AddChildren(children);
        }

        return @tabbar;
    }

    public static Tab Tab() => new Tab();
    public static Tab Tab(params VisualNode? []? children)
    {
        var @tab = new Tab();
        if (children != null)
        {
            @tab.AddChildren(children);
        }

        return @tab;
    }

    public static Tab Tab(Action<Microsoft.Maui.Controls.Tab?> componentRefAction)
    {
        var @tab = new Tab();
        @tab.ComponentRefAction = componentRefAction;
        return @tab;
    }

    public static Tab Tab(Action<Microsoft.Maui.Controls.Tab?> componentRefAction, params VisualNode? []? children)
    {
        var @tab = new Tab();
        @tab.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @tab.AddChildren(children);
        }

        return @tab;
    }

    public static ShellSection ShellSection() => new ShellSection();
    public static ShellSection ShellSection(params VisualNode? []? children)
    {
        var @shellsection = new ShellSection();
        if (children != null)
        {
            @shellsection.AddChildren(children);
        }

        return @shellsection;
    }

    public static ShellSection ShellSection(Action<Microsoft.Maui.Controls.ShellSection?> componentRefAction)
    {
        var @shellsection = new ShellSection();
        @shellsection.ComponentRefAction = componentRefAction;
        return @shellsection;
    }

    public static ShellSection ShellSection(Action<Microsoft.Maui.Controls.ShellSection?> componentRefAction, params VisualNode? []? children)
    {
        var @shellsection = new ShellSection();
        @shellsection.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shellsection.AddChildren(children);
        }

        return @shellsection;
    }

    public static MenuItem MenuItem() => new MenuItem();
    public static MenuItem MenuItem(params VisualNode? []? children)
    {
        var @menuitem = new MenuItem();
        if (children != null)
        {
            @menuitem.AddChildren(children);
        }

        return @menuitem;
    }

    public static MenuItem MenuItem(Action<Microsoft.Maui.Controls.MenuItem?> componentRefAction)
    {
        var @menuitem = new MenuItem();
        @menuitem.ComponentRefAction = componentRefAction;
        return @menuitem;
    }

    public static MenuItem MenuItem(Action<Microsoft.Maui.Controls.MenuItem?> componentRefAction, params VisualNode? []? children)
    {
        var @menuitem = new MenuItem();
        @menuitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menuitem.AddChildren(children);
        }

        return @menuitem;
    }

    public static MenuBarItem MenuBarItem() => new MenuBarItem();
    public static MenuBarItem MenuBarItem(params VisualNode? []? children)
    {
        var @menubaritem = new MenuBarItem();
        if (children != null)
        {
            @menubaritem.AddChildren(children);
        }

        return @menubaritem;
    }

    public static MenuBarItem MenuBarItem(Action<Microsoft.Maui.Controls.MenuBarItem?> componentRefAction)
    {
        var @menubaritem = new MenuBarItem();
        @menubaritem.ComponentRefAction = componentRefAction;
        return @menubaritem;
    }

    public static MenuBarItem MenuBarItem(Action<Microsoft.Maui.Controls.MenuBarItem?> componentRefAction, params VisualNode? []? children)
    {
        var @menubaritem = new MenuBarItem();
        @menubaritem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menubaritem.AddChildren(children);
        }

        return @menubaritem;
    }

    public static MenuFlyout MenuFlyout() => new MenuFlyout();
    public static MenuFlyout MenuFlyout(params VisualNode? []? children)
    {
        var @menuflyout = new MenuFlyout();
        if (children != null)
        {
            @menuflyout.AddChildren(children);
        }

        return @menuflyout;
    }

    public static MenuFlyout MenuFlyout(Action<Microsoft.Maui.Controls.MenuFlyout?> componentRefAction)
    {
        var @menuflyout = new MenuFlyout();
        @menuflyout.ComponentRefAction = componentRefAction;
        return @menuflyout;
    }

    public static MenuFlyout MenuFlyout(Action<Microsoft.Maui.Controls.MenuFlyout?> componentRefAction, params VisualNode? []? children)
    {
        var @menuflyout = new MenuFlyout();
        @menuflyout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menuflyout.AddChildren(children);
        }

        return @menuflyout;
    }

    public static MenuFlyoutItem MenuFlyoutItem() => new MenuFlyoutItem();
    public static MenuFlyoutItem MenuFlyoutItem(params VisualNode? []? children)
    {
        var @menuflyoutitem = new MenuFlyoutItem();
        if (children != null)
        {
            @menuflyoutitem.AddChildren(children);
        }

        return @menuflyoutitem;
    }

    public static MenuFlyoutItem MenuFlyoutItem(Action<Microsoft.Maui.Controls.MenuFlyoutItem?> componentRefAction)
    {
        var @menuflyoutitem = new MenuFlyoutItem();
        @menuflyoutitem.ComponentRefAction = componentRefAction;
        return @menuflyoutitem;
    }

    public static MenuFlyoutItem MenuFlyoutItem(Action<Microsoft.Maui.Controls.MenuFlyoutItem?> componentRefAction, params VisualNode? []? children)
    {
        var @menuflyoutitem = new MenuFlyoutItem();
        @menuflyoutitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menuflyoutitem.AddChildren(children);
        }

        return @menuflyoutitem;
    }

    public static MenuFlyoutSubItem MenuFlyoutSubItem() => new MenuFlyoutSubItem();
    public static MenuFlyoutSubItem MenuFlyoutSubItem(params VisualNode? []? children)
    {
        var @menuflyoutsubitem = new MenuFlyoutSubItem();
        if (children != null)
        {
            @menuflyoutsubitem.AddChildren(children);
        }

        return @menuflyoutsubitem;
    }

    public static MenuFlyoutSubItem MenuFlyoutSubItem(Action<Microsoft.Maui.Controls.MenuFlyoutSubItem?> componentRefAction)
    {
        var @menuflyoutsubitem = new MenuFlyoutSubItem();
        @menuflyoutsubitem.ComponentRefAction = componentRefAction;
        return @menuflyoutsubitem;
    }

    public static MenuFlyoutSubItem MenuFlyoutSubItem(Action<Microsoft.Maui.Controls.MenuFlyoutSubItem?> componentRefAction, params VisualNode? []? children)
    {
        var @menuflyoutsubitem = new MenuFlyoutSubItem();
        @menuflyoutsubitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menuflyoutsubitem.AddChildren(children);
        }

        return @menuflyoutsubitem;
    }

    public static MenuFlyoutSeparator MenuFlyoutSeparator() => new MenuFlyoutSeparator();
    public static MenuFlyoutSeparator MenuFlyoutSeparator(params VisualNode? []? children)
    {
        var @menuflyoutseparator = new MenuFlyoutSeparator();
        if (children != null)
        {
            @menuflyoutseparator.AddChildren(children);
        }

        return @menuflyoutseparator;
    }

    public static MenuFlyoutSeparator MenuFlyoutSeparator(Action<Microsoft.Maui.Controls.MenuFlyoutSeparator?> componentRefAction)
    {
        var @menuflyoutseparator = new MenuFlyoutSeparator();
        @menuflyoutseparator.ComponentRefAction = componentRefAction;
        return @menuflyoutseparator;
    }

    public static MenuFlyoutSeparator MenuFlyoutSeparator(Action<Microsoft.Maui.Controls.MenuFlyoutSeparator?> componentRefAction, params VisualNode? []? children)
    {
        var @menuflyoutseparator = new MenuFlyoutSeparator();
        @menuflyoutseparator.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @menuflyoutseparator.AddChildren(children);
        }

        return @menuflyoutseparator;
    }

    public static ToolbarItem ToolbarItem() => new ToolbarItem();
    public static ToolbarItem ToolbarItem(params VisualNode? []? children)
    {
        var @toolbaritem = new ToolbarItem();
        if (children != null)
        {
            @toolbaritem.AddChildren(children);
        }

        return @toolbaritem;
    }

    public static ToolbarItem ToolbarItem(Action<Microsoft.Maui.Controls.ToolbarItem?> componentRefAction)
    {
        var @toolbaritem = new ToolbarItem();
        @toolbaritem.ComponentRefAction = componentRefAction;
        return @toolbaritem;
    }

    public static ToolbarItem ToolbarItem(Action<Microsoft.Maui.Controls.ToolbarItem?> componentRefAction, params VisualNode? []? children)
    {
        var @toolbaritem = new ToolbarItem();
        @toolbaritem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @toolbaritem.AddChildren(children);
        }

        return @toolbaritem;
    }

    public static BoxView BoxView() => new BoxView();
    public static BoxView BoxView(params VisualNode? []? children)
    {
        var @boxview = new BoxView();
        if (children != null)
        {
            @boxview.AddChildren(children);
        }

        return @boxview;
    }

    public static BoxView BoxView(Action<Microsoft.Maui.Controls.BoxView?> componentRefAction)
    {
        var @boxview = new BoxView();
        @boxview.ComponentRefAction = componentRefAction;
        return @boxview;
    }

    public static BoxView BoxView(Action<Microsoft.Maui.Controls.BoxView?> componentRefAction, params VisualNode? []? children)
    {
        var @boxview = new BoxView();
        @boxview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @boxview.AddChildren(children);
        }

        return @boxview;
    }

    public static ScrollView ScrollView() => new ScrollView();
    public static ScrollView ScrollView(params VisualNode? []? children)
    {
        var @scrollview = new ScrollView();
        if (children != null)
        {
            @scrollview.AddChildren(children);
        }

        return @scrollview;
    }

    public static ScrollView ScrollView(Action<Microsoft.Maui.Controls.ScrollView?> componentRefAction)
    {
        var @scrollview = new ScrollView();
        @scrollview.ComponentRefAction = componentRefAction;
        return @scrollview;
    }

    public static ScrollView ScrollView(Action<Microsoft.Maui.Controls.ScrollView?> componentRefAction, params VisualNode? []? children)
    {
        var @scrollview = new ScrollView();
        @scrollview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @scrollview.AddChildren(children);
        }

        return @scrollview;
    }

    public static Image Image() => new Image();
    public static Image Image(params VisualNode? []? children)
    {
        var @image = new Image();
        if (children != null)
        {
            @image.AddChildren(children);
        }

        return @image;
    }

    public static Image Image(Action<Microsoft.Maui.Controls.Image?> componentRefAction)
    {
        var @image = new Image();
        @image.ComponentRefAction = componentRefAction;
        return @image;
    }

    public static Image Image(Action<Microsoft.Maui.Controls.Image?> componentRefAction, params VisualNode? []? children)
    {
        var @image = new Image();
        @image.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @image.AddChildren(children);
        }

        return @image;
    }

    public static GestureRecognizer GestureRecognizer() => new GestureRecognizer();
    public static GestureRecognizer GestureRecognizer(params VisualNode? []? children)
    {
        var @gesturerecognizer = new GestureRecognizer();
        if (children != null)
        {
            @gesturerecognizer.AddChildren(children);
        }

        return @gesturerecognizer;
    }

    public static GestureRecognizer GestureRecognizer(Action<Microsoft.Maui.Controls.GestureRecognizer?> componentRefAction)
    {
        var @gesturerecognizer = new GestureRecognizer();
        @gesturerecognizer.ComponentRefAction = componentRefAction;
        return @gesturerecognizer;
    }

    public static GestureRecognizer GestureRecognizer(Action<Microsoft.Maui.Controls.GestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @gesturerecognizer = new GestureRecognizer();
        @gesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @gesturerecognizer.AddChildren(children);
        }

        return @gesturerecognizer;
    }

    public static TapGestureRecognizer TapGestureRecognizer() => new TapGestureRecognizer();
    public static TapGestureRecognizer TapGestureRecognizer(params VisualNode? []? children)
    {
        var @tapgesturerecognizer = new TapGestureRecognizer();
        if (children != null)
        {
            @tapgesturerecognizer.AddChildren(children);
        }

        return @tapgesturerecognizer;
    }

    public static TapGestureRecognizer TapGestureRecognizer(Action<Microsoft.Maui.Controls.TapGestureRecognizer?> componentRefAction)
    {
        var @tapgesturerecognizer = new TapGestureRecognizer();
        @tapgesturerecognizer.ComponentRefAction = componentRefAction;
        return @tapgesturerecognizer;
    }

    public static TapGestureRecognizer TapGestureRecognizer(Action<Microsoft.Maui.Controls.TapGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @tapgesturerecognizer = new TapGestureRecognizer();
        @tapgesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @tapgesturerecognizer.AddChildren(children);
        }

        return @tapgesturerecognizer;
    }

    public static DragGestureRecognizer DragGestureRecognizer() => new DragGestureRecognizer();
    public static DragGestureRecognizer DragGestureRecognizer(params VisualNode? []? children)
    {
        var @draggesturerecognizer = new DragGestureRecognizer();
        if (children != null)
        {
            @draggesturerecognizer.AddChildren(children);
        }

        return @draggesturerecognizer;
    }

    public static DragGestureRecognizer DragGestureRecognizer(Action<Microsoft.Maui.Controls.DragGestureRecognizer?> componentRefAction)
    {
        var @draggesturerecognizer = new DragGestureRecognizer();
        @draggesturerecognizer.ComponentRefAction = componentRefAction;
        return @draggesturerecognizer;
    }

    public static DragGestureRecognizer DragGestureRecognizer(Action<Microsoft.Maui.Controls.DragGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @draggesturerecognizer = new DragGestureRecognizer();
        @draggesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @draggesturerecognizer.AddChildren(children);
        }

        return @draggesturerecognizer;
    }

    public static DropGestureRecognizer DropGestureRecognizer() => new DropGestureRecognizer();
    public static DropGestureRecognizer DropGestureRecognizer(params VisualNode? []? children)
    {
        var @dropgesturerecognizer = new DropGestureRecognizer();
        if (children != null)
        {
            @dropgesturerecognizer.AddChildren(children);
        }

        return @dropgesturerecognizer;
    }

    public static DropGestureRecognizer DropGestureRecognizer(Action<Microsoft.Maui.Controls.DropGestureRecognizer?> componentRefAction)
    {
        var @dropgesturerecognizer = new DropGestureRecognizer();
        @dropgesturerecognizer.ComponentRefAction = componentRefAction;
        return @dropgesturerecognizer;
    }

    public static DropGestureRecognizer DropGestureRecognizer(Action<Microsoft.Maui.Controls.DropGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @dropgesturerecognizer = new DropGestureRecognizer();
        @dropgesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @dropgesturerecognizer.AddChildren(children);
        }

        return @dropgesturerecognizer;
    }

    public static PanGestureRecognizer PanGestureRecognizer() => new PanGestureRecognizer();
    public static PanGestureRecognizer PanGestureRecognizer(params VisualNode? []? children)
    {
        var @pangesturerecognizer = new PanGestureRecognizer();
        if (children != null)
        {
            @pangesturerecognizer.AddChildren(children);
        }

        return @pangesturerecognizer;
    }

    public static PanGestureRecognizer PanGestureRecognizer(Action<Microsoft.Maui.Controls.PanGestureRecognizer?> componentRefAction)
    {
        var @pangesturerecognizer = new PanGestureRecognizer();
        @pangesturerecognizer.ComponentRefAction = componentRefAction;
        return @pangesturerecognizer;
    }

    public static PanGestureRecognizer PanGestureRecognizer(Action<Microsoft.Maui.Controls.PanGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @pangesturerecognizer = new PanGestureRecognizer();
        @pangesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @pangesturerecognizer.AddChildren(children);
        }

        return @pangesturerecognizer;
    }

    public static PinchGestureRecognizer PinchGestureRecognizer() => new PinchGestureRecognizer();
    public static PinchGestureRecognizer PinchGestureRecognizer(params VisualNode? []? children)
    {
        var @pinchgesturerecognizer = new PinchGestureRecognizer();
        if (children != null)
        {
            @pinchgesturerecognizer.AddChildren(children);
        }

        return @pinchgesturerecognizer;
    }

    public static PinchGestureRecognizer PinchGestureRecognizer(Action<Microsoft.Maui.Controls.PinchGestureRecognizer?> componentRefAction)
    {
        var @pinchgesturerecognizer = new PinchGestureRecognizer();
        @pinchgesturerecognizer.ComponentRefAction = componentRefAction;
        return @pinchgesturerecognizer;
    }

    public static PinchGestureRecognizer PinchGestureRecognizer(Action<Microsoft.Maui.Controls.PinchGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @pinchgesturerecognizer = new PinchGestureRecognizer();
        @pinchgesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @pinchgesturerecognizer.AddChildren(children);
        }

        return @pinchgesturerecognizer;
    }

    public static PointerGestureRecognizer PointerGestureRecognizer() => new PointerGestureRecognizer();
    public static PointerGestureRecognizer PointerGestureRecognizer(params VisualNode? []? children)
    {
        var @pointergesturerecognizer = new PointerGestureRecognizer();
        if (children != null)
        {
            @pointergesturerecognizer.AddChildren(children);
        }

        return @pointergesturerecognizer;
    }

    public static PointerGestureRecognizer PointerGestureRecognizer(Action<Microsoft.Maui.Controls.PointerGestureRecognizer?> componentRefAction)
    {
        var @pointergesturerecognizer = new PointerGestureRecognizer();
        @pointergesturerecognizer.ComponentRefAction = componentRefAction;
        return @pointergesturerecognizer;
    }

    public static PointerGestureRecognizer PointerGestureRecognizer(Action<Microsoft.Maui.Controls.PointerGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @pointergesturerecognizer = new PointerGestureRecognizer();
        @pointergesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @pointergesturerecognizer.AddChildren(children);
        }

        return @pointergesturerecognizer;
    }

    public static SwipeGestureRecognizer SwipeGestureRecognizer() => new SwipeGestureRecognizer();
    public static SwipeGestureRecognizer SwipeGestureRecognizer(params VisualNode? []? children)
    {
        var @swipegesturerecognizer = new SwipeGestureRecognizer();
        if (children != null)
        {
            @swipegesturerecognizer.AddChildren(children);
        }

        return @swipegesturerecognizer;
    }

    public static SwipeGestureRecognizer SwipeGestureRecognizer(Action<Microsoft.Maui.Controls.SwipeGestureRecognizer?> componentRefAction)
    {
        var @swipegesturerecognizer = new SwipeGestureRecognizer();
        @swipegesturerecognizer.ComponentRefAction = componentRefAction;
        return @swipegesturerecognizer;
    }

    public static SwipeGestureRecognizer SwipeGestureRecognizer(Action<Microsoft.Maui.Controls.SwipeGestureRecognizer?> componentRefAction, params VisualNode? []? children)
    {
        var @swipegesturerecognizer = new SwipeGestureRecognizer();
        @swipegesturerecognizer.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @swipegesturerecognizer.AddChildren(children);
        }

        return @swipegesturerecognizer;
    }

    public static Shapes.EllipseGeometry EllipseGeometry() => new Shapes.EllipseGeometry();
    public static Shapes.EllipseGeometry EllipseGeometry(Action<Microsoft.Maui.Controls.Shapes.EllipseGeometry?> componentRefAction)
    {
        var @ellipsegeometry = new Shapes.EllipseGeometry();
        @ellipsegeometry.ComponentRefAction = componentRefAction;
        return @ellipsegeometry;
    }

    public static Shapes.LineGeometry LineGeometry() => new Shapes.LineGeometry();
    public static Shapes.LineGeometry LineGeometry(Action<Microsoft.Maui.Controls.Shapes.LineGeometry?> componentRefAction)
    {
        var @linegeometry = new Shapes.LineGeometry();
        @linegeometry.ComponentRefAction = componentRefAction;
        return @linegeometry;
    }

    public static Shapes.RectangleGeometry RectangleGeometry() => new Shapes.RectangleGeometry();
    public static Shapes.RectangleGeometry RectangleGeometry(Action<Microsoft.Maui.Controls.Shapes.RectangleGeometry?> componentRefAction)
    {
        var @rectanglegeometry = new Shapes.RectangleGeometry();
        @rectanglegeometry.ComponentRefAction = componentRefAction;
        return @rectanglegeometry;
    }

    public static Shapes.PathGeometry PathGeometry() => new Shapes.PathGeometry();
    public static Shapes.PathGeometry PathGeometry(Action<Microsoft.Maui.Controls.Shapes.PathGeometry?> componentRefAction)
    {
        var @pathgeometry = new Shapes.PathGeometry();
        @pathgeometry.ComponentRefAction = componentRefAction;
        return @pathgeometry;
    }

    public static Shapes.RoundRectangleGeometry RoundRectangleGeometry() => new Shapes.RoundRectangleGeometry();
    public static Shapes.RoundRectangleGeometry RoundRectangleGeometry(Action<Microsoft.Maui.Controls.Shapes.RoundRectangleGeometry?> componentRefAction)
    {
        var @roundrectanglegeometry = new Shapes.RoundRectangleGeometry();
        @roundrectanglegeometry.ComponentRefAction = componentRefAction;
        return @roundrectanglegeometry;
    }

    public static Shapes.RoundRectangle RoundRectangle() => new Shapes.RoundRectangle();
    public static Shapes.RoundRectangle RoundRectangle(params VisualNode? []? children)
    {
        var @roundrectangle = new Shapes.RoundRectangle();
        if (children != null)
        {
            @roundrectangle.AddChildren(children);
        }

        return @roundrectangle;
    }

    public static Shapes.RoundRectangle RoundRectangle(Action<Microsoft.Maui.Controls.Shapes.RoundRectangle?> componentRefAction)
    {
        var @roundrectangle = new Shapes.RoundRectangle();
        @roundrectangle.ComponentRefAction = componentRefAction;
        return @roundrectangle;
    }

    public static Shapes.RoundRectangle RoundRectangle(Action<Microsoft.Maui.Controls.Shapes.RoundRectangle?> componentRefAction, params VisualNode? []? children)
    {
        var @roundrectangle = new Shapes.RoundRectangle();
        @roundrectangle.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @roundrectangle.AddChildren(children);
        }

        return @roundrectangle;
    }

    public static Shapes.Line Line() => new Shapes.Line();
    public static Shapes.Line Line(params VisualNode? []? children)
    {
        var @line = new Shapes.Line();
        if (children != null)
        {
            @line.AddChildren(children);
        }

        return @line;
    }

    public static Shapes.Line Line(Action<Microsoft.Maui.Controls.Shapes.Line?> componentRefAction)
    {
        var @line = new Shapes.Line();
        @line.ComponentRefAction = componentRefAction;
        return @line;
    }

    public static Shapes.Line Line(Action<Microsoft.Maui.Controls.Shapes.Line?> componentRefAction, params VisualNode? []? children)
    {
        var @line = new Shapes.Line();
        @line.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @line.AddChildren(children);
        }

        return @line;
    }

    public static Shapes.Path Path() => new Shapes.Path();
    public static Shapes.Path Path(params VisualNode? []? children)
    {
        var @path = new Shapes.Path();
        if (children != null)
        {
            @path.AddChildren(children);
        }

        return @path;
    }

    public static Shapes.Path Path(Action<Microsoft.Maui.Controls.Shapes.Path?> componentRefAction)
    {
        var @path = new Shapes.Path();
        @path.ComponentRefAction = componentRefAction;
        return @path;
    }

    public static Shapes.Path Path(Action<Microsoft.Maui.Controls.Shapes.Path?> componentRefAction, params VisualNode? []? children)
    {
        var @path = new Shapes.Path();
        @path.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @path.AddChildren(children);
        }

        return @path;
    }

    public static Shapes.Polygon Polygon() => new Shapes.Polygon();
    public static Shapes.Polygon Polygon(params VisualNode? []? children)
    {
        var @polygon = new Shapes.Polygon();
        if (children != null)
        {
            @polygon.AddChildren(children);
        }

        return @polygon;
    }

    public static Shapes.Polygon Polygon(Action<Microsoft.Maui.Controls.Shapes.Polygon?> componentRefAction)
    {
        var @polygon = new Shapes.Polygon();
        @polygon.ComponentRefAction = componentRefAction;
        return @polygon;
    }

    public static Shapes.Polygon Polygon(Action<Microsoft.Maui.Controls.Shapes.Polygon?> componentRefAction, params VisualNode? []? children)
    {
        var @polygon = new Shapes.Polygon();
        @polygon.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @polygon.AddChildren(children);
        }

        return @polygon;
    }

    public static Shapes.Polyline Polyline() => new Shapes.Polyline();
    public static Shapes.Polyline Polyline(params VisualNode? []? children)
    {
        var @polyline = new Shapes.Polyline();
        if (children != null)
        {
            @polyline.AddChildren(children);
        }

        return @polyline;
    }

    public static Shapes.Polyline Polyline(Action<Microsoft.Maui.Controls.Shapes.Polyline?> componentRefAction)
    {
        var @polyline = new Shapes.Polyline();
        @polyline.ComponentRefAction = componentRefAction;
        return @polyline;
    }

    public static Shapes.Polyline Polyline(Action<Microsoft.Maui.Controls.Shapes.Polyline?> componentRefAction, params VisualNode? []? children)
    {
        var @polyline = new Shapes.Polyline();
        @polyline.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @polyline.AddChildren(children);
        }

        return @polyline;
    }

    public static Shapes.Rectangle Rectangle() => new Shapes.Rectangle();
    public static Shapes.Rectangle Rectangle(params VisualNode? []? children)
    {
        var @rectangle = new Shapes.Rectangle();
        if (children != null)
        {
            @rectangle.AddChildren(children);
        }

        return @rectangle;
    }

    public static Shapes.Rectangle Rectangle(Action<Microsoft.Maui.Controls.Shapes.Rectangle?> componentRefAction)
    {
        var @rectangle = new Shapes.Rectangle();
        @rectangle.ComponentRefAction = componentRefAction;
        return @rectangle;
    }

    public static Shapes.Rectangle Rectangle(Action<Microsoft.Maui.Controls.Shapes.Rectangle?> componentRefAction, params VisualNode? []? children)
    {
        var @rectangle = new Shapes.Rectangle();
        @rectangle.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @rectangle.AddChildren(children);
        }

        return @rectangle;
    }

    public static Shapes.GeometryGroup GeometryGroup() => new Shapes.GeometryGroup();
    public static Shapes.GeometryGroup GeometryGroup(Action<Microsoft.Maui.Controls.Shapes.GeometryGroup?> componentRefAction)
    {
        var @geometrygroup = new Shapes.GeometryGroup();
        @geometrygroup.ComponentRefAction = componentRefAction;
        return @geometrygroup;
    }

    public static Shapes.Ellipse Ellipse() => new Shapes.Ellipse();
    public static Shapes.Ellipse Ellipse(params VisualNode? []? children)
    {
        var @ellipse = new Shapes.Ellipse();
        if (children != null)
        {
            @ellipse.AddChildren(children);
        }

        return @ellipse;
    }

    public static Shapes.Ellipse Ellipse(Action<Microsoft.Maui.Controls.Shapes.Ellipse?> componentRefAction)
    {
        var @ellipse = new Shapes.Ellipse();
        @ellipse.ComponentRefAction = componentRefAction;
        return @ellipse;
    }

    public static Shapes.Ellipse Ellipse(Action<Microsoft.Maui.Controls.Shapes.Ellipse?> componentRefAction, params VisualNode? []? children)
    {
        var @ellipse = new Shapes.Ellipse();
        @ellipse.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @ellipse.AddChildren(children);
        }

        return @ellipse;
    }

    public static Border Border() => new Border();
    public static Border Border(params VisualNode? []? children)
    {
        var @border = new Border();
        if (children != null)
        {
            @border.AddChildren(children);
        }

        return @border;
    }

    public static Border Border(Action<Microsoft.Maui.Controls.Border?> componentRefAction)
    {
        var @border = new Border();
        @border.ComponentRefAction = componentRefAction;
        return @border;
    }

    public static Border Border(Action<Microsoft.Maui.Controls.Border?> componentRefAction, params VisualNode? []? children)
    {
        var @border = new Border();
        @border.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @border.AddChildren(children);
        }

        return @border;
    }

    public static FlexLayout FlexLayout() => new FlexLayout();
    public static FlexLayout FlexLayout(params VisualNode? []? children)
    {
        var @flexlayout = new FlexLayout();
        if (children != null)
        {
            @flexlayout.AddChildren(children);
        }

        return @flexlayout;
    }

    public static FlexLayout FlexLayout(Action<Microsoft.Maui.Controls.FlexLayout?> componentRefAction)
    {
        var @flexlayout = new FlexLayout();
        @flexlayout.ComponentRefAction = componentRefAction;
        return @flexlayout;
    }

    public static FlexLayout FlexLayout(Action<Microsoft.Maui.Controls.FlexLayout?> componentRefAction, params VisualNode? []? children)
    {
        var @flexlayout = new FlexLayout();
        @flexlayout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @flexlayout.AddChildren(children);
        }

        return @flexlayout;
    }

    public static CollectionView CollectionView() => new CollectionView();
    public static CollectionView CollectionView(params VisualNode? []? children)
    {
        var @collectionview = new CollectionView();
        if (children != null)
        {
            @collectionview.AddChildren(children);
        }

        return @collectionview;
    }

    public static CollectionView CollectionView(Action<Microsoft.Maui.Controls.CollectionView?> componentRefAction)
    {
        var @collectionview = new CollectionView();
        @collectionview.ComponentRefAction = componentRefAction;
        return @collectionview;
    }

    public static CollectionView CollectionView(Action<Microsoft.Maui.Controls.CollectionView?> componentRefAction, params VisualNode? []? children)
    {
        var @collectionview = new CollectionView();
        @collectionview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @collectionview.AddChildren(children);
        }

        return @collectionview;
    }

    public static GroupableItemsView GroupableItemsView() => new GroupableItemsView();
    public static GroupableItemsView GroupableItemsView(params VisualNode? []? children)
    {
        var @groupableitemsview = new GroupableItemsView();
        if (children != null)
        {
            @groupableitemsview.AddChildren(children);
        }

        return @groupableitemsview;
    }

    public static GroupableItemsView GroupableItemsView(Action<Microsoft.Maui.Controls.GroupableItemsView?> componentRefAction)
    {
        var @groupableitemsview = new GroupableItemsView();
        @groupableitemsview.ComponentRefAction = componentRefAction;
        return @groupableitemsview;
    }

    public static GroupableItemsView GroupableItemsView(Action<Microsoft.Maui.Controls.GroupableItemsView?> componentRefAction, params VisualNode? []? children)
    {
        var @groupableitemsview = new GroupableItemsView();
        @groupableitemsview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @groupableitemsview.AddChildren(children);
        }

        return @groupableitemsview;
    }

    public static ReorderableItemsView ReorderableItemsView() => new ReorderableItemsView();
    public static ReorderableItemsView ReorderableItemsView(params VisualNode? []? children)
    {
        var @reorderableitemsview = new ReorderableItemsView();
        if (children != null)
        {
            @reorderableitemsview.AddChildren(children);
        }

        return @reorderableitemsview;
    }

    public static ReorderableItemsView ReorderableItemsView(Action<Microsoft.Maui.Controls.ReorderableItemsView?> componentRefAction)
    {
        var @reorderableitemsview = new ReorderableItemsView();
        @reorderableitemsview.ComponentRefAction = componentRefAction;
        return @reorderableitemsview;
    }

    public static ReorderableItemsView ReorderableItemsView(Action<Microsoft.Maui.Controls.ReorderableItemsView?> componentRefAction, params VisualNode? []? children)
    {
        var @reorderableitemsview = new ReorderableItemsView();
        @reorderableitemsview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @reorderableitemsview.AddChildren(children);
        }

        return @reorderableitemsview;
    }

    public static SelectableItemsView SelectableItemsView() => new SelectableItemsView();
    public static SelectableItemsView SelectableItemsView(params VisualNode? []? children)
    {
        var @selectableitemsview = new SelectableItemsView();
        if (children != null)
        {
            @selectableitemsview.AddChildren(children);
        }

        return @selectableitemsview;
    }

    public static SelectableItemsView SelectableItemsView(Action<Microsoft.Maui.Controls.SelectableItemsView?> componentRefAction)
    {
        var @selectableitemsview = new SelectableItemsView();
        @selectableitemsview.ComponentRefAction = componentRefAction;
        return @selectableitemsview;
    }

    public static SelectableItemsView SelectableItemsView(Action<Microsoft.Maui.Controls.SelectableItemsView?> componentRefAction, params VisualNode? []? children)
    {
        var @selectableitemsview = new SelectableItemsView();
        @selectableitemsview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @selectableitemsview.AddChildren(children);
        }

        return @selectableitemsview;
    }

    public static StructuredItemsView StructuredItemsView() => new StructuredItemsView();
    public static StructuredItemsView StructuredItemsView(params VisualNode? []? children)
    {
        var @structureditemsview = new StructuredItemsView();
        if (children != null)
        {
            @structureditemsview.AddChildren(children);
        }

        return @structureditemsview;
    }

    public static StructuredItemsView StructuredItemsView(Action<Microsoft.Maui.Controls.StructuredItemsView?> componentRefAction)
    {
        var @structureditemsview = new StructuredItemsView();
        @structureditemsview.ComponentRefAction = componentRefAction;
        return @structureditemsview;
    }

    public static StructuredItemsView StructuredItemsView(Action<Microsoft.Maui.Controls.StructuredItemsView?> componentRefAction, params VisualNode? []? children)
    {
        var @structureditemsview = new StructuredItemsView();
        @structureditemsview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @structureditemsview.AddChildren(children);
        }

        return @structureditemsview;
    }

    public static ContentView ContentView() => new ContentView();
    public static ContentView ContentView(params VisualNode? []? children)
    {
        var @contentview = new ContentView();
        if (children != null)
        {
            @contentview.AddChildren(children);
        }

        return @contentview;
    }

    public static ContentView ContentView(Action<Microsoft.Maui.Controls.ContentView?> componentRefAction)
    {
        var @contentview = new ContentView();
        @contentview.ComponentRefAction = componentRefAction;
        return @contentview;
    }

    public static ContentView ContentView(Action<Microsoft.Maui.Controls.ContentView?> componentRefAction, params VisualNode? []? children)
    {
        var @contentview = new ContentView();
        @contentview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @contentview.AddChildren(children);
        }

        return @contentview;
    }

    public static Frame Frame() => new Frame();
    public static Frame Frame(params VisualNode? []? children)
    {
        var @frame = new Frame();
        if (children != null)
        {
            @frame.AddChildren(children);
        }

        return @frame;
    }

    public static Frame Frame(Action<Microsoft.Maui.Controls.Frame?> componentRefAction)
    {
        var @frame = new Frame();
        @frame.ComponentRefAction = componentRefAction;
        return @frame;
    }

    public static Frame Frame(Action<Microsoft.Maui.Controls.Frame?> componentRefAction, params VisualNode? []? children)
    {
        var @frame = new Frame();
        @frame.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @frame.AddChildren(children);
        }

        return @frame;
    }

    public static TemplatedView TemplatedView() => new TemplatedView();
    public static TemplatedView TemplatedView(params VisualNode? []? children)
    {
        var @templatedview = new TemplatedView();
        if (children != null)
        {
            @templatedview.AddChildren(children);
        }

        return @templatedview;
    }

    public static TemplatedView TemplatedView(Action<Microsoft.Maui.Controls.TemplatedView?> componentRefAction)
    {
        var @templatedview = new TemplatedView();
        @templatedview.ComponentRefAction = componentRefAction;
        return @templatedview;
    }

    public static TemplatedView TemplatedView(Action<Microsoft.Maui.Controls.TemplatedView?> componentRefAction, params VisualNode? []? children)
    {
        var @templatedview = new TemplatedView();
        @templatedview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @templatedview.AddChildren(children);
        }

        return @templatedview;
    }

    public static ImageButton ImageButton() => new ImageButton();
    public static ImageButton ImageButton(params VisualNode? []? children)
    {
        var @imagebutton = new ImageButton();
        if (children != null)
        {
            @imagebutton.AddChildren(children);
        }

        return @imagebutton;
    }

    public static ImageButton ImageButton(Action<Microsoft.Maui.Controls.ImageButton?> componentRefAction)
    {
        var @imagebutton = new ImageButton();
        @imagebutton.ComponentRefAction = componentRefAction;
        return @imagebutton;
    }

    public static ImageButton ImageButton(Action<Microsoft.Maui.Controls.ImageButton?> componentRefAction, params VisualNode? []? children)
    {
        var @imagebutton = new ImageButton();
        @imagebutton.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @imagebutton.AddChildren(children);
        }

        return @imagebutton;
    }

    public static RadioButton RadioButton() => new RadioButton();
    public static RadioButton RadioButton(params VisualNode? []? children)
    {
        var @radiobutton = new RadioButton();
        if (children != null)
        {
            @radiobutton.AddChildren(children);
        }

        return @radiobutton;
    }

    public static RadioButton RadioButton(Action<Microsoft.Maui.Controls.RadioButton?> componentRefAction)
    {
        var @radiobutton = new RadioButton();
        @radiobutton.ComponentRefAction = componentRefAction;
        return @radiobutton;
    }

    public static RadioButton RadioButton(Action<Microsoft.Maui.Controls.RadioButton?> componentRefAction, params VisualNode? []? children)
    {
        var @radiobutton = new RadioButton();
        @radiobutton.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @radiobutton.AddChildren(children);
        }

        return @radiobutton;
    }

    public static WebView WebView() => new WebView();
    public static WebView WebView(params VisualNode? []? children)
    {
        var @webview = new WebView();
        if (children != null)
        {
            @webview.AddChildren(children);
        }

        return @webview;
    }

    public static WebView WebView(Action<Microsoft.Maui.Controls.WebView?> componentRefAction)
    {
        var @webview = new WebView();
        @webview.ComponentRefAction = componentRefAction;
        return @webview;
    }

    public static WebView WebView(Action<Microsoft.Maui.Controls.WebView?> componentRefAction, params VisualNode? []? children)
    {
        var @webview = new WebView();
        @webview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @webview.AddChildren(children);
        }

        return @webview;
    }

    public static RefreshView RefreshView() => new RefreshView();
    public static RefreshView RefreshView(params VisualNode? []? children)
    {
        var @refreshview = new RefreshView();
        if (children != null)
        {
            @refreshview.AddChildren(children);
        }

        return @refreshview;
    }

    public static RefreshView RefreshView(Action<Microsoft.Maui.Controls.RefreshView?> componentRefAction)
    {
        var @refreshview = new RefreshView();
        @refreshview.ComponentRefAction = componentRefAction;
        return @refreshview;
    }

    public static RefreshView RefreshView(Action<Microsoft.Maui.Controls.RefreshView?> componentRefAction, params VisualNode? []? children)
    {
        var @refreshview = new RefreshView();
        @refreshview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @refreshview.AddChildren(children);
        }

        return @refreshview;
    }

    public static SearchBar SearchBar() => new SearchBar();
    public static SearchBar SearchBar(params VisualNode? []? children)
    {
        var @searchbar = new SearchBar();
        if (children != null)
        {
            @searchbar.AddChildren(children);
        }

        return @searchbar;
    }

    public static SearchBar SearchBar(Action<Microsoft.Maui.Controls.SearchBar?> componentRefAction)
    {
        var @searchbar = new SearchBar();
        @searchbar.ComponentRefAction = componentRefAction;
        return @searchbar;
    }

    public static SearchBar SearchBar(Action<Microsoft.Maui.Controls.SearchBar?> componentRefAction, params VisualNode? []? children)
    {
        var @searchbar = new SearchBar();
        @searchbar.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @searchbar.AddChildren(children);
        }

        return @searchbar;
    }

    public static SwipeView SwipeView() => new SwipeView();
    public static SwipeView SwipeView(params VisualNode? []? children)
    {
        var @swipeview = new SwipeView();
        if (children != null)
        {
            @swipeview.AddChildren(children);
        }

        return @swipeview;
    }

    public static SwipeView SwipeView(Action<Microsoft.Maui.Controls.SwipeView?> componentRefAction)
    {
        var @swipeview = new SwipeView();
        @swipeview.ComponentRefAction = componentRefAction;
        return @swipeview;
    }

    public static SwipeView SwipeView(Action<Microsoft.Maui.Controls.SwipeView?> componentRefAction, params VisualNode? []? children)
    {
        var @swipeview = new SwipeView();
        @swipeview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @swipeview.AddChildren(children);
        }

        return @swipeview;
    }

    public static SwipeItem SwipeItem() => new SwipeItem();
    public static SwipeItem SwipeItem(params VisualNode? []? children)
    {
        var @swipeitem = new SwipeItem();
        if (children != null)
        {
            @swipeitem.AddChildren(children);
        }

        return @swipeitem;
    }

    public static SwipeItem SwipeItem(Action<Microsoft.Maui.Controls.SwipeItem?> componentRefAction)
    {
        var @swipeitem = new SwipeItem();
        @swipeitem.ComponentRefAction = componentRefAction;
        return @swipeitem;
    }

    public static SwipeItem SwipeItem(Action<Microsoft.Maui.Controls.SwipeItem?> componentRefAction, params VisualNode? []? children)
    {
        var @swipeitem = new SwipeItem();
        @swipeitem.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @swipeitem.AddChildren(children);
        }

        return @swipeitem;
    }

    public static SwipeItemView SwipeItemView() => new SwipeItemView();
    public static SwipeItemView SwipeItemView(params VisualNode? []? children)
    {
        var @swipeitemview = new SwipeItemView();
        if (children != null)
        {
            @swipeitemview.AddChildren(children);
        }

        return @swipeitemview;
    }

    public static SwipeItemView SwipeItemView(Action<Microsoft.Maui.Controls.SwipeItemView?> componentRefAction)
    {
        var @swipeitemview = new SwipeItemView();
        @swipeitemview.ComponentRefAction = componentRefAction;
        return @swipeitemview;
    }

    public static SwipeItemView SwipeItemView(Action<Microsoft.Maui.Controls.SwipeItemView?> componentRefAction, params VisualNode? []? children)
    {
        var @swipeitemview = new SwipeItemView();
        @swipeitemview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @swipeitemview.AddChildren(children);
        }

        return @swipeitemview;
    }

    public static SwipeItems SwipeItems() => new SwipeItems();
    public static SwipeItems SwipeItems(params VisualNode? []? children)
    {
        var @swipeitems = new SwipeItems();
        if (children != null)
        {
            @swipeitems.AddChildren(children);
        }

        return @swipeitems;
    }

    public static SwipeItems SwipeItems(Action<Microsoft.Maui.Controls.SwipeItems?> componentRefAction)
    {
        var @swipeitems = new SwipeItems();
        @swipeitems.ComponentRefAction = componentRefAction;
        return @swipeitems;
    }

    public static SwipeItems SwipeItems(Action<Microsoft.Maui.Controls.SwipeItems?> componentRefAction, params VisualNode? []? children)
    {
        var @swipeitems = new SwipeItems();
        @swipeitems.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @swipeitems.AddChildren(children);
        }

        return @swipeitems;
    }

    public static CheckBox CheckBox() => new CheckBox();
    public static CheckBox CheckBox(params VisualNode? []? children)
    {
        var @checkbox = new CheckBox();
        if (children != null)
        {
            @checkbox.AddChildren(children);
        }

        return @checkbox;
    }

    public static CheckBox CheckBox(Action<Microsoft.Maui.Controls.CheckBox?> componentRefAction)
    {
        var @checkbox = new CheckBox();
        @checkbox.ComponentRefAction = componentRefAction;
        return @checkbox;
    }

    public static CheckBox CheckBox(Action<Microsoft.Maui.Controls.CheckBox?> componentRefAction, params VisualNode? []? children)
    {
        var @checkbox = new CheckBox();
        @checkbox.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @checkbox.AddChildren(children);
        }

        return @checkbox;
    }

    public static Slider Slider() => new Slider();
    public static Slider Slider(params VisualNode? []? children)
    {
        var @slider = new Slider();
        if (children != null)
        {
            @slider.AddChildren(children);
        }

        return @slider;
    }

    public static Slider Slider(Action<Microsoft.Maui.Controls.Slider?> componentRefAction)
    {
        var @slider = new Slider();
        @slider.ComponentRefAction = componentRefAction;
        return @slider;
    }

    public static Slider Slider(Action<Microsoft.Maui.Controls.Slider?> componentRefAction, params VisualNode? []? children)
    {
        var @slider = new Slider();
        @slider.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @slider.AddChildren(children);
        }

        return @slider;
    }

    public static Stepper Stepper() => new Stepper();
    public static Stepper Stepper(params VisualNode? []? children)
    {
        var @stepper = new Stepper();
        if (children != null)
        {
            @stepper.AddChildren(children);
        }

        return @stepper;
    }

    public static Stepper Stepper(Action<Microsoft.Maui.Controls.Stepper?> componentRefAction)
    {
        var @stepper = new Stepper();
        @stepper.ComponentRefAction = componentRefAction;
        return @stepper;
    }

    public static Stepper Stepper(Action<Microsoft.Maui.Controls.Stepper?> componentRefAction, params VisualNode? []? children)
    {
        var @stepper = new Stepper();
        @stepper.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @stepper.AddChildren(children);
        }

        return @stepper;
    }

    public static Editor Editor() => new Editor();
    public static Editor Editor(params VisualNode? []? children)
    {
        var @editor = new Editor();
        if (children != null)
        {
            @editor.AddChildren(children);
        }

        return @editor;
    }

    public static Editor Editor(Action<Microsoft.Maui.Controls.Editor?> componentRefAction)
    {
        var @editor = new Editor();
        @editor.ComponentRefAction = componentRefAction;
        return @editor;
    }

    public static Editor Editor(Action<Microsoft.Maui.Controls.Editor?> componentRefAction, params VisualNode? []? children)
    {
        var @editor = new Editor();
        @editor.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @editor.AddChildren(children);
        }

        return @editor;
    }

    public static Switch Switch() => new Switch();
    public static Switch Switch(params VisualNode? []? children)
    {
        var @switch = new Switch();
        if (children != null)
        {
            @switch.AddChildren(children);
        }

        return @switch;
    }

    public static Switch Switch(Action<Microsoft.Maui.Controls.Switch?> componentRefAction)
    {
        var @switch = new Switch();
        @switch.ComponentRefAction = componentRefAction;
        return @switch;
    }

    public static Switch Switch(Action<Microsoft.Maui.Controls.Switch?> componentRefAction, params VisualNode? []? children)
    {
        var @switch = new Switch();
        @switch.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @switch.AddChildren(children);
        }

        return @switch;
    }

    public static DatePicker DatePicker() => new DatePicker();
    public static DatePicker DatePicker(params VisualNode? []? children)
    {
        var @datepicker = new DatePicker();
        if (children != null)
        {
            @datepicker.AddChildren(children);
        }

        return @datepicker;
    }

    public static DatePicker DatePicker(Action<Microsoft.Maui.Controls.DatePicker?> componentRefAction)
    {
        var @datepicker = new DatePicker();
        @datepicker.ComponentRefAction = componentRefAction;
        return @datepicker;
    }

    public static DatePicker DatePicker(Action<Microsoft.Maui.Controls.DatePicker?> componentRefAction, params VisualNode? []? children)
    {
        var @datepicker = new DatePicker();
        @datepicker.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @datepicker.AddChildren(children);
        }

        return @datepicker;
    }

    public static TimePicker TimePicker() => new TimePicker();
    public static TimePicker TimePicker(params VisualNode? []? children)
    {
        var @timepicker = new TimePicker();
        if (children != null)
        {
            @timepicker.AddChildren(children);
        }

        return @timepicker;
    }

    public static TimePicker TimePicker(Action<Microsoft.Maui.Controls.TimePicker?> componentRefAction)
    {
        var @timepicker = new TimePicker();
        @timepicker.ComponentRefAction = componentRefAction;
        return @timepicker;
    }

    public static TimePicker TimePicker(Action<Microsoft.Maui.Controls.TimePicker?> componentRefAction, params VisualNode? []? children)
    {
        var @timepicker = new TimePicker();
        @timepicker.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @timepicker.AddChildren(children);
        }

        return @timepicker;
    }

    public static Entry Entry() => new Entry();
    public static Entry Entry(params VisualNode? []? children)
    {
        var @entry = new Entry();
        if (children != null)
        {
            @entry.AddChildren(children);
        }

        return @entry;
    }

    public static Entry Entry(Action<Microsoft.Maui.Controls.Entry?> componentRefAction)
    {
        var @entry = new Entry();
        @entry.ComponentRefAction = componentRefAction;
        return @entry;
    }

    public static Entry Entry(Action<Microsoft.Maui.Controls.Entry?> componentRefAction, params VisualNode? []? children)
    {
        var @entry = new Entry();
        @entry.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @entry.AddChildren(children);
        }

        return @entry;
    }

    public static ActivityIndicator ActivityIndicator() => new ActivityIndicator();
    public static ActivityIndicator ActivityIndicator(params VisualNode? []? children)
    {
        var @activityindicator = new ActivityIndicator();
        if (children != null)
        {
            @activityindicator.AddChildren(children);
        }

        return @activityindicator;
    }

    public static ActivityIndicator ActivityIndicator(Action<Microsoft.Maui.Controls.ActivityIndicator?> componentRefAction)
    {
        var @activityindicator = new ActivityIndicator();
        @activityindicator.ComponentRefAction = componentRefAction;
        return @activityindicator;
    }

    public static ActivityIndicator ActivityIndicator(Action<Microsoft.Maui.Controls.ActivityIndicator?> componentRefAction, params VisualNode? []? children)
    {
        var @activityindicator = new ActivityIndicator();
        @activityindicator.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @activityindicator.AddChildren(children);
        }

        return @activityindicator;
    }

    public static ProgressBar ProgressBar() => new ProgressBar();
    public static ProgressBar ProgressBar(params VisualNode? []? children)
    {
        var @progressbar = new ProgressBar();
        if (children != null)
        {
            @progressbar.AddChildren(children);
        }

        return @progressbar;
    }

    public static ProgressBar ProgressBar(Action<Microsoft.Maui.Controls.ProgressBar?> componentRefAction)
    {
        var @progressbar = new ProgressBar();
        @progressbar.ComponentRefAction = componentRefAction;
        return @progressbar;
    }

    public static ProgressBar ProgressBar(Action<Microsoft.Maui.Controls.ProgressBar?> componentRefAction, params VisualNode? []? children)
    {
        var @progressbar = new ProgressBar();
        @progressbar.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @progressbar.AddChildren(children);
        }

        return @progressbar;
    }

    public static AbsoluteLayout AbsoluteLayout() => new AbsoluteLayout();
    public static AbsoluteLayout AbsoluteLayout(params VisualNode? []? children)
    {
        var @absolutelayout = new AbsoluteLayout();
        if (children != null)
        {
            @absolutelayout.AddChildren(children);
        }

        return @absolutelayout;
    }

    public static AbsoluteLayout AbsoluteLayout(Action<Microsoft.Maui.Controls.AbsoluteLayout?> componentRefAction)
    {
        var @absolutelayout = new AbsoluteLayout();
        @absolutelayout.ComponentRefAction = componentRefAction;
        return @absolutelayout;
    }

    public static AbsoluteLayout AbsoluteLayout(Action<Microsoft.Maui.Controls.AbsoluteLayout?> componentRefAction, params VisualNode? []? children)
    {
        var @absolutelayout = new AbsoluteLayout();
        @absolutelayout.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @absolutelayout.AddChildren(children);
        }

        return @absolutelayout;
    }

    public static IndicatorView IndicatorView() => new IndicatorView();
    public static IndicatorView IndicatorView(params VisualNode? []? children)
    {
        var @indicatorview = new IndicatorView();
        if (children != null)
        {
            @indicatorview.AddChildren(children);
        }

        return @indicatorview;
    }

    public static IndicatorView IndicatorView(Action<Microsoft.Maui.Controls.IndicatorView?> componentRefAction)
    {
        var @indicatorview = new IndicatorView();
        @indicatorview.ComponentRefAction = componentRefAction;
        return @indicatorview;
    }

    public static IndicatorView IndicatorView(Action<Microsoft.Maui.Controls.IndicatorView?> componentRefAction, params VisualNode? []? children)
    {
        var @indicatorview = new IndicatorView();
        @indicatorview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @indicatorview.AddChildren(children);
        }

        return @indicatorview;
    }

    public static Picker Picker() => new Picker();
    public static Picker Picker(params VisualNode? []? children)
    {
        var @picker = new Picker();
        if (children != null)
        {
            @picker.AddChildren(children);
        }

        return @picker;
    }

    public static Picker Picker(Action<Microsoft.Maui.Controls.Picker?> componentRefAction)
    {
        var @picker = new Picker();
        @picker.ComponentRefAction = componentRefAction;
        return @picker;
    }

    public static Picker Picker(Action<Microsoft.Maui.Controls.Picker?> componentRefAction, params VisualNode? []? children)
    {
        var @picker = new Picker();
        @picker.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @picker.AddChildren(children);
        }

        return @picker;
    }

    public static TableView TableView() => new TableView();
    public static TableView TableView(params VisualNode? []? children)
    {
        var @tableview = new TableView();
        if (children != null)
        {
            @tableview.AddChildren(children);
        }

        return @tableview;
    }

    public static TableView TableView(Action<Microsoft.Maui.Controls.TableView?> componentRefAction)
    {
        var @tableview = new TableView();
        @tableview.ComponentRefAction = componentRefAction;
        return @tableview;
    }

    public static TableView TableView(Action<Microsoft.Maui.Controls.TableView?> componentRefAction, params VisualNode? []? children)
    {
        var @tableview = new TableView();
        @tableview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @tableview.AddChildren(children);
        }

        return @tableview;
    }

    public static TextCell TextCell() => new TextCell();
    public static TextCell TextCell(params VisualNode? []? children)
    {
        var @textcell = new TextCell();
        if (children != null)
        {
            @textcell.AddChildren(children);
        }

        return @textcell;
    }

    public static TextCell TextCell(Action<Microsoft.Maui.Controls.TextCell?> componentRefAction)
    {
        var @textcell = new TextCell();
        @textcell.ComponentRefAction = componentRefAction;
        return @textcell;
    }

    public static TextCell TextCell(Action<Microsoft.Maui.Controls.TextCell?> componentRefAction, params VisualNode? []? children)
    {
        var @textcell = new TextCell();
        @textcell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @textcell.AddChildren(children);
        }

        return @textcell;
    }

    public static ImageCell ImageCell() => new ImageCell();
    public static ImageCell ImageCell(params VisualNode? []? children)
    {
        var @imagecell = new ImageCell();
        if (children != null)
        {
            @imagecell.AddChildren(children);
        }

        return @imagecell;
    }

    public static ImageCell ImageCell(Action<Microsoft.Maui.Controls.ImageCell?> componentRefAction)
    {
        var @imagecell = new ImageCell();
        @imagecell.ComponentRefAction = componentRefAction;
        return @imagecell;
    }

    public static ImageCell ImageCell(Action<Microsoft.Maui.Controls.ImageCell?> componentRefAction, params VisualNode? []? children)
    {
        var @imagecell = new ImageCell();
        @imagecell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @imagecell.AddChildren(children);
        }

        return @imagecell;
    }

    public static SwitchCell SwitchCell() => new SwitchCell();
    public static SwitchCell SwitchCell(params VisualNode? []? children)
    {
        var @switchcell = new SwitchCell();
        if (children != null)
        {
            @switchcell.AddChildren(children);
        }

        return @switchcell;
    }

    public static SwitchCell SwitchCell(Action<Microsoft.Maui.Controls.SwitchCell?> componentRefAction)
    {
        var @switchcell = new SwitchCell();
        @switchcell.ComponentRefAction = componentRefAction;
        return @switchcell;
    }

    public static SwitchCell SwitchCell(Action<Microsoft.Maui.Controls.SwitchCell?> componentRefAction, params VisualNode? []? children)
    {
        var @switchcell = new SwitchCell();
        @switchcell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @switchcell.AddChildren(children);
        }

        return @switchcell;
    }

    public static EntryCell EntryCell() => new EntryCell();
    public static EntryCell EntryCell(params VisualNode? []? children)
    {
        var @entrycell = new EntryCell();
        if (children != null)
        {
            @entrycell.AddChildren(children);
        }

        return @entrycell;
    }

    public static EntryCell EntryCell(Action<Microsoft.Maui.Controls.EntryCell?> componentRefAction)
    {
        var @entrycell = new EntryCell();
        @entrycell.ComponentRefAction = componentRefAction;
        return @entrycell;
    }

    public static EntryCell EntryCell(Action<Microsoft.Maui.Controls.EntryCell?> componentRefAction, params VisualNode? []? children)
    {
        var @entrycell = new EntryCell();
        @entrycell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @entrycell.AddChildren(children);
        }

        return @entrycell;
    }

    public static ViewCell ViewCell() => new ViewCell();
    public static ViewCell ViewCell(params VisualNode? []? children)
    {
        var @viewcell = new ViewCell();
        if (children != null)
        {
            @viewcell.AddChildren(children);
        }

        return @viewcell;
    }

    public static ViewCell ViewCell(Action<Microsoft.Maui.Controls.ViewCell?> componentRefAction)
    {
        var @viewcell = new ViewCell();
        @viewcell.ComponentRefAction = componentRefAction;
        return @viewcell;
    }

    public static ViewCell ViewCell(Action<Microsoft.Maui.Controls.ViewCell?> componentRefAction, params VisualNode? []? children)
    {
        var @viewcell = new ViewCell();
        @viewcell.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @viewcell.AddChildren(children);
        }

        return @viewcell;
    }

    public static CarouselView CarouselView() => new CarouselView();
    public static CarouselView CarouselView(params VisualNode? []? children)
    {
        var @carouselview = new CarouselView();
        if (children != null)
        {
            @carouselview.AddChildren(children);
        }

        return @carouselview;
    }

    public static CarouselView CarouselView(Action<Microsoft.Maui.Controls.CarouselView?> componentRefAction)
    {
        var @carouselview = new CarouselView();
        @carouselview.ComponentRefAction = componentRefAction;
        return @carouselview;
    }

    public static CarouselView CarouselView(Action<Microsoft.Maui.Controls.CarouselView?> componentRefAction, params VisualNode? []? children)
    {
        var @carouselview = new CarouselView();
        @carouselview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @carouselview.AddChildren(children);
        }

        return @carouselview;
    }

    public static GraphicsView GraphicsView() => new GraphicsView();
    public static GraphicsView GraphicsView(params VisualNode? []? children)
    {
        var @graphicsview = new GraphicsView();
        if (children != null)
        {
            @graphicsview.AddChildren(children);
        }

        return @graphicsview;
    }

    public static GraphicsView GraphicsView(Action<Microsoft.Maui.Controls.GraphicsView?> componentRefAction)
    {
        var @graphicsview = new GraphicsView();
        @graphicsview.ComponentRefAction = componentRefAction;
        return @graphicsview;
    }

    public static GraphicsView GraphicsView(Action<Microsoft.Maui.Controls.GraphicsView?> componentRefAction, params VisualNode? []? children)
    {
        var @graphicsview = new GraphicsView();
        @graphicsview.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @graphicsview.AddChildren(children);
        }

        return @graphicsview;
    }

    public static Shadow Shadow() => new Shadow();
    public static Shadow Shadow(params VisualNode? []? children)
    {
        var @shadow = new Shadow();
        if (children != null)
        {
            @shadow.AddChildren(children);
        }

        return @shadow;
    }

    public static Shadow Shadow(Action<Microsoft.Maui.Controls.Shadow?> componentRefAction)
    {
        var @shadow = new Shadow();
        @shadow.ComponentRefAction = componentRefAction;
        return @shadow;
    }

    public static Shadow Shadow(Action<Microsoft.Maui.Controls.Shadow?> componentRefAction, params VisualNode? []? children)
    {
        var @shadow = new Shadow();
        @shadow.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @shadow.AddChildren(children);
        }

        return @shadow;
    }

    public static Window Window() => new Window();
    public static Window Window(params VisualNode? []? children)
    {
        var @window = new Window();
        if (children != null)
        {
            @window.AddChildren(children);
        }

        return @window;
    }

    public static Window Window(Action<Microsoft.Maui.Controls.Window?> componentRefAction)
    {
        var @window = new Window();
        @window.ComponentRefAction = componentRefAction;
        return @window;
    }

    public static Window Window(Action<Microsoft.Maui.Controls.Window?> componentRefAction, params VisualNode? []? children)
    {
        var @window = new Window();
        @window.ComponentRefAction = componentRefAction;
        if (children != null)
        {
            @window.AddChildren(children);
        }

        return @window;
    }
}