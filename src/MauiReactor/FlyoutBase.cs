// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IFlyoutBase : IElement
{
}

public abstract partial class FlyoutBase<T> : Element<T>, IFlyoutBase where T : Microsoft.Maui.Controls.FlyoutBase, new()
{
    protected FlyoutBase()
    {
        FlyoutBaseStyles.Default?.Invoke(this);
    }

    protected FlyoutBase(Action<T?> componentRefAction) : base(componentRefAction)
    {
        FlyoutBaseStyles.Default?.Invoke(this);
    }

    internal override void Reset()
    {
        base.Reset();
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (Theme != null && FlyoutBaseStyles.Themes.TryGetValue(Theme, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public static partial class FlyoutBaseExtensions
{
}

public static partial class FlyoutBaseStyles
{
    public static Action<IFlyoutBase>? Default { get; set; }
    public static Dictionary<string, Action<IFlyoutBase>> Themes { get; } = [];
}