// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface INavigableElement : IElement
{
    object? Style { get; set; }
}

public abstract partial class NavigableElement<T> : Element<T>, INavigableElement where T : Microsoft.Maui.Controls.NavigableElement, new()
{
    protected NavigableElement()
    {
        NavigableElementStyles.Default?.Invoke(this);
    }

    protected NavigableElement(Action<T?> componentRefAction) : base(componentRefAction)
    {
        NavigableElementStyles.Default?.Invoke(this);
    }

    object? INavigableElement.Style { get; set; }

    internal override void Reset()
    {
        base.Reset();
        var thisAsINavigableElement = (INavigableElement)this;
        thisAsINavigableElement.Style = null;
        OnReset();
    }

    partial void OnReset();
    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsINavigableElement = (INavigableElement)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.NavigableElement.StyleProperty, thisAsINavigableElement.Style);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (Theme != null && NavigableElementStyles.Themes.TryGetValue(Theme, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }
}

public static partial class NavigableElementExtensions
{
    public static T Style<T>(this T navigableElement, Microsoft.Maui.Controls.Style style)
        where T : INavigableElement
    {
        navigableElement.Style = style;
        return navigableElement;
    }

    public static T Style<T>(this T navigableElement, Func<Microsoft.Maui.Controls.Style> styleFunc)
        where T : INavigableElement
    {
        navigableElement.Style = new PropertyValue<Microsoft.Maui.Controls.Style>(styleFunc);
        return navigableElement;
    }
}

public static partial class NavigableElementStyles
{
    public static Action<INavigableElement>? Default { get; set; }
    public static Dictionary<string, Action<INavigableElement>> Themes { get; } = [];
}