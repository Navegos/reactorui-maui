// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable
namespace MauiReactor;
public partial interface IItemsView : IView
{
    object? HorizontalScrollBarVisibility { get; set; }

    object? VerticalScrollBarVisibility { get; set; }

    object? RemainingItemsThreshold { get; set; }

    object? ItemsUpdatingScrollMode { get; set; }

    EventCommand<ScrollToRequestEventArgs>? ScrollToRequestedEvent { get; set; }

    EventCommand<ItemsViewScrolledEventArgs>? ScrolledEvent { get; set; }

    EventCommand<EventArgs>? RemainingItemsThresholdReachedEvent { get; set; }
}

public abstract partial class ItemsView<T> : View<T>, IItemsView where T : Microsoft.Maui.Controls.ItemsView, new()
{
    protected ItemsView()
    {
        ItemsViewStyles.Default?.Invoke(this);
    }

    protected ItemsView(Action<T?> componentRefAction) : base(componentRefAction)
    {
        ItemsViewStyles.Default?.Invoke(this);
    }

    object? IItemsView.HorizontalScrollBarVisibility { get; set; }

    object? IItemsView.VerticalScrollBarVisibility { get; set; }

    object? IItemsView.RemainingItemsThreshold { get; set; }

    object? IItemsView.ItemsUpdatingScrollMode { get; set; }

    EventCommand<ScrollToRequestEventArgs>? IItemsView.ScrollToRequestedEvent { get; set; }

    EventCommand<ItemsViewScrolledEventArgs>? IItemsView.ScrolledEvent { get; set; }

    EventCommand<EventArgs>? IItemsView.RemainingItemsThresholdReachedEvent { get; set; }

    protected override void OnUpdate()
    {
        OnBeginUpdate();
        Validate.EnsureNotNull(NativeControl);
        var thisAsIItemsView = (IItemsView)this;
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty, thisAsIItemsView.HorizontalScrollBarVisibility);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty, thisAsIItemsView.VerticalScrollBarVisibility);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty, thisAsIItemsView.RemainingItemsThreshold);
        SetPropertyValue(NativeControl, Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty, thisAsIItemsView.ItemsUpdatingScrollMode);
        base.OnUpdate();
        OnEndUpdate();
    }

    partial void OnBeginUpdate();
    partial void OnEndUpdate();
    partial void OnBeginAnimate();
    partial void OnEndAnimate();
    protected override void OnThemeChanged()
    {
        if (ThemeKey != null && ItemsViewStyles.Themes.TryGetValue(ThemeKey, out var styleAction))
        {
            styleAction(this);
        }

        base.OnThemeChanged();
    }

    partial void OnAttachingNativeEvents();
    partial void OnDetachingNativeEvents();
    private EventCommand<ScrollToRequestEventArgs>? _executingScrollToRequestedEvent;
    private EventCommand<ItemsViewScrolledEventArgs>? _executingScrolledEvent;
    private EventCommand<EventArgs>? _executingRemainingItemsThresholdReachedEvent;
    protected override void OnAttachNativeEvents()
    {
        Validate.EnsureNotNull(NativeControl);
        var thisAsIItemsView = (IItemsView)this;
        if (thisAsIItemsView.ScrollToRequestedEvent != null)
        {
            NativeControl.ScrollToRequested += NativeControl_ScrollToRequested;
        }

        if (thisAsIItemsView.ScrolledEvent != null)
        {
            NativeControl.Scrolled += NativeControl_Scrolled;
        }

        if (thisAsIItemsView.RemainingItemsThresholdReachedEvent != null)
        {
            NativeControl.RemainingItemsThresholdReached += NativeControl_RemainingItemsThresholdReached;
        }

        OnAttachingNativeEvents();
        base.OnAttachNativeEvents();
    }

    private void NativeControl_ScrollToRequested(object? sender, ScrollToRequestEventArgs e)
    {
        var thisAsIItemsView = (IItemsView)this;
        if (_executingScrollToRequestedEvent == null || _executingScrollToRequestedEvent.IsCompleted)
        {
            _executingScrollToRequestedEvent = thisAsIItemsView.ScrollToRequestedEvent;
            _executingScrollToRequestedEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_Scrolled(object? sender, ItemsViewScrolledEventArgs e)
    {
        var thisAsIItemsView = (IItemsView)this;
        if (_executingScrolledEvent == null || _executingScrolledEvent.IsCompleted)
        {
            _executingScrolledEvent = thisAsIItemsView.ScrolledEvent;
            _executingScrolledEvent?.Execute(sender, e);
        }
    }

    private void NativeControl_RemainingItemsThresholdReached(object? sender, EventArgs e)
    {
        var thisAsIItemsView = (IItemsView)this;
        if (_executingRemainingItemsThresholdReachedEvent == null || _executingRemainingItemsThresholdReachedEvent.IsCompleted)
        {
            _executingRemainingItemsThresholdReachedEvent = thisAsIItemsView.RemainingItemsThresholdReachedEvent;
            _executingRemainingItemsThresholdReachedEvent?.Execute(sender, e);
        }
    }

    protected override void OnDetachNativeEvents()
    {
        if (NativeControl != null)
        {
            NativeControl.ScrollToRequested -= NativeControl_ScrollToRequested;
            NativeControl.Scrolled -= NativeControl_Scrolled;
            NativeControl.RemainingItemsThresholdReached -= NativeControl_RemainingItemsThresholdReached;
        }

        OnDetachingNativeEvents();
        base.OnDetachNativeEvents();
    }

    partial void Migrated(VisualNode newNode);
    protected override void OnMigrated(VisualNode newNode)
    {
        if (newNode is ItemsView<T> @itemsview)
        {
            if (_executingScrollToRequestedEvent != null && !_executingScrollToRequestedEvent.IsCompleted)
            {
                @itemsview._executingScrollToRequestedEvent = _executingScrollToRequestedEvent;
            }

            if (_executingScrolledEvent != null && !_executingScrolledEvent.IsCompleted)
            {
                @itemsview._executingScrolledEvent = _executingScrolledEvent;
            }

            if (_executingRemainingItemsThresholdReachedEvent != null && !_executingRemainingItemsThresholdReachedEvent.IsCompleted)
            {
                @itemsview._executingRemainingItemsThresholdReachedEvent = _executingRemainingItemsThresholdReachedEvent;
            }
        }

        Migrated(newNode);
        base.OnMigrated(newNode);
    }
}

public static partial class ItemsViewExtensions
{
    public static T HorizontalScrollBarVisibility<T>(this T itemsView, Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : IItemsView
    {
        itemsView.HorizontalScrollBarVisibility = horizontalScrollBarVisibility;
        return itemsView;
    }

    public static T HorizontalScrollBarVisibility<T>(this T itemsView, Func<Microsoft.Maui.ScrollBarVisibility> horizontalScrollBarVisibilityFunc)
        where T : IItemsView
    {
        itemsView.HorizontalScrollBarVisibility = new PropertyValue<Microsoft.Maui.ScrollBarVisibility>(horizontalScrollBarVisibilityFunc);
        return itemsView;
    }

    public static T VerticalScrollBarVisibility<T>(this T itemsView, Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : IItemsView
    {
        itemsView.VerticalScrollBarVisibility = verticalScrollBarVisibility;
        return itemsView;
    }

    public static T VerticalScrollBarVisibility<T>(this T itemsView, Func<Microsoft.Maui.ScrollBarVisibility> verticalScrollBarVisibilityFunc)
        where T : IItemsView
    {
        itemsView.VerticalScrollBarVisibility = new PropertyValue<Microsoft.Maui.ScrollBarVisibility>(verticalScrollBarVisibilityFunc);
        return itemsView;
    }

    public static T RemainingItemsThreshold<T>(this T itemsView, int remainingItemsThreshold)
        where T : IItemsView
    {
        itemsView.RemainingItemsThreshold = remainingItemsThreshold;
        return itemsView;
    }

    public static T RemainingItemsThreshold<T>(this T itemsView, Func<int> remainingItemsThresholdFunc)
        where T : IItemsView
    {
        itemsView.RemainingItemsThreshold = new PropertyValue<int>(remainingItemsThresholdFunc);
        return itemsView;
    }

    public static T ItemsUpdatingScrollMode<T>(this T itemsView, Microsoft.Maui.Controls.ItemsUpdatingScrollMode itemsUpdatingScrollMode)
        where T : IItemsView
    {
        itemsView.ItemsUpdatingScrollMode = itemsUpdatingScrollMode;
        return itemsView;
    }

    public static T ItemsUpdatingScrollMode<T>(this T itemsView, Func<Microsoft.Maui.Controls.ItemsUpdatingScrollMode> itemsUpdatingScrollModeFunc)
        where T : IItemsView
    {
        itemsView.ItemsUpdatingScrollMode = new PropertyValue<Microsoft.Maui.Controls.ItemsUpdatingScrollMode>(itemsUpdatingScrollModeFunc);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Action? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new SyncEventCommand<ScrollToRequestEventArgs>(execute: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Action<ScrollToRequestEventArgs>? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new SyncEventCommand<ScrollToRequestEventArgs>(executeWithArgs: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Action<object?, ScrollToRequestEventArgs>? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new SyncEventCommand<ScrollToRequestEventArgs>(executeWithFullArgs: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Func<Task>? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new AsyncEventCommand<ScrollToRequestEventArgs>(execute: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Func<ScrollToRequestEventArgs, Task>? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new AsyncEventCommand<ScrollToRequestEventArgs>(executeWithArgs: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrollToRequested<T>(this T itemsView, Func<object?, ScrollToRequestEventArgs, Task>? scrollToRequestedAction)
        where T : IItemsView
    {
        itemsView.ScrollToRequestedEvent = new AsyncEventCommand<ScrollToRequestEventArgs>(executeWithFullArgs: scrollToRequestedAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Action? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new SyncEventCommand<ItemsViewScrolledEventArgs>(execute: scrolledAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Action<ItemsViewScrolledEventArgs>? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new SyncEventCommand<ItemsViewScrolledEventArgs>(executeWithArgs: scrolledAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Action<object?, ItemsViewScrolledEventArgs>? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new SyncEventCommand<ItemsViewScrolledEventArgs>(executeWithFullArgs: scrolledAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Func<Task>? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new AsyncEventCommand<ItemsViewScrolledEventArgs>(execute: scrolledAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Func<ItemsViewScrolledEventArgs, Task>? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new AsyncEventCommand<ItemsViewScrolledEventArgs>(executeWithArgs: scrolledAction);
        return itemsView;
    }

    public static T OnScrolled<T>(this T itemsView, Func<object?, ItemsViewScrolledEventArgs, Task>? scrolledAction)
        where T : IItemsView
    {
        itemsView.ScrolledEvent = new AsyncEventCommand<ItemsViewScrolledEventArgs>(executeWithFullArgs: scrolledAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Action? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new SyncEventCommand<EventArgs>(execute: remainingItemsThresholdReachedAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Action<EventArgs>? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new SyncEventCommand<EventArgs>(executeWithArgs: remainingItemsThresholdReachedAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Action<object?, EventArgs>? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new SyncEventCommand<EventArgs>(executeWithFullArgs: remainingItemsThresholdReachedAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Func<Task>? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new AsyncEventCommand<EventArgs>(execute: remainingItemsThresholdReachedAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Func<EventArgs, Task>? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new AsyncEventCommand<EventArgs>(executeWithArgs: remainingItemsThresholdReachedAction);
        return itemsView;
    }

    public static T OnRemainingItemsThresholdReached<T>(this T itemsView, Func<object?, EventArgs, Task>? remainingItemsThresholdReachedAction)
        where T : IItemsView
    {
        itemsView.RemainingItemsThresholdReachedEvent = new AsyncEventCommand<EventArgs>(executeWithFullArgs: remainingItemsThresholdReachedAction);
        return itemsView;
    }
}

public static partial class ItemsViewStyles
{
    public static Action<IItemsView>? Default { get; set; }
    public static Dictionary<string, Action<IItemsView>> Themes { get; } = [];
}