<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

using MauiReactor.Animations;
using MauiReactor.Shapes;
using MauiReactor.Internals;

#nullable enable

namespace MauiReactor;


public partial class Component
{
    <# foreach (var type in _typesScaffolded) { #>
    <# var typeName = type.FullName.Replace("Microsoft.Maui.Controls.", string.Empty); #>

    public static <#= typeName #> <#= type.Name #>()
        => GetNodeFromPool<<#= typeName #>>();

    <# if (typeof(Element).IsAssignableFrom(type)) { #>
    public static <#= typeName #> <#= type.Name #>(params VisualNode?[]? children)
    {
        var @<#= type.Name.ToLower() #> = GetNodeFromPool<<#= typeName #>>();
        if (children != null)
        {
            @<#= type.Name.ToLower() #>.AddChildren(children);
        }
        return @<#= type.Name.ToLower() #>;
    }
    <# } #>

    public static <#= typeName #> <#= type.Name #>(Action<<#= type.FullName #>?> componentRefAction)
    {
        var @<#= type.Name.ToLower() #> = GetNodeFromPool<<#= typeName #>>();
        @<#= type.Name.ToLower() #>.ComponentRefAction = componentRefAction;
        return @<#= type.Name.ToLower() #>;
    }

    <# } #>
}


